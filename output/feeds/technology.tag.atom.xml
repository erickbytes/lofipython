<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - technology</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/technology.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2024-09-25T17:48:00-05:00</updated><entry><title>When Microsoft Was Uncool and How They Flipped Apple</title><link href="https://lofipython.com/when-microsoft-was-uncool.html" rel="alternate"></link><published>2024-09-25T17:48:00-05:00</published><updated>2024-09-25T17:48:00-05:00</updated><author><name>lofipython</name></author><id>tag:lofipython.com,2024-09-25:/when-microsoft-was-uncool.html</id><summary type="html">&lt;p&gt;I began paying attention to what was relevant in the tech scene around 2014, in my 20s.
Back then, I was just getting started studying Python. It was an interesting time in tech.
The term &amp;quot;Big Data&amp;quot; was getting tossed around a lot, but the pandas library hadn't yet reached …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I began paying attention to what was relevant in the tech scene around 2014, in my 20s.
Back then, I was just getting started studying Python. It was an interesting time in tech.
The term &amp;quot;Big Data&amp;quot; was getting tossed around a lot, but the pandas library hadn't yet reached mass adoption
in data circles like it now has today. People were still talking about Hadoop + Map Reduce. (RIP)&lt;/p&gt;
&lt;p&gt;In the 2010s, it didn't take much perusing online to find people in the Python community bashing Microsoft.
If tech companies were a high school, Apple was the cool kid everybody wanted to know, Microsoft was the
kid who nobody liked and everyone made fun of. Understandably, the Windows operating system didn't mesh
with Python programming as well as Linux or Mac OS. By 2024, Microsoft gained their mojo back, or found the mojo
they never had. Having used Windows a lot at my last job, I recognize the OS and its Python implementation have flaws.
I still got my work done and had no problems, without complaining. I continued to play around on Windows and write Python
on it even though people trashed it online. I'm glad I did!&lt;/p&gt;
&lt;p&gt;How did Microsoft flip Apple? Steve Ballmer left the company in 2014, yielding to Satya Nadella as CEO.
Since then, the company culture shifted miraculously. In the Python community, they have made a huge impact
by investing in the language. They constantly release free Python + AI courses, and integrated Excel with Python.
Guido, the creator of Python is employed full-time, working on improving the Python language. That tells you a lot
of how much has changed since Python's BDFL is still working there after 3 years. Microsoft's culture change propelled it into
the 2020s with newfound momentum. With some timely bets, they saw the AI revolution coming and capitalized first.&lt;/p&gt;
&lt;blockquote&gt;
If someone feels this way in 2024, they probably don't want to admit: Microsoft is Apple in 2012,
and Apple is Microsoft in 2012.&lt;/blockquote&gt;
&lt;p&gt;What is funny to see is that nowadays, fewer people are bashing Microsoft. I used to see it regularly,
people teeing off online, &amp;quot;writing Python on Windows is such a terrible experience for XYZ thing, why is Windows so awful??&amp;quot;&amp;quot;
I see less of those people posting such thoughts now. Maybe they're still out there. If someone feels this way in 2024,
they probably don't want to admit: Microsoft is Apple in 2012, and Apple is Microsoft in 2012. I posit they
switched places in respective coolness among tech circles. People realized Apple is not the friend of developers
or society in general. They are self-serving to a vicious degree. Apple is focused on maintaining their walled garden on iOS.&lt;/p&gt;
&lt;p&gt;Microsoft is now a better advocate for techies and Python development. Sure, some people prefer to code on Macs,
more power to them. Linux is typically the favorite of the three and it is awesome. It's also not released by a
for profit corporation which is uber cool to developers.&lt;/p&gt;
&lt;p&gt;Apple is also less cool due to their battle with Epic Games and insistence on 30% rake for in-app
purchases on iOS. Not to mention an unwillingness to change their policies to appease stricter European Union regulations
for things like 3rd party app stores.&lt;/p&gt;
&lt;p&gt;Microsoft is integrating AI deep into their products. Apple, after being slow on the uptake to AI,
followed Microsoft's lead to invest in OpenAI and roll its AI chat to iPhones.
Who is the leader here? In terms of &amp;quot;What have you done for me lately?&amp;quot;, it's Microsoft. In terms of who supports open
and free information, it's Microsoft. Who's cool now?&lt;/p&gt;
&lt;img alt="Microsoft vs. Apple Stock Price, All-Time" src="https://lofipython.com/images/Microsoft-versus-Apple-stock.png" /&gt;
</content><category term="big tech, technology culture, Python"></category><category term="Microsoft"></category><category term="Apple"></category><category term="technology"></category></entry><entry><title>So You Want to Learn Python?</title><link href="https://lofipython.com/so-you-want-to-learn-python.html" rel="alternate"></link><published>2021-02-14T14:05:00-06:00</published><updated>2021-02-14T14:05:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-02-14:/so-you-want-to-learn-python.html</id><summary type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions&lt;/a&gt;. They are awesome! You can do so much with these. Learn to apply them. You won't regret it! See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2021/02/17/an-intro-to-pythons-built-in-functions/"&gt;An Intro to Python's Built-in Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#string-methods"&gt;String methods&lt;/a&gt;. Want to capitalize, lowercase or replace characters in text? How about checking if a &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str.isdigit"&gt;str.isdigit()&lt;/a&gt;? Get to know Python's string methods. I use these frequently. Also, the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.isdigit.html"&gt;pandas string method implementations&lt;/a&gt; are great for applying them to tabular data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#documentation-strings"&gt;Docstrings&lt;/a&gt;. I truly enjoy adding docstrings at the beginning of my functions. They add clarity and ease of understanding.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=C4Kc8xzcA68&amp;amp;ab_channel=EugeneYarmash"&gt;The Mighty Dictionary&lt;/a&gt;. Lists and tuples are useful too, but &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries"&gt;dictionaries&lt;/a&gt; are so handy with the ability to store and access key-value pairs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List Comprehensions&lt;/a&gt;. These allow you to perform transformations on lists in one line of code! I love the feeling when I apply a list comprehension that is concise, yet readable.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;. These can be used to apply a function &amp;quot;on the fly&amp;quot;. I love their succinctness. It took me a few years to become comfortable with them. Sometimes it makes sense to use a lambda expression instead of a regular function to transform data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#date-objects"&gt;Date Objects&lt;/a&gt;. Wielding date objects and formatting them to your needs is a pivotal Python skill. Once you have it down, it unlocks a lot of automation and scripting abilities when combined with libraries like &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html"&gt;pathlib&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/os.html?highlight=os#module-os"&gt;os&lt;/a&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html?highlight=glob#module-glob"&gt;glob&lt;/a&gt; for reading file metadata and then executing an action based on the date of the file, for example. I use &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.date.today"&gt;date.today()&lt;/a&gt; a lot when I want to fetch today's date and &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#available-types"&gt;timedelta&lt;/a&gt; to compare two dates. The datetime module is your friend, dive in. Must know for custom date formatting: strftime()&amp;nbsp;and&amp;nbsp;strptime(). See also: &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes"&gt;Time Format Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For tabular data, I often use &lt;tt class="docutils literal"&gt;pd.to_datetime()&lt;/tt&gt; to convert a series of strings to datetime objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install pandas with this command: python -m pip install pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USA Born&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1776-07-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WTC Bombings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2001-09-11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Biden Inauguration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2021-01-20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# convert a pandas series of strings to datetime objects&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Just the tip of the iceberg...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The amazing part of Python is that its community has developed an astonishing plethora of external libraries which can be &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;installed by pip&lt;/a&gt;. Usually I'll learn how to use new libraries after googling to find a well-written README on Github or helpful documentation. The language comes with an impressive line-up of baked-in &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;tools and libraries&lt;/a&gt; way beyond what I've mentioned here. But I think this is a great start. Get to know these common Python language features and you'll be surprised how much you can do!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Comprehensive Python Learning Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;How long did it take you to learn Python?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dabeaz-course/practical-python"&gt;Practical Python Programming&lt;/a&gt; (free course)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://google.github.io/styleguide/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/satwikkansal/wtfpython"&gt;What the f*ck Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pysanity.netlify.app/#testing"&gt;PySanity&lt;/a&gt;&lt;/p&gt;
</content><category term="programming"></category><category term="learning"></category><category term="python"></category><category term="skills"></category><category term="technology"></category></entry><entry><title>Pondering Join Algorithms</title><link href="https://lofipython.com/join-algorithms.html" rel="alternate"></link><published>2020-08-09T18:24:00-05:00</published><updated>2020-08-09T18:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-08-09:/join-algorithms.html</id><summary type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, your smaller table should be the &amp;quot;left&amp;quot; table when joining two tables.&amp;quot;... Professor demonstrates better performance by making the smaller table the &amp;quot;outer&amp;quot; table in a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/nested-loop-joins.html#:~:text=A%20Block%20Nested%2DLoop%20(BNL,inner%20loops%20must%20be%20read.&amp;amp;text=The%20join_buffer_size%20system%20variable%20determines,used%20to%20process%20a%20query."&gt;mysql example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The brute force approach&amp;quot;&lt;/li&gt;
&lt;li&gt;If you have enough memory to hold a large table, a good option for joining.&lt;/li&gt;
&lt;li&gt;Always pick the smaller table as the outer table.&lt;/li&gt;
&lt;li&gt;Buffer as much of your outer table in memory as possible to reduce redundant I/O.&lt;/li&gt;
&lt;li&gt;Loop over the inner table or use an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Index Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://www.cs.carleton.edu/faculty/dmusicant/cs347f03/proj3/"&gt;CS Course definition&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If indexes are available, or you could create an index to use for a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sort-Merge Join [&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sort-merge_join"&gt;wikipedia&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Useful if one or both tables are sorted on a join key. Maximize sequential I/O.&lt;/p&gt;
&lt;img alt="Sort - Merge Join" class="alignnone size-full wp-image-4121" src="https://pythonmarketer.files.wordpress.com/2020/08/sort-merge-join-1.png" style="width: 1731px; height: 855px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best performance. For large datasets.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Phase #1 Build (Hash Table)&lt;/li&gt;
&lt;li&gt;Phase #2 Probe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom Filter&lt;/a&gt; set operations for probe phase optimization.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;insert a key&lt;/li&gt;
&lt;li&gt;lookup a key&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading on Bloom Filters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://onatm.dev/2020/08/10/let-s-implement-a-bloom-filter/"&gt;Let's implement a Bloom Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gopiandcode.uk/logs/log-bloomfilters-debunked.html"&gt;Bloom Filters Debunked&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Grace Hash Join&lt;/strong&gt; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_join#Grace_hash_join"&gt;wikipedia&lt;/a&gt;]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Do hash joins when things don't fit in memory.&amp;quot;&lt;/li&gt;
&lt;li&gt;Use a hash table for each table. Break the tables into buckets then do a nested loop join on each bucket. If the buckets do not fit in memory, use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_partitioning#:~:text=Recursive%20partitioning%20is%20a%20statistical,on%20several%20dichotomous%20independent%20variables."&gt;recursive partitioning&lt;/a&gt;. Then everything fits in memory for the join.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Split outer relation into partitions based on the hash key.&amp;quot;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo on Hash Join algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashing is almost always better than sorting for operator execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;No join algorithm works well in all scenarios.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Andy Pavlo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://webmention.rocks/update/1"&gt;webmention&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://webmention.rocks/update/1/part/2"&gt;webmention&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, data, Databases, programming"></category><category term="algorithms"></category><category term="computer science"></category><category term="joins"></category><category term="learning"></category><category term="study"></category><category term="technology"></category></entry></feed>