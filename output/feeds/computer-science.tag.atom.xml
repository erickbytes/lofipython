<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - computer science</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/computer-science.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2020-11-28T12:55:00-06:00</updated><entry><title>20 Eclectic Computer Science Wikipedia Articles</title><link href="https://lofipython.com/a-computer-science-themed-wikipedia-link-grab-bag.html" rel="alternate"></link><published>2020-11-28T12:55:00-06:00</published><updated>2020-11-28T12:55:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-11-28:/a-computer-science-themed-wikipedia-link-grab-bag.html</id><summary type="html">&lt;p&gt;Here are 20 random technology-oriented Wikipedia links I recently collected after re-organizing troves of bookmarked links accumulated over the past few years. These articles peek into the wide variety of things to learn about that exist in Computer Science. ABL. Always. Be. Learning. Curiosity and well organized browser bookmarks are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are 20 random technology-oriented Wikipedia links I recently collected after re-organizing troves of bookmarked links accumulated over the past few years. These articles peek into the wide variety of things to learn about that exist in Computer Science. ABL. Always. Be. Learning. Curiosity and well organized browser bookmarks are your friend.&lt;/p&gt;
&lt;p&gt;I support Wikipedia with a donation nearly every year. It's an amazing resource to learn about everything and I'm very grateful for it. Thank you for existing, Wikipedia. It's is a great jumping off point to learn about something I don't understand, which is much of this list here.&lt;/p&gt;
&lt;div class="section" id="algorithms-theories"&gt;
&lt;h2&gt;Algorithms &amp;amp; Theories&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deterministic_algorithm"&gt;Deterministic algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Greater fool theory&lt;/a&gt; (economics)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Man_or_boy_test"&gt;Man or boy test&lt;/a&gt; - compiler theory from Donald Knuth&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursion"&gt;Recursion&lt;/a&gt; - the most common algorithm I read about in passing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="databases"&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_(computing)"&gt;Cache&lt;/a&gt; + &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_invalidation"&gt;Cache invalidation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
caching is a common technique to store data so that it can be quickly fetched later with limited usage of database resources.&lt;/blockquote&gt;
&lt;p&gt;` &amp;lt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;https://en.wikipedia.org/wiki/Column-oriented_DBMS&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Column-oriented DBMS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Data_definition_language#:~:text=In%20the%20context%20of%20SQL,tables%2C%20indexes%2C%20and%20users."&gt;Data definition language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Database_normalization"&gt;Database normalization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"&gt;Lock&lt;/a&gt; (mutex)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing"&gt;Hybrid transactional/analytical processing&lt;/a&gt; (HTAP)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;Online transaction processing&lt;/a&gt; (OLTP) - Making lots of writes to the database.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;Online analytical processing&lt;/a&gt; (OLAP) - Reading the database. Lots of joins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="developer"&gt;
&lt;h2&gt;Developer&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)"&gt;Asynchrony&lt;/a&gt; Used for performing operations in parallel.&lt;/p&gt;
&lt;p&gt;` &amp;lt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;https://en.wikipedia.org/wiki/Remote_procedure_call&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Event-driven_programming#:~:text=In%20computer%20programming%2C%20event%2Ddriven,from%20other%20programs%20or%20threads."&gt;Event-driven programming&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Async is always event-driven, but not the other way round.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/5844955/whats-the-difference-between-event-driven-and-asynchronous-between-epoll-and-a#:~:text=Asynchronous%20is%20basically%20multitasking.,in%20an%20easy%20responsive%20manner."&gt;Stephen Chung - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;Garbage collection&lt;/a&gt; - automatic memory management&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parallel_computing#:~:text=Parallel%20computers%20can%20be%20roughly,work%20on%20the%20same%20task."&gt;Parallel Computing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Reinforcement_learning"&gt;Reinforcement learning&lt;/a&gt; - one paradigm of machine learning&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;Remote procedure call&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Runbook#:~:text=In%20a%20computer%20system%20or,or%20in%20physical%20book%20form."&gt;List of Lists of Lists&lt;/a&gt; - check out the &amp;quot;Technology&amp;quot; section&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-reminders"&gt;
&lt;h2&gt;Final Reminders&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;check out the &lt;a class="reference external" href="https://pypi.org/project/wikipedia/"&gt;Wikipedia python library&lt;/a&gt; (import wikipedia)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Special:Random"&gt;Random&lt;/a&gt; - Wikipedia's Random Article Button&lt;/li&gt;
&lt;li&gt;And now for something completely different: &lt;a class="reference external" href="https://github.com/yuandongzhong/useful-links-for-javascript"&gt;Useful Links for Javascript Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading, hope you found something you liked! Here's another post with more &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/06/23/my-favorite-free-educational-courses-and-talks-to-absorb/"&gt;free resources for learning computer science online&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Databases, programming"></category><category term="algorithms"></category><category term="articles"></category><category term="computer science"></category><category term="Wikipedia"></category></entry><entry><title>Pondering Join Algorithms</title><link href="https://lofipython.com/join-algorithms.html" rel="alternate"></link><published>2020-08-09T18:24:00-05:00</published><updated>2020-08-09T18:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-08-09:/join-algorithms.html</id><summary type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, your smaller table should be the &amp;quot;left&amp;quot; table when joining two tables.&amp;quot;... Professor demonstrates better performance by making the smaller table the &amp;quot;outer&amp;quot; table in a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/nested-loop-joins.html#:~:text=A%20Block%20Nested%2DLoop%20(BNL,inner%20loops%20must%20be%20read.&amp;amp;text=The%20join_buffer_size%20system%20variable%20determines,used%20to%20process%20a%20query."&gt;mysql example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The brute force approach&amp;quot;&lt;/li&gt;
&lt;li&gt;If you have enough memory to hold a large table, a good option for joining.&lt;/li&gt;
&lt;li&gt;Always pick the smaller table as the outer table.&lt;/li&gt;
&lt;li&gt;Buffer as much of your outer table in memory as possible to reduce redundant I/O.&lt;/li&gt;
&lt;li&gt;Loop over the inner table or use an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Index Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://www.cs.carleton.edu/faculty/dmusicant/cs347f03/proj3/"&gt;CS Course definition&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If indexes are available, or you could create an index to use for a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sort-Merge Join [&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sort-merge_join"&gt;wikipedia&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Useful if one or both tables are sorted on a join key. Maximize sequential I/O.&lt;/p&gt;
&lt;img alt="Sort - Merge Join" class="alignnone size-full wp-image-4121" src="https://pythonmarketer.files.wordpress.com/2020/08/sort-merge-join-1.png" style="width: 1731px; height: 855px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash Join [&lt;/strong&gt;&lt;a class="reference external" href="https://mysqlserverteam.com/hash-join-in-mysql-8/#:~:text=Hash%20join%20is%20a%20way,inputs%20can%20fit%20in%20memory."&gt;mysql blog example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best performance. For large datasets.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Phase #1 Build (Hash Table)&lt;/li&gt;
&lt;li&gt;Phase #2 Probe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Use&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom Filter&lt;/a&gt;&lt;strong&gt;set operations for probe phase optimization&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;insert a key&lt;/li&gt;
&lt;li&gt;lookup a key&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading on Bloom Filters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://onatm.dev/2020/08/10/let-s-implement-a-bloom-filter/"&gt;Let's implement a Bloom Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gopiandcode.uk/logs/log-bloomfilters-debunked.html"&gt;Bloom Filters Debunked&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Grace Hash Join&lt;/strong&gt; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_join#Grace_hash_join"&gt;wikipedia&lt;/a&gt;]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Do hash joins when things don't fit in memory.&amp;quot;&lt;/li&gt;
&lt;li&gt;Use a hash table for each table. Break the tables into buckets then do a nested loop join on each bucket. If the buckets do not fit in memory, use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_partitioning#:~:text=Recursive%20partitioning%20is%20a%20statistical,on%20several%20dichotomous%20independent%20variables."&gt;recursive partitioning&lt;/a&gt;. Then everything fits in memory for the join.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Split outer relation into partitions based on the hash key.&amp;quot;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo on Hash Join algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashing is almost always better than sorting for operator execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;No join algorithm works well in all scenarios.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Andy Pavlo&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="coding, data, Databases, programming"></category><category term="algorithms"></category><category term="computer science"></category><category term="joins"></category><category term="learning"></category><category term="study"></category><category term="technology"></category></entry></feed>