<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python Marketer</title><link href="https://pythonmarketer.com/" rel="alternate"></link><link href="https://pythonmarketer.com/feeds/all.atom.xml" rel="self"></link><id>https://pythonmarketer.com/</id><updated>2023-02-25T16:21:00-06:00</updated><entry><title>40 Open Source Libraries and Tools for the Modern Developer</title><link href="https://pythonmarketer.com/40-open-source-libraries-and-tools-for-the-modern-developer.html" rel="alternate"></link><published>2023-02-25T16:21:00-06:00</published><updated>2023-02-25T16:21:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2023-02-25:/40-open-source-libraries-and-tools-for-the-modern-developer.html</id><summary type="html">&lt;p&gt;I usually find a lot of these tools from viewing GitHub's &lt;a class="reference external" href="https://github.com/trending"&gt;trending repositories&lt;/a&gt;. When I find a novel repo, I'll &lt;a class="reference external" href="https://github.com/erickbytes?tab=stars"&gt;star&lt;/a&gt; it to remember for later. This is a list of free, open source software spanning security, AI, cloud, HTTP, JSON, monitoring, dev ops and more.&lt;/p&gt;
&lt;p&gt;I enjoy finding and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I usually find a lot of these tools from viewing GitHub's &lt;a class="reference external" href="https://github.com/trending"&gt;trending repositories&lt;/a&gt;. When I find a novel repo, I'll &lt;a class="reference external" href="https://github.com/erickbytes?tab=stars"&gt;star&lt;/a&gt; it to remember for later. This is a list of free, open source software spanning security, AI, cloud, HTTP, JSON, monitoring, dev ops and more.&lt;/p&gt;
&lt;p&gt;I enjoy finding and cataloging new packages as much as using them sometimes. Some of these I'll never use. By filing them away, I can recall in it the future if I am faced with a problem that they can solve. Enjoy!&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/NVIDIA/NeMo"&gt;NeMo&lt;/a&gt;: a LLM (large language model) toolkit for conversational AI from Nvidia&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/microsoft/LMOps"&gt;LMOps&lt;/a&gt;: general technology for enabling LLMs from Microsoft&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/prometheus/prometheus"&gt;Prometheus&lt;/a&gt;: open source monitoring tool, built on top of Go&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aws/aws-cli"&gt;aws-cli&lt;/a&gt;: universal command line AWS interface&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://httptoolkit.com/"&gt;httptoolkit&lt;/a&gt;: &amp;quot;HTTP Toolkit is a beautiful &amp;amp; open-source tool for debugging, testing and building with HTTP(S) on Windows, Linux &amp;amp; Mac&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/curl/curl"&gt;curl&lt;/a&gt;: ubiquitous command line tool for transferring data with URL syntax&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lwthiker/curl-impersonate"&gt;curl-impersonate&lt;/a&gt;: a special build of curl that can impersonate Chrome and Firefox browsers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;: touted JSON command line tool&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kellyjonbrazil/jc"&gt;jc&lt;/a&gt;: CLI tool and Python library that converts out of popular command line tools to other formats&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/jsonview/gmegofmjomhknnokphhckolhcffdaihd"&gt;JSONView&lt;/a&gt;: a Chrome web extension that applys XML-style code formatting to JSON in your browser, written in Typescript&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/buffer/thug"&gt;thug&lt;/a&gt;: a Python based &amp;quot;honey client&amp;quot;, used to mimic user behavior in a web browser in order to detect and emulate malicious content&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://opentelemetry.io/docs/concepts/what-is-opentelemetry/"&gt;OpenTelemetry&lt;/a&gt;: open source tracing and monitoring app&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nocodb/nocodb"&gt;nocodb&lt;/a&gt;: an open source airtable alternative&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pwnesia/dnstake"&gt;dnstake&lt;/a&gt;: a fast tool to check for &lt;a class="reference external" href="https://www.cloudflare.com/learning/dns/what-is-dns/"&gt;DNS&lt;/a&gt; vulnerabilities&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/schollz/croc"&gt;croc&lt;/a&gt;: easily and securely send things from one computer to another&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jarun/buku"&gt;buku&lt;/a&gt;: inter-browser bookmark transfer tool&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/backstage/backstage"&gt;backstage&lt;/a&gt;: an open platform for building developer portals, written in Typescript&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getsentry/sentry"&gt;sentry&lt;/a&gt;: a &amp;quot;developer first&amp;quot; error tracking and performance monitoring platform&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/runsidekick/sidekick"&gt;sidekick&lt;/a&gt;: free and open source live action debugging platform, like chrome dev tools for your backend&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/prowler-cloud/prowler"&gt;Prowler&lt;/a&gt;: an open source security tool to perform cloud best practices&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.earthly.dev/basics/part-1-a-simple-earthfile"&gt;Earthly&lt;/a&gt;: create a CI/CD continuous developer system&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/metabase/metabase"&gt;metabase&lt;/a&gt;: the easy, open source way for everyone in your company to ask questions and learn from data&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/zulip/zulip"&gt;Zulip&lt;/a&gt;: open source team chat&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/laurent22/joplin"&gt;Joplin&lt;/a&gt;: an open source note taking and to do list application&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/visual-layer/fastdup"&gt;fastup&lt;/a&gt;: a tool for gaining insights from large image collections and detecting anomalies&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/upptime/upptime"&gt;Upptime&lt;/a&gt;: an open source uptime monitor and status page connected to Github&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/danielgatis/rembg"&gt;Rembg&lt;/a&gt;: tool to remove the background from images&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/erickbytes?after=Y3Vyc29yOnYyOpK5MjAyMi0wNy0wNFQyMTowNzozMy0wNTowMM4UjkSj&amp;amp;tab=stars"&gt;dyna-cli&lt;/a&gt;: convert Python functions to Linux shell commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/penpot/penpot"&gt;Penpot&lt;/a&gt;: the open source design &amp;amp; prototyping platform&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/levkk/pgcat"&gt;pgcat&lt;/a&gt;: postgresQL pooler with sharding, load balancing and fail over support&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/spotify/pedalboard"&gt;pedalboard&lt;/a&gt;: a Python library for working with audio from Spotify&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/open-rpa/openrpa"&gt;OpenRPA&lt;/a&gt;: free open source enterprise grade robot process automation software. See also: &lt;a class="reference external" href="https://pythonmarketer.com/2021/08/15/how-to-open-firefox-with-webbrowser-on-ubuntu-linux/"&gt;more free RPA tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rednafi/hook-slinger"&gt;hook-slinger&lt;/a&gt;: manage webhooks with Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ozmartian/vidcutter"&gt;vidcutter&lt;/a&gt;: a modern video editing tool&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/s0md3v/XSStrike"&gt;XSSstrike&lt;/a&gt;: most advanced Cross Site Scripting detector&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wifiphisher/wifiphisher"&gt;wifiPhisher&lt;/a&gt;: wifi security testing tool with Python extensions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt;: an &amp;quot;any infrastructure&amp;quot; automation tool built on Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/locustio/locust"&gt;Locust&lt;/a&gt;: a scalable load testing Python library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt;: simple, Pythonic remote execution and deployment via ssh&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ShareX/ShareX"&gt;ShareX&lt;/a&gt;: free and open source program that lets you capture and record your screen, written in C#&lt;/li&gt;
&lt;/ol&gt;
</content><category term="apps, coding, command prompt, data, HTTP, json, productivity, programming, python, software"></category><category term="free software"></category><category term="free tools for developers"></category><category term="open source tools"></category><category term="opens source software"></category></entry><entry><title>App Review: Why You Should Use Pocket to Save Your Reads</title><link href="https://pythonmarketer.com/app-review-why-you-should-use-pocket-to-save-your-reads.html" rel="alternate"></link><published>2023-02-20T12:38:00-06:00</published><updated>2023-02-20T12:38:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2023-02-20:/app-review-why-you-should-use-pocket-to-save-your-reads.html</id><summary type="html">&lt;p&gt;I'm really enjoying using &lt;a class="reference external" href="https://help.getpocket.com/"&gt;Pocket&lt;/a&gt; as my primary reading app on my cell phone. My top need is to download articles I find on the internet for offline viewing. This app does that and more in a smooth interface. This review reflects the perspective of using the &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro"&gt;Pocket Android version …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm really enjoying using &lt;a class="reference external" href="https://help.getpocket.com/"&gt;Pocket&lt;/a&gt; as my primary reading app on my cell phone. My top need is to download articles I find on the internet for offline viewing. This app does that and more in a smooth interface. This review reflects the perspective of using the &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro"&gt;Pocket Android version&lt;/a&gt; 8.1.1.0, pictured here:&lt;/p&gt;
&lt;div class="wp-image-7409 figure"&gt;
&lt;img alt="dark theme with saved articles" src="https://pythonmarketer.files.wordpress.com/2023/02/screenshot_20230220-104934.png?w=446" /&gt;
&lt;p class="caption"&gt;dark theme with saved articles&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Key Features and Benefits&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;download articles &amp;amp; blogs to read offline&lt;/li&gt;
&lt;li&gt;quickly share a webpage to the Pocket app in 2 taps from your browser&lt;/li&gt;
&lt;li&gt;dark or light themes available&lt;/li&gt;
&lt;li&gt;free app, downloadable on your &lt;a class="reference external" href="https://help.getpocket.com/category/845-category"&gt;Android&lt;/a&gt; or &lt;a class="reference external" href="https://help.getpocket.com/category/842-category"&gt;iOS&lt;/a&gt; device&lt;/li&gt;
&lt;li&gt;converts and stores articles as podcast style listenable audio&lt;/li&gt;
&lt;li&gt;ability to archive or delete old articles&lt;/li&gt;
&lt;li&gt;includes tags to categorize your reads&lt;/li&gt;
&lt;li&gt;filter by length of the read, &amp;quot;short reads&amp;quot; or &amp;quot;long reads&amp;quot; and read or unread&lt;/li&gt;
&lt;li&gt;the length of the article is displayed in minutes it takes to read it&lt;/li&gt;
&lt;li&gt;chooses the best format to present the website, as &amp;quot;article view&amp;quot; or &amp;quot;web view&amp;quot;&lt;/li&gt;
&lt;li&gt;auto-bookmarking, aka you can close out of an article and it will remember where you were the next time you open it&lt;/li&gt;
&lt;li&gt;discover new stuff to read within the Pocket app&lt;/li&gt;
&lt;li&gt;highlight key points in a text to remember and save for later&lt;/li&gt;
&lt;li&gt;For developers, there is a &lt;a class="reference external" href="https://getpocket.com/developer/docs/overview"&gt;Pocket API&lt;/a&gt;. &lt;a class="reference external" href="https://help.getpocket.com/category/858-category"&gt;Apps and integrations&lt;/a&gt; are available for other products like Zapier, Evernote, Amazon Alexa and Slack.&lt;/li&gt;
&lt;li&gt;created by Mozilla, a privacy friendly company that also created the Firefox web browser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-7407 figure"&gt;
&lt;img alt="saving is quick and easy" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image-864396039-1676910572447.png?w=958" /&gt;
&lt;p class="caption"&gt;saving is quick and easy&lt;/p&gt;
&lt;/div&gt;
&lt;div class="wp-image-7408 figure"&gt;
&lt;img alt="filter saved articles by length" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image-977770758-1676912977434.png?w=530" /&gt;
&lt;p class="caption"&gt;filter saved articles by length&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Pocket app is an overall great product and I felt compelled to endorse it here for the satisfaction it has brought me a in a short amount of time. It has increased my reading throughput. It's perfect for when you find yourself without an internet connection, in sparsely populated areas, on an airplane or while traveling in foreign countries.&lt;/p&gt;
&lt;p&gt;I recommend this app to anyone who compulsively reads blogs and articles. It will help you keep up with the neverending stream of text also known as the internet. Might I suggest saving a few posts from this blog also?&lt;/p&gt;
</content><category term="apps, internet, productivity"></category><category term="Pocket app review"></category><category term="Pocket reading app benefits"></category><category term="reading articles online"></category></entry><entry><title>Getting People to Use Software is Hard</title><link href="https://pythonmarketer.com/getting-people-to-use-software-is-hard.html" rel="alternate"></link><published>2023-02-15T22:23:00-06:00</published><updated>2023-02-15T22:23:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2023-02-15:/getting-people-to-use-software-is-hard.html</id><summary type="html">&lt;p&gt;You're sure you've created a stellar solution to a problem at hand. You took the time to think an idea out and execute. You iterated tirelessly, making tweaks and creating a tool that will sell itself to potential human users. Everyone loves their own creation. Others will realize the tool's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You're sure you've created a stellar solution to a problem at hand. You took the time to think an idea out and execute. You iterated tirelessly, making tweaks and creating a tool that will sell itself to potential human users. Everyone loves their own creation. Others will realize the tool's value too!&lt;/p&gt;
&lt;p&gt;There's only one problem. People's default setting is to not want to use your software. Whether it's low code, no code, Excel, PHP or Python driven, people are resistant to software. They don't want to use it unless it's so obvious and easy that the value is immediately visible.&lt;/p&gt;
&lt;div class="wp-image-7404 figure"&gt;
&lt;img alt="`Image Source &amp;lt;https://community.spiceworks.com/topic/2181519-what-s-the-deal-with-open-source-software&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2023/02/open_source.png?w=331" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://community.spiceworks.com/topic/2181519-what-s-the-deal-with-open-source-software"&gt;Image Source&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Getting humans to put in the time and effort to learn how to use your tools is really tough. It has to be excellent. The bar is high. You have to understand your users' needs and perceptions intimately. And even then, you'll probably still fail. Regardless, we keep trying because we are obsessed with solving a problem or simply paid to keep trying to solve the problem.&lt;/p&gt;
&lt;p&gt;Building a solution is easy. Automating a task to maintain application state is also sometimes. In my experience, making something that other humans will actually trust and use is not. Keep trying. /rant&lt;/p&gt;
</content><category term="APIs, apps, coding, product development, programming, software, Uncategorized"></category><category term="building apps"></category><category term="making software"></category><category term="solving problems"></category></entry><entry><title>6 of the Hottest Python Libraries in 2023</title><link href="https://pythonmarketer.com/6-of-the-hottest-python-libraries-in-2023.html" rel="alternate"></link><published>2023-01-22T14:56:00-06:00</published><updated>2023-01-22T14:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2023-01-22:/6-of-the-hottest-python-libraries-in-2023.html</id><summary type="html">&lt;p&gt;Here's a short list of Python packages making a splash this year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyscript.net/"&gt;pyscript&lt;/a&gt;: execute Python code in your web browser&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/charliermarsh/ruff"&gt;ruff&lt;/a&gt;: code linting package built with Rust and Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;: a rapidly adopted web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pola.rs/"&gt;polars&lt;/a&gt;: high performance pandas drop in replacement, also built with Rust and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here's a short list of Python packages making a splash this year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyscript.net/"&gt;pyscript&lt;/a&gt;: execute Python code in your web browser&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/charliermarsh/ruff"&gt;ruff&lt;/a&gt;: code linting package built with Rust and Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;: a rapidly adopted web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pola.rs/"&gt;polars&lt;/a&gt;: high performance pandas drop in replacement, also built with Rust and Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/chidiwilliams/buzz"&gt;buzz&lt;/a&gt;: Python package that accesses the Whisper API's text transcription of audio&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/tomllib.html"&gt;tomllib&lt;/a&gt;: new in the Python 3.11 standard library. It's quietly picking up steam amongst Python developers. Tom's Obvious Minimal Language, TOML, &amp;quot;&lt;a class="reference external" href="https://toml.io/en/"&gt;a config file format for humans&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-7389 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2023/01/wp-1674420268721.png?w=780" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python + Rust = High Performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A common theme I've noticed is the emergence of Rust as a performance complement to Python code. It seems we can expect modularity between the two languages to strengthen their collective abilities.&lt;/p&gt;
&lt;div class="wp-image-7391 figure"&gt;
&lt;img alt="example polars dataframe code" src="https://pythonmarketer.files.wordpress.com/2023/01/wp-1674420570685.png?w=1020" /&gt;
&lt;p class="caption"&gt;example polars dataframe code&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python is still growing and evolving&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It's great to see. Including the ability to parse TOML config files in the standard library is a vote of confidence by the Python community. I will now seek to use TOML in my own projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web frameworks and web browsers are king.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FastAPI is the new option in a space dominated by Flask and Django. Web frameworks allow developers to quickly create websites.&lt;/p&gt;
&lt;p&gt;Running Python in a browser has been a movement in recent years. First Pyodide, WASM euphoria, and now a Python library that takes Python in a browser to new levels. Excited to see where these projects go and what new buzzy libraries will emerge this year!&lt;/p&gt;
&lt;div class="wp-image-7386 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2023/01/wp-1674420015498.png?w=967" /&gt;
&lt;/div&gt;
</content><category term="APIs, coding, pandas, programming, python, Rust"></category><category term="advanced python modules"></category><category term="popular Python packages"></category><category term="Python Libraries in 2023"></category><category term="useful python libraries"></category><category term="web frameworks."></category></entry><entry><title>Beyond the Standard Library, An External Python Modules Starter Pack</title><link href="https://pythonmarketer.com/30-external-python-libraries-starter-pack.html" rel="alternate"></link><published>2022-09-07T23:46:00-05:00</published><updated>2022-09-07T23:46:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-09-07:/30-external-python-libraries-starter-pack.html</id><summary type="html">&lt;p&gt;Here is a list of external Python modules you can install with &lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. These are not included with your Python version and need to be installed separately. In some cases, other options may be suitable. To keep the list shorter, I picked libraries that were chosen based on having at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a list of external Python modules you can install with &lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. These are not included with your Python version and need to be installed separately. In some cases, other options may be suitable. To keep the list shorter, I picked libraries that were chosen based on having at least one of these qualities:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most obvious library for its category&lt;/li&gt;
&lt;li&gt;a library I have experience using effectively&lt;/li&gt;
&lt;li&gt;provide a niche, useful functionality or tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In alphabetical order:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-block-columns docutils container"&gt;
&lt;/p&gt;&lt;div class="wp-block-column docutils container"&gt;
&lt;/p&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;: code formatting&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/chardet/"&gt;chardet&lt;/a&gt;: detect file encoding (useful for reading CSVs)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/diagrams/"&gt;diagrams&lt;/a&gt;: make cloud architecture diagrams&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/Django/"&gt;Django&lt;/a&gt;: web framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/#installation"&gt;fastapi&lt;/a&gt;: web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/ffn/"&gt;ffn&lt;/a&gt;: financial function library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/Flask/"&gt;Flask:&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pygame/"&gt;ftfy&lt;/a&gt;: fix mojibake in text&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/fuzzywuzzy/"&gt;fuzzywuzzy&lt;/a&gt;: fuzzy matching library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/matplotlib/"&gt;matplotlib&lt;/a&gt;: data visualization&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/numpy/"&gt;numpy&lt;/a&gt;: array operations&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/openpyxl/"&gt;openpyxl&lt;/a&gt;: foundational Excel library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pandas/"&gt;pandas&lt;/a&gt;: working with tabular data&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pelican/"&gt;pelican&lt;/a&gt;: static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/INSTALL.rst"&gt;psutil&lt;/a&gt;: process and system utilities&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pygame/"&gt;pygame&lt;/a&gt;: video game creation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pyodbc/"&gt;pyodbc&lt;/a&gt;: Open Database Connection client&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;: sampling profiler to visualize your program&lt;/li&gt;
&lt;li&gt;pyheat: visualize code bottlenecks&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest/"&gt;pytest&lt;/a&gt;: testing framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytrends/"&gt;pytrends&lt;/a&gt;: research trends in the Google Trends API&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytube3/"&gt;pytube3&lt;/a&gt;: YouTube video downloading library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pywin32/"&gt;pywin32&lt;/a&gt;: Python for Win32 Extensions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt;: HTTP requests&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/scikit-learn/"&gt;scikit-learn&lt;/a&gt;: machine learning&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/soltrack/"&gt;soltrack&lt;/a&gt;: calculate the location of the sun&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/sqlfluff/"&gt;sqlfluff&lt;/a&gt;: SQL linter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/streamlit/streamlit"&gt;streamlit&lt;/a&gt;: build data apps&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/tqdm/"&gt;tqdm&lt;/a&gt;: add a progress bar to loops&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wxpython.org/pages/downloads/index.html"&gt;wxPython&lt;/a&gt;: Graphical User Interface&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/xlrd/"&gt;xlrd&lt;/a&gt;: supplementary Excel library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/xmltodict/"&gt;xmltodict&lt;/a&gt;: convert XML to nested Python dicts&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;Python Documentation: Installing Python Modules&lt;/a&gt;&lt;/p&gt;
&lt;div class="wp-image-7164 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/09/image.png?w=672" /&gt;
&lt;/div&gt;
</content><category term="programming, python"></category><category term="advanced python modules"></category><category term="coding"></category><category term="useful python libraries"></category></entry><entry><title>Launching a Live Static Site Blog via Pelican, Github and Cloudflare Pages</title><link href="https://pythonmarketer.com/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages.html" rel="alternate"></link><published>2022-07-08T01:20:00-05:00</published><updated>2022-07-08T01:20:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-07-08:/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages.html</id><summary type="html">&lt;p&gt;Proud to announce my newest side project blog, Diversified Bullish, is live at &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;. It is made with &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html#"&gt;Pelican&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin/tree/311a5208c030ea62d85bbca952e31b6775a50c2c"&gt;Blue Penguin theme&lt;/a&gt;. I'm planning to write about stocks and investing there moving forward in addition to this blog which focuses on Python programming.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/erickbytes/divbull/tree/main/divbull.com"&gt;divbull.com Github …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Proud to announce my newest side project blog, Diversified Bullish, is live at &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;. It is made with &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html#"&gt;Pelican&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin/tree/311a5208c030ea62d85bbca952e31b6775a50c2c"&gt;Blue Penguin theme&lt;/a&gt;. I'm planning to write about stocks and investing there moving forward in addition to this blog which focuses on Python programming.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/erickbytes/divbull/tree/main/divbull.com"&gt;divbull.com Github repo&lt;/a&gt; serves the static files generated by Pelican via &lt;a class="reference external" href="https://pages.cloudflare.com/"&gt;Cloudflare pages&lt;/a&gt;. It's free, unless you purchase a domain. I purchased my .com domain with &lt;a class="reference external" href="https://www.namecheap.com/support/knowledgebase/article.aspx/9607/2210/how-to-set-up-dns-records-for-your-domain-in-cloudflare-account/"&gt;Namecheap&lt;/a&gt; before I learned about Cloudflare pages. I followed &lt;a class="reference external" href="https://developers.cloudflare.com/pages/get-started/"&gt;these instructions&lt;/a&gt; to set up my new financial blog. If you're interested, you can subscribe to an &lt;a class="reference external" href="https://divbull.com/feeds/all.atom.xml"&gt;RSS feed here&lt;/a&gt; to follow when I post something new.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The dashboard provides a number of framework-specific presets. These presets provide the default build command and build output directory values for the selected framework. If you are unsure what the correct values are for this section, refer to &lt;a class="reference external" href="https://developers.cloudflare.com/pages/platform/build-configuration/"&gt;Build configuration&lt;/a&gt;. &lt;strong&gt;If you do not need a build step, leave the Build command field blank.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/pages/get-started/"&gt;https://developers.cloudflare.com/pages/get-started/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="wp-image-7113 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/07/cloudflare-deployment-details-1.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;Working in the Cloudflare pages build dashboard is sweet. It took me about 5 failed Pelican &lt;a class="reference external" href="https://developers.cloudflare.com/pages/platform/build-configuration/"&gt;build commands&lt;/a&gt; to get the site to deploy. Finally, I was able to get the site build to complete by leaving the build command blank. Cloudflare was able to scoop up my Pelican &amp;quot;output&amp;quot; folder contents and render the blog. How cool. I feel like I've done the impossible, launching a passable quality blog with top shelf tools this quickly for under $10!&lt;/p&gt;
&lt;p&gt;Initially, I spent a few hours getting to know Pelican. Once I correctly installed a theme I liked, I banged out a few philosophical financial musings to give the blog some posts. Then I had the static files generated but no clue how to serve them. Enter Cloudflare pages, a free option to host a blog.&lt;/p&gt;
&lt;p&gt;Connecting the repo to Cloudflare pages, adding the files to the repo and finding the correct build command added a few more hours. In total, it took me about 1-2 days to make a live site since I did not know about Pelican or Cloudflare pages when I began playing with a Pelican blog in April. This was my first static site launch!&lt;/p&gt;
&lt;div class="wp-image-7115 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/07/cloudflare-build-settings.png?w=528" /&gt;
&lt;p class="caption"&gt;Generating a Blue Penguin themed Pelican blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="wp-image-7086 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/07/pelican-blog-dev.png?w=1024" /&gt;
&lt;p class="caption"&gt;Head over to &lt;a class="reference external" href="https://divbull.com"&gt;divbull.com&lt;/a&gt; to see this Pelican, Github and Cloudflare pages stack in action.&lt;/p&gt;
&lt;div class="legend"&gt;
Like static site generators? Check out &lt;a class="reference external" href="https://pythonmarketer.com/2021/07/28/a-brief-summary-of-promising-python-static-site-generators/"&gt;this post about static site generator libraries in Python&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
</content><category term="internet, investing, personal finance, programming, writing"></category><category term="blog"></category><category term="cloudflare pages"></category><category term="pelican"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>The Things They Don't Tell You About Ampersands and XML</title><link href="https://pythonmarketer.com/the-things-they-dont-tell-you-about-ampersands-and-xml.html" rel="alternate"></link><published>2022-07-06T12:49:00-05:00</published><updated>2022-07-06T12:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-07-06:/the-things-they-dont-tell-you-about-ampersands-and-xml.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script that works at first. Hallelujah!&lt;/p&gt;
&lt;p&gt;Later on, I realize it doesn't work as well as I believed. It turns out, if I want a server to accept my XML document, &lt;a class="reference external" href="https://www.ibm.com/docs/en/was-liberty/base?topic=manually-xml-escape-characters"&gt;escaping certain characters&lt;/a&gt; might be required. The documentation didn't mention this. It was my first time using XML, how would I know?&lt;/p&gt;
&lt;p&gt;I noticed a script only worked for a handful of requests. It failed for most, returning a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"&gt;400 status code&lt;/a&gt;. Suspecting the issue was likely in my payload, I studied the data of the request bodies that failed compared to the others that succeeded. All of the payload bodies that failed contained text with an ampersand.&lt;/p&gt;
&lt;p&gt;Suspecting it might be an XML + ampersand related issue, I google &lt;a class="reference external" href="https://stackoverflow.com/questions/1328538/how-do-i-escape-ampersands-in-xml-so-they-are-rendered-as-entities-in-html"&gt;this Stack Overflow post&lt;/a&gt; which explains the ampersand escaping situation. There are a handful of characters that must be escaped. Otherwise, you might not be able to connect to the server.&lt;/p&gt;
&lt;p&gt;These are the things they often don't tell you. Those little details you must sometimes realize for yourself, unless someone bothers to mention it or write it down. Now you know something that cost me an hour or two of tinkering to realize!&lt;/p&gt;
&lt;div class="wp-image-7060 figure"&gt;
&lt;img alt="`Image Source &amp;lt;https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2022/07/xml-example-2.png?w=453" style="width: 453px; height: 521px;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml"&gt;Image Source&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wanna read more on HTTP? Check out my guide on &lt;a class="reference external" href="https://pythonmarketer.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;making HTTP requests with Python&lt;/a&gt; to read more about HTTP requests.&lt;/p&gt;
</content><category term="APIs, coding, Google, programming"></category><category term="data"></category><category term="learning"></category><category term="problem solving"></category><category term="XML"></category></entry><entry><title>Hammock-Driven Development Notes</title><link href="https://pythonmarketer.com/hammock-driven-development-talk-notes.html" rel="alternate"></link><published>2022-06-24T11:39:00-05:00</published><updated>2022-06-24T11:39:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-06-24:/hammock-driven-development-talk-notes.html</id><summary type="html">&lt;p&gt;Occasionally you will find a video or talk that connects or resonates with you in a great way. Rich Hickey's &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;&amp;quot;Hammock Driven Development&amp;quot;&lt;/a&gt;, a self-described &amp;quot;rant&amp;quot; is packed with wisdom. I keep coming back to re-watch and today, I have written down some key points from this amazing rant!&lt;/p&gt;
&lt;div class="section" id="key-ideas"&gt;
&lt;h2&gt;Key …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Occasionally you will find a video or talk that connects or resonates with you in a great way. Rich Hickey's &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;&amp;quot;Hammock Driven Development&amp;quot;&lt;/a&gt;, a self-described &amp;quot;rant&amp;quot; is packed with wisdom. I keep coming back to re-watch and today, I have written down some key points from this amazing rant!&lt;/p&gt;
&lt;div class="section" id="key-ideas"&gt;
&lt;h2&gt;Key Ideas&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Take more time to think through your problem.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When was the last time you...&lt;/p&gt;
&lt;p&gt;thought about some for a whole day?&lt;/p&gt;
&lt;p&gt;thought about something for a whole month or year?&lt;/p&gt;
&lt;p&gt;Hammock Driven Development, &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;https://www.youtube.com/watch?v=f84n5oFoZBc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;On Bugs&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bugs are cheaper to fix in development.&lt;/li&gt;
&lt;li&gt;Least expensive to avoid in design&lt;/li&gt;
&lt;li&gt;Most expensive in to fix in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis &amp;amp; Design, Simplified&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identify problem trying to solve.&lt;/li&gt;
&lt;li&gt;Assess whether it solves that problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Problem Solving&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-image-7029 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/06/solve-problems-1.png?w=730" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Problem Solving (cont.)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State the problem out loud.&lt;/li&gt;
&lt;li&gt;Understand the problem's facts, context and constraints.&lt;/li&gt;
&lt;li&gt;What don't you know?&lt;/li&gt;
&lt;li&gt;Find problems in your solution.&lt;/li&gt;
&lt;li&gt;Write it all down.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;More Input, Better Output&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read in and around your space.&lt;/li&gt;
&lt;li&gt;Look critically at other solutions.&lt;/li&gt;
&lt;li&gt;You can't connect things you don't know about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Focus&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On the hammock, no one knows if you're sleeping and they don't bother you because of this.&lt;/li&gt;
&lt;li&gt;Computers are distracting.&lt;/li&gt;
&lt;li&gt;Let loved ones know you are going to be &amp;quot;gone&amp;quot;, focusing deeply for some time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Waking Mind vs Background Mind&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The waking mind is good at critical thinking.&lt;/li&gt;
&lt;li&gt;Use waking time to assign tasks to background mind.&lt;/li&gt;
&lt;li&gt;The background mind is good at making connections and good at strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sleep According to Scientific American:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The brain processes info learned while sleeping.&lt;/li&gt;
&lt;li&gt;Sleep makes memories stonger and weeds out irrelevant details.&lt;/li&gt;
&lt;li&gt;Our brain finds hidden relations among memories to solve waking problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Closing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write the proposed solution down. Hammock time is important &amp;quot;mind's eye time&amp;quot;. We switch from &amp;quot;input mode&amp;quot; to &amp;quot;recall mode&amp;quot; during hammock time. Wait overnight, or sometimes months, to think about your problem, sleep sober for best results! Eventually coding is required, and your feedback loop is important, but &amp;quot;don't lean on it too much&amp;quot;. You will be wrong, facts and requirements will change. Mistakes happen. That's fine, do not be afraid of being wrong. /rant&lt;/p&gt;
&lt;p&gt;The notes in this blog post are paraphrased from &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;this rant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, talks"></category><category term="learning"></category><category term="problem solving"></category><category term="software"></category></entry><entry><title>A Quick Windows Command Line Tab Key Shortcut</title><link href="https://pythonmarketer.com/a-quick-windows-command-line-tab-key-shortcut.html" rel="alternate"></link><published>2022-06-11T12:58:00-05:00</published><updated>2022-06-11T12:58:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-06-11:/a-quick-windows-command-line-tab-key-shortcut.html</id><summary type="html">&lt;p&gt;You might know you can use the tab key to view the files in a folder one at a time on the command line. However, I recently stumbled into another way to help navigate folders with a lot of files in the command line. Let's say you're looking for a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You might know you can use the tab key to view the files in a folder one at a time on the command line. However, I recently stumbled into another way to help navigate folders with a lot of files in the command line. Let's say you're looking for a file named &amp;quot;stuff.txt&amp;quot;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type &amp;quot;s&amp;quot;.&lt;/li&gt;
&lt;li&gt;Hit the tab key.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You just jumped right to the files that start with &amp;quot;s&amp;quot;. If there are not many files, you might go straight to &amp;quot;stuff.txt&amp;quot;. The point is that you can jump straight to the letter of your file rather than scrolling through a mountain of files by hitting the tab key 50 times. Once you get to the relative place in the alphabet of your target file, you can scroll forward in the file list with the &lt;strong&gt;tab key&lt;/strong&gt; or move backward by pressing &lt;strong&gt;shift + tab&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Multi-Letter Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Type &amp;quot;st&amp;quot; + tab to target more precise multi-letter sequences.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I felt a productive zen when I accidentally realized this little command line quirk can save a lot of time. Especially when you have a folder with 50 or hundreds of files. Of course, you can always type in the file name directly. Using the tab key is very handy to browse if you don't know the exact file name. This is a nice little trick to add to your bag of Windows command line skills!&lt;/p&gt;
&lt;div class="wp-image-7002 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/06/commandprompt.webp?w=1024" /&gt;
&lt;/div&gt;
</content><category term="coding, command prompt, productivity, Windows"></category><category term="command line"></category><category term="file system"></category><category term="shortcuts"></category></entry><entry><title>An Ode to Code</title><link href="https://pythonmarketer.com/an-ode-to-code.html" rel="alternate"></link><published>2022-05-09T21:13:00-05:00</published><updated>2022-05-09T21:13:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-05-09:/an-ode-to-code.html</id><summary type="html">&lt;p&gt;Making time to code can be done every day. Carve out those little moments where you can automate tedious tasks or study up on that &lt;a class="reference external" href="https://github.com/tqdm/tqdm"&gt;hot new Python library&lt;/a&gt; that takes your quality to another level.&lt;/p&gt;
&lt;p&gt;Take time to reorganize and refactor in &lt;a class="reference external" href="https://atom.io/"&gt;your favorite text editor&lt;/a&gt;. Break your script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Making time to code can be done every day. Carve out those little moments where you can automate tedious tasks or study up on that &lt;a class="reference external" href="https://github.com/tqdm/tqdm"&gt;hot new Python library&lt;/a&gt; that takes your quality to another level.&lt;/p&gt;
&lt;p&gt;Take time to reorganize and refactor in &lt;a class="reference external" href="https://atom.io/"&gt;your favorite text editor&lt;/a&gt;. Break your script, then break it again. Break it until it works. Absorb your new abilities as a machine literate human and build skills on top of skills. Make a breakthrough. The code is great. It makes sense. Another tweak here, another tweak there. Run &lt;a class="reference external" href="https://github.com/psf/black"&gt;black&lt;/a&gt; on it and then have a go at &lt;a class="reference external" href="https://peps.python.org/pep-0008/"&gt;PEP-8&lt;/a&gt; to brush up on your style. More tweaks, and need to add some &lt;a class="reference external" href="https://peps.python.org/pep-0257/"&gt;docstrings&lt;/a&gt; for more clarity.&lt;/p&gt;
&lt;p&gt;Another one bites the dust. Who knows where your skills could grow. Following the code is a delightful road. Some days it's hard. Some days it's easy. But it's fulfilling if you treat it like a locksmith does keys. Knowledge is flowing. The craft is built in each moment. Challenges overcome. Battles won. New innovations to munge.&lt;/p&gt;
&lt;p&gt;Code is the medium to communicate with machines and leverage their efficiency for convenient means. Tighter the web we weave with transistors and screens, the more we'll need dignified intermediaries of man and machine. Here's to the good code and the bad code we all will write. May we never let something stop our logical flights to code a better dream.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="growth"></category><category term="python"></category></entry><entry><title>Carleen Moore - 2022-04-28 21:55:39</title><link href="https://pythonmarketer.com/75b5745b84fcf2daa02e9b32681d35dd.html" rel="alternate"></link><published>2022-04-28T21:55:00-05:00</published><updated>2022-04-28T21:55:00-05:00</updated><author><name>@erickbytes</name></author><id>tag:pythonmarketer.com,2022-04-28:/75b5745b84fcf2daa02e9b32681d35dd.html</id><summary type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Starting your own business can be tremendously rewarding, but as any entrepreneur knows, you must overcome a lot of fear and uncertainty in order to be successful.&lt;/p&gt;
&lt;p&gt;Is it possible for me to submit an article on your website that gives advice to prospective entrepreneurs on how to overcome …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Starting your own business can be tremendously rewarding, but as any entrepreneur knows, you must overcome a lot of fear and uncertainty in order to be successful.&lt;/p&gt;
&lt;p&gt;Is it possible for me to submit an article on your website that gives advice to prospective entrepreneurs on how to overcome the fear of beginning a new business?&lt;/p&gt;
&lt;p&gt;Please let me know if you like this topic for your website, and I'll get started writing.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Thank you very much!&lt;/div&gt;
&lt;div class="line"&gt;Carleen Moore&lt;/div&gt;
&lt;div class="line"&gt;Thebizbuzz.net&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:cmoore&amp;#64;thebizbuzz.net"&gt;cmoore&amp;#64;thebizbuzz.net&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR: Carleen Moore&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR EMAIL: &lt;a class="reference external" href="mailto:cmoore&amp;#64;thebizbuzz.net"&gt;cmoore&amp;#64;thebizbuzz.net&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR URL:&lt;/div&gt;
&lt;div class="line"&gt;SUBJECT: [PyMarketer] about&lt;/div&gt;
&lt;div class="line"&gt;IP: 87.249.134.130&lt;/div&gt;
&lt;div class="line"&gt;Array&lt;/div&gt;
&lt;div class="line"&gt;(&lt;/div&gt;
&lt;div class="line"&gt;[1_Name] =&amp;gt; Carleen Moore&lt;/div&gt;
&lt;div class="line"&gt;[2_Email] =&amp;gt; &lt;a class="reference external" href="mailto:cmoore&amp;#64;thebizbuzz.net"&gt;cmoore&amp;#64;thebizbuzz.net&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[3_Website] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[4_Comment] =&amp;gt; Hi,&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Starting your own business can be tremendously rewarding, but as any entrepreneur knows, you must overcome a lot of fear and uncertainty in order to be successful.&lt;/p&gt;
&lt;p&gt;Is it possible for me to submit an article on your website that gives advice to prospective entrepreneurs on how to overcome the fear of beginning a new business?&lt;/p&gt;
&lt;p&gt;Please let me know if you like this topic for your website, and I'll get started writing.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Thank you very much!&lt;/div&gt;
&lt;div class="line"&gt;Carleen Moore&lt;/div&gt;
&lt;div class="line"&gt;Thebizbuzz.net&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:cmoore&amp;#64;thebizbuzz.net"&gt;cmoore&amp;#64;thebizbuzz.net&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[email_marketing_consent] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[entry_title] =&amp;gt; about&lt;/div&gt;
&lt;div class="line"&gt;[entry_permalink] =&amp;gt; &lt;a class="reference external" href="https://pythonmarketer.com/contact/"&gt;https://pythonmarketer.com/contact/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[feedback_id] =&amp;gt; 75b5745b84fcf2daa02e9b32681d35dd&lt;/div&gt;
&lt;div class="line"&gt;)&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Documentation is the Gateway to Delegation</title><link href="https://pythonmarketer.com/documentation-is-the-gateway-to-delegation.html" rel="alternate"></link><published>2022-03-31T23:07:00-05:00</published><updated>2022-03-31T23:07:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-03-31:/documentation-is-the-gateway-to-delegation.html</id><summary type="html">&lt;p&gt;The first step to offloading a task is writing down how to complete it. Once the process is typed into a lean text file or wiki page, it can be learned by another human. This helps your team, but what's in it for you?&lt;/p&gt;
&lt;div class="wp-image-6962 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/03/image_editor_output_image-551860623-1648785644967.jpg?w=720" /&gt;
&lt;/div&gt;
&lt;p&gt;The most selfish programmers probably want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first step to offloading a task is writing down how to complete it. Once the process is typed into a lean text file or wiki page, it can be learned by another human. This helps your team, but what's in it for you?&lt;/p&gt;
&lt;div class="wp-image-6962 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/03/image_editor_output_image-551860623-1648785644967.jpg?w=720" /&gt;
&lt;/div&gt;
&lt;p&gt;The most selfish programmers probably want to free up their time to focus on more interesting work instead of repetitive processes and maintenance. Therefore, the most selfish programmers should love writing documentation. These types of tasks are somewhat unavoidable, so committing to writing documentation will help you push it over to your teammates.&lt;/p&gt;
&lt;p&gt;Write to free yourself of your laundry list of recurring tasks. It's the first step to someone else to be able to step in for you or to delegate to someone else completely. On the plus side, you'll be less reliant on your meaty human brain to remember how to do it. Be selfish, take time to write down how to do your work!&lt;/p&gt;
</content><category term="productivity, programming, writing"></category><category term="delegation"></category><category term="documentation"></category><category term="technical writing"></category></entry><entry><title>6 Must-read Python Enhancement Proposals (PEPs)</title><link href="https://pythonmarketer.com/six-must-read-python-enhancement-proposals.html" rel="alternate"></link><published>2022-02-23T17:15:00-06:00</published><updated>2022-02-23T17:15:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-02-23:/six-must-read-python-enhancement-proposals.html</id><summary type="html">&lt;p&gt;These are a few of my favorite PEPs, or Python Enhancements Proposals I've encountered recently. PEP 0, PEP 8 and PEP 20 are great reads for those aspiring to hone their Python skills. The &lt;a class="reference external" href="https://docs.python.org/3/"&gt;documentation&lt;/a&gt; sometimes references specific PEPs directly also. They document Python's evolution over time and the rationale …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These are a few of my favorite PEPs, or Python Enhancements Proposals I've encountered recently. PEP 0, PEP 8 and PEP 20 are great reads for those aspiring to hone their Python skills. The &lt;a class="reference external" href="https://docs.python.org/3/"&gt;documentation&lt;/a&gt; sometimes references specific PEPs directly also. They document Python's evolution over time and the rationale behind it. Here are some good ones to remember!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/"&gt;PEP 0&lt;/a&gt; -- Index of Python Enhancement Proposals&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; -- Style Guide for Python Code&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt; -- The Zen of Python&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/#paramstyle"&gt;PEP 249&lt;/a&gt; -- Python Database API Specification v2.0&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3131/"&gt;PEP 3131&lt;/a&gt; -- Supporting Non-ASCII Identifiers&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP 3333&lt;/a&gt; -- Python Web Server Gateway Interface v1.0.1&lt;/p&gt;
</content><category term="APIs, ODBC, programming, python"></category><category term="best PEPs Python"></category><category term="PEP 8"></category><category term="WSGI"></category></entry><entry><title>Experiencing Flow While Coding</title><link href="https://pythonmarketer.com/experiencing-flow-while-coding.html" rel="alternate"></link><published>2022-01-08T15:29:00-06:00</published><updated>2022-01-08T15:29:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2022-01-08:/experiencing-flow-while-coding.html</id><summary type="html">&lt;p&gt;Yesterday, I experienced a flow state where I became manically obsessed with perfecting a script I was working on. I think it's beautiful code, about 100 lines long without &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt;. It solves a real need and it felt great to write it. Some scripts feel terrible to write and you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, I experienced a flow state where I became manically obsessed with perfecting a script I was working on. I think it's beautiful code, about 100 lines long without &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt;. It solves a real need and it felt great to write it. Some scripts feel terrible to write and you know they're bad. However, this one felt like one of the best I've ever written.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;Flow&lt;/a&gt; seems like a mythical, unattainable state these days as portrayed in media, but we can all agree... we love it. When you're in flow, you know it and you feel a grace in improving your work. For coders, maybe it's by wrapping up a few lines here and there into functions. &lt;a class="reference external" href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;, reordering, handling loose ends or edge cases, writing docstrings with supporting documentation and clarifying that you really understand what's happening... these things are all mundane at times but critical to writing reliable code.&lt;/p&gt;
&lt;p&gt;While doing these typical tasks, you're attaining skill and mastery, one of the highest dopamine hits humans can register legally in all 50 states. You know how much better this iteration of code is than when you first learned to write software. You take bits and pieces from past projects and fit them all together into a cohesive, purposeful program. For example, I was tickled to use Python's &lt;a class="reference external" href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files"&gt;readlines() file reading function&lt;/a&gt; to get the last line of a text file. I learned about this function in my first ever free &lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;Python course on Coursera&lt;/a&gt;, 7 years ago. Thanks again Dr. Chuck!&lt;/p&gt;
&lt;p&gt;This time, I realized my flow when researching &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601 time format strings&lt;/a&gt; and guiding them into an HTTP request with the &lt;a class="reference external" href="https://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt;. A new solution emerged, regurgitated from a prior project and mashed up into a more refined form to satisfy the project's requirements. I combined old and new ideas into a better solution than I had ever thought, a fitting complement for the &lt;a class="reference external" href="https://pythonmarketer.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;API&lt;/a&gt; at hand. Time will tell if the solution will actually work as well as I hope.&lt;/p&gt;
&lt;p&gt;Flow is real. You can find work that puts you in a flow state, and it doesn't have to be super interesting work to get there. The learning process pays rewards in competency when exposure to different domains combine. Einstein knew a form of this as &lt;a class="reference external" href="https://evernote.com/blog/einsteins-unique-approach-to-thinking/#:~:text=He%20viewed%20taking%20music%20breaks,come%20up%20with%20new%20ideas."&gt;&amp;quot;combinatory play&amp;quot;&lt;/a&gt;. Repetition enhances this effect and solidifies your foundation. Flow makes it fun! Only rarely do I feel the highest level of engrossment in my work. I sensed I was flowing on this recent project. You can find these types of challenges too. Keep searching for your flow!&lt;/p&gt;
</content><category term="APIs, coding, HTTP, productivity, programming"></category><category term="flow state"></category><category term="python"></category><category term="skills"></category></entry><entry><title>Memory Monitoring Python Libraries + Tools</title><link href="https://pythonmarketer.com/tools-tips-to-beat-memoryerror-in-your-python-scripts.html" rel="alternate"></link><published>2021-12-19T11:57:00-06:00</published><updated>2021-12-19T11:57:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-12-19:/tools-tips-to-beat-memoryerror-in-your-python-scripts.html</id><summary type="html">&lt;p&gt;If you write Python code, there's probably been a time or two when you saw the dreaded &lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#MemoryError"&gt;&amp;quot;MemoryError&amp;quot;&lt;/a&gt;. This happens after one of your Python scripts stops because your computer has no spare &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; to execute it. I recently experienced this frustration whilst trying to write hundreds of thousands of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you write Python code, there's probably been a time or two when you saw the dreaded &lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#MemoryError"&gt;&amp;quot;MemoryError&amp;quot;&lt;/a&gt;. This happens after one of your Python scripts stops because your computer has no spare &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; to execute it. I recently experienced this frustration whilst trying to write hundreds of thousands of csv files. However, this time I grasped for tools that support smarter memory management. Now, I can watch my computer's memory bounce around with the Windows Resource Monitor. Python has quite a few memory profiling libraries for monitoring memory too!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Libraries and Guides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/c-api/memory.html"&gt;Memory Management Overview&lt;/a&gt;, Python documentation&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pythonprofilers/memory_profiler"&gt;Memory Profiler&lt;/a&gt;: &amp;quot;monitor memory usage of Python code&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt;: &amp;quot;Cross-platform lib for process and system monitoring in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;: &amp;quot;Sampling profiler for Python programs&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/joerick/pyinstrument"&gt;pyinstrument&lt;/a&gt;: &amp;quot;🚴 Call stack profiler for Python. Shows you why your code is slow!&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/plasma-umass/scalene"&gt;Scalene&lt;/a&gt;: &amp;quot;a high-performance, high-precision CPU, GPU, and memory profiler for Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;G&lt;/a&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;lances&lt;/a&gt;: &amp;quot;Glances an Eye on your system. A top/htop alternative for GNU/Linux, BSD, Mac OS and Windows operating systems.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sumerc/yappi"&gt;Yappi&lt;/a&gt;: &amp;quot;Yet Another Python Profiler, but this time thread&amp;amp;coroutine&amp;amp;greenlet aware.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pythonspeed/filprofiler"&gt;Fil&lt;/a&gt;: &amp;quot;A Python memory profiler for data processing and scientific computing applications&amp;quot; (&lt;a class="reference external" href="https://www.youtube.com/watch?v=2nKvzVIUjLE&amp;amp;ab_channel=PyninsulaOfficial"&gt;Video&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pyutils/line_profiler"&gt;line_profiler&lt;/a&gt;: &amp;quot;Line-by-line profiling for Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/vpelletier/pprofile"&gt;pprofile&lt;/a&gt;: &amp;quot;Line-granularity, thread-aware deterministic and statistic pure-python profiler&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/zhuyifei1999/guppy3/"&gt;Guppy 3&lt;/a&gt;: &amp;quot;Python programming environment and heap analysis toolset&amp;quot;&lt;/p&gt;
&lt;p&gt;S&lt;em&gt;ee also:&lt;/em&gt; &lt;a class="reference external" href="https://docs.python.org/3/library/profile.html"&gt;The Python Profilers&lt;/a&gt;, Python documentation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPython standard distribution comes with three deterministic profilers.&amp;nbsp;&lt;tt class="docutils literal"&gt;cProfile&lt;/tt&gt;,&amp;nbsp;&lt;tt class="docutils literal"&gt;Profile&lt;/tt&gt;&amp;nbsp;and&amp;nbsp;&lt;tt class="docutils literal"&gt;hotshot&lt;/tt&gt;.&amp;nbsp;&lt;tt class="docutils literal"&gt;cProfile&lt;/tt&gt;&amp;nbsp;is implemented as a C module based on&amp;nbsp;&lt;tt class="docutils literal"&gt;lsprof&lt;/tt&gt;,&amp;nbsp;&lt;tt class="docutils literal"&gt;Profile&lt;/tt&gt;&amp;nbsp;is in pure Python and&amp;nbsp;&lt;tt class="docutils literal"&gt;hotshot&lt;/tt&gt;&amp;nbsp;can be seen as a small subset of a cProfile.&lt;/p&gt;
&lt;p&gt;Yappi Github, &lt;a class="reference external" href="https://github.com/sumerc/yappi"&gt;https://github.com/sumerc/yappi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; &lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Windows_Task_Manager#:~:text=The%20program%20can%20be%20started,typing%20taskmgr%20in%20the%20File"&gt;Task Manager&lt;/a&gt;: Windows process management tool with some memory analytics&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.tableau.com/current/server/en-us/perf_collect_perfmon.htm"&gt;Collect Data in Windows with Performance Monitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Resource_Monitor"&gt;Resource Monitor&lt;/a&gt;: Windows tool with Memory, CPU, Disk and Network monitoring tabs&lt;/p&gt;
&lt;div class="wp-image-6300 figure"&gt;
&lt;img alt="Resource Monitor can stop processes from running and view in use, standby (Cached) and free memory. This shows 7 Python scripts running and 49% of total memory is being consumed. Looks like we are running steady and safely below &amp;quot;MemoryError&amp;quot; overflow. We might be able to add a few more scripts with 51% of RAM available!" src="https://pythonmarketer.files.wordpress.com/2021/12/resource-monitor-labels-full.jpg?w=796" /&gt;
&lt;p class="caption"&gt;Resource Monitor can stop processes from running and view in use, standby (Cached) and free memory. This shows 7 Python scripts running and 49% of total memory is being consumed. Looks like we are running steady and safely below &amp;quot;MemoryError&amp;quot; overflow. We might be able to add a few more scripts with 51% of RAM available!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Memory Tips and Guides&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9"&gt;Memory Management in Python&lt;/a&gt;, Towards Data Science: this article shows some memory efficient ways to write your code.&lt;/li&gt;
&lt;li&gt;Use only the data you need. Any data you read in and aren't using is held in memory. The &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"&gt;usecols argument&lt;/a&gt; in pandas is a great way to read a csv and only use the columns you need.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonspeed.com/articles/chunking-pandas/"&gt;Reading data in chunks&lt;/a&gt; with the &lt;a class="reference external" href="https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/io/parsers/readers.py#L491-L586"&gt;chunksize argument&lt;/a&gt; is another way to reduce memory usage for large datasets.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonspeed.com/articles/pandas-dataframe-series-memory-usage/"&gt;Measuring the memory usage of a Pandas dataframe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some tools are line oriented, others are function oriented. If your code contains large functions, you might favor a line based profiling tool.&lt;/li&gt;
&lt;li&gt;Be aware of the overhead some memory tools may incur. memory_profile was clocked with a whopping 270x slowdown per the Scalene PyCon talk below. The talk shows an awesome comparison of these Python profiling libraries:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-6330 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/12/scalene-pycon-us-2021-memory-library-comparison.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Recommended Reading&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/64"&gt;Profiling and Analyzing Performance of Python Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pymotw.com/2/profile/"&gt;profile, cProfile, and pstats – Performance analysis of Python programs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/64"&gt;Profiling and Analyzing Performance of Python Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.tecmint.com/command-line-tools-to-monitor-linux-performance/"&gt;20 Linux Memory Management Command Line Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;Random-access Memory (RAM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://computersciencewiki.org/index.php/Cache_memory"&gt;Cache Memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you'll see &amp;quot;MemoryError&amp;quot; depends on your computer's hardware, the size of your dataset and what operations you need to script out. Generally speaking, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Input/output"&gt;I/O&lt;/a&gt; or file reads and writes are more expensive operations.&lt;/p&gt;
&lt;p&gt;The tools in this post will help you anticipate how much computing power you have available, monitor your memory consumption more closely and avoid pushing your computer past its limits. You can do things like reading data in chunks and only using the columns you need to reduce your memory consumption. Realizing these tools and strategies can make getting things done with Python a smoother ride.&lt;/p&gt;
</content><category term="coding, computing, pandas, performance, programming"></category><category term="memory profiling"></category><category term="monitoring"></category><category term="python"></category><category term="RAM"></category><category term="Windows"></category></entry><entry><title>In Praise of Resource Scoping</title><link href="https://pythonmarketer.com/in-praise-of-resource-scoping.html" rel="alternate"></link><published>2021-12-18T11:09:00-06:00</published><updated>2021-12-18T11:09:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-12-18:/in-praise-of-resource-scoping.html</id><summary type="html">&lt;p&gt;When assessing your environment, problem or your goal, meticulously scout the tools at your disposal. When you're learning a new job, a new project or a programming language's tools for example, it pays to have a grasp of your options. Researching what documentation, guides, tools or libraries are at your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When assessing your environment, problem or your goal, meticulously scout the tools at your disposal. When you're learning a new job, a new project or a programming language's tools for example, it pays to have a grasp of your options. Researching what documentation, guides, tools or libraries are at your disposal will help you accomplish your goal. That sounds obvious but here's what I mean.&lt;/p&gt;
&lt;p&gt;Seek out resources. Bookmark links and support info in an Excel spreadsheet with a handful of columns, for example. Soon, you'll amass a collection tools and guides to get things done. Most companies or products have &amp;quot;resource centers&amp;quot;, mountains of internal documentation, tools and blogs. At many organizations, people have likely made tools for something they needed in the past then moved on. Often these tools can be leveraged for anyone who cares enough to seek out, read about and learn how to use them. Dig for these tools too. Find resources by googling products you use. Subscribe to their &lt;a class="reference external" href="https://status.box.com/"&gt;status pages&lt;/a&gt;. Look for other tools that may help you in a pinch like &lt;a class="reference external" href="https://support.goto.com/webinar/system-check-attendee"&gt;GoToWebinar's system check&lt;/a&gt; to help someone figure out what's wrong with their browser. I love these types of browser-based troubleshooting software. These are ways to gain a better understanding of technologies that might affect or improve your productivity or day to day goals.&lt;/p&gt;
&lt;p&gt;I think of &amp;quot;resource scoping&amp;quot; as crawling these types of resources for every tool, guide and support contact that might good to know. The effort you put in to scope available resources is worth the time spent. Check out the &amp;quot;resource scoping&amp;quot; I did in &lt;a class="reference external" href="https://pythonmarketer.com/2021/05/29/python-libraries-tools-resources-for-creative-and-academic-writers/"&gt;this post I wrote focused on tools for writers&lt;/a&gt;!&lt;/p&gt;
&lt;div class="wp-image-6282 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/12/pixel-cells-gce7fcdb43_640.png?w=640" /&gt;
&lt;/div&gt;
</content><category term="productivity, work"></category><category term="documentation"></category><category term="research"></category><category term="tools"></category></entry><entry><title>Custom Styles</title><link href="https://pythonmarketer.com/wp-global-styles-pub%2fescutcheon.html" rel="alternate"></link><published>2021-11-28T22:54:00-06:00</published><updated>2021-11-28T22:54:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-11-28:/wp-global-styles-pub%2fescutcheon.html</id><content type="html">&lt;p&gt;{&amp;quot;version&amp;quot;:2,&amp;quot;isGlobalStylesUserThemeJSON&amp;quot;:true}&lt;/p&gt;
</content><category term="blog"></category></entry><entry><title>Ed Carter - 2021-11-12 06:36:24</title><link href="https://pythonmarketer.com/55cac540a3ed65175f882bbf1238549c.html" rel="alternate"></link><published>2021-11-12T06:36:00-06:00</published><updated>2021-11-12T06:36:00-06:00</updated><author><name>@erickbytes</name></author><id>tag:pythonmarketer.com,2021-11-12:/55cac540a3ed65175f882bbf1238549c.html</id><summary type="html">&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;Here's an article idea I hope you'll consider for your site.&lt;/p&gt;
&lt;p&gt;The job market can be tough for people with disabilities, so it’s no surprise that they’re more likely to start their own businesses than people without disabilities.&lt;/p&gt;
&lt;p&gt;And with the growing sharing economy, there truly are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;Here's an article idea I hope you'll consider for your site.&lt;/p&gt;
&lt;p&gt;The job market can be tough for people with disabilities, so it’s no surprise that they’re more likely to start their own businesses than people without disabilities.&lt;/p&gt;
&lt;p&gt;And with the growing sharing economy, there truly are a lot of great entrepreneurial opportunities available for people with disabilities.&lt;/p&gt;
&lt;p&gt;Would you help spread the word? I can write an article for your site with tips and advice for people with disabilities on how to get their small business up and running, along with information on grants and other funding opportunities available. Additionally, I would be happy to feature your website in the article.&lt;/p&gt;
&lt;p&gt;Please let me know what you think.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Thank you in advance!&lt;/div&gt;
&lt;div class="line"&gt;Ed Carter&lt;/div&gt;
&lt;div class="line"&gt;Ablefutures.org&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR: Ed Carter&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR EMAIL: &lt;a class="reference external" href="mailto:info&amp;#64;ablefutures.org"&gt;info&amp;#64;ablefutures.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR URL:&lt;/div&gt;
&lt;div class="line"&gt;SUBJECT: [PyMarketer] send_message()&lt;/div&gt;
&lt;div class="line"&gt;IP: 41.210.154.196&lt;/div&gt;
&lt;div class="line"&gt;Array&lt;/div&gt;
&lt;div class="line"&gt;(&lt;/div&gt;
&lt;div class="line"&gt;[1_Name] =&amp;gt; Ed Carter&lt;/div&gt;
&lt;div class="line"&gt;[2_Email] =&amp;gt; &lt;a class="reference external" href="mailto:info&amp;#64;ablefutures.org"&gt;info&amp;#64;ablefutures.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[3_Website] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[4_Comment] =&amp;gt; Hi!&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here's an article idea I hope you'll consider for your site.&lt;/p&gt;
&lt;p&gt;The job market can be tough for people with disabilities, so it’s no surprise that they’re more likely to start their own businesses than people without disabilities.&lt;/p&gt;
&lt;p&gt;And with the growing sharing economy, there truly are a lot of great entrepreneurial opportunities available for people with disabilities.&lt;/p&gt;
&lt;p&gt;Would you help spread the word? I can write an article for your site with tips and advice for people with disabilities on how to get their small business up and running, along with information on grants and other funding opportunities available. Additionally, I would be happy to feature your website in the article.&lt;/p&gt;
&lt;p&gt;Please let me know what you think.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Thank you in advance!&lt;/div&gt;
&lt;div class="line"&gt;Ed Carter&lt;/div&gt;
&lt;div class="line"&gt;Ablefutures.org&lt;/div&gt;
&lt;div class="line"&gt;[email_marketing_consent] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[entry_title] =&amp;gt; send_message()&lt;/div&gt;
&lt;div class="line"&gt;[entry_permalink] =&amp;gt; &lt;a class="reference external" href="https://pythonmarketer.com/contact/"&gt;https://pythonmarketer.com/contact/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[feedback_id] =&amp;gt; 55cac540a3ed65175f882bbf1238549c&lt;/div&gt;
&lt;div class="line"&gt;)&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>What is Your Circle of the Internet?</title><link href="https://pythonmarketer.com/what-is-your-circle-of-the-internet.html" rel="alternate"></link><published>2021-11-06T11:29:00-05:00</published><updated>2021-11-06T11:29:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-11-06:/what-is-your-circle-of-the-internet.html</id><summary type="html">&lt;p&gt;This morning I'm meditating on my usual apps or websites I visit through the course of a typical day. I wonder how limited or expansive it could be in the span of all that's waiting to be consumed on the internet. I like reading online or physical books too and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This morning I'm meditating on my usual apps or websites I visit through the course of a typical day. I wonder how limited or expansive it could be in the span of all that's waiting to be consumed on the internet. I like reading online or physical books too and writing. Consider your own circle of the internet. What sites do you frequent? What do you consume? This is more rhetorical. It's good to pose the question and consider what you might be missing. I recently downloaded a bunch of nature and hiking apps. Maybe that means I want more of that in my life. &lt;a class="reference external" href="https://www.youtube.com/watch?v=hgw_yprN_-w&amp;amp;ab_channel=LiliDVLima"&gt;Happy trails&lt;/a&gt;.&lt;/p&gt;
</content><category term="apps, internet, life"></category><category term="introspection"></category><category term="web browsing"></category></entry><entry><title>WordPress Ad Campaign Results from a Typical Blog</title><link href="https://pythonmarketer.com/meta-blog-mediocre-september-ad-campaign-results.html" rel="alternate"></link><published>2021-10-30T19:32:00-05:00</published><updated>2021-10-30T19:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-10-30:/meta-blog-mediocre-september-ad-campaign-results.html</id><summary type="html">&lt;p&gt;In September 2021, I tested out the recommended ads runner, &lt;a class="reference external" href="https://wordads.co/"&gt;WordAds&lt;/a&gt;, on this WordPress blog. 6,182 ads were served over the course of a month, earning $0.86 from impressions and clicks. My average CPM or cost per thousand impressions was $0.14. My blog averages about 1,600 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In September 2021, I tested out the recommended ads runner, &lt;a class="reference external" href="https://wordads.co/"&gt;WordAds&lt;/a&gt;, on this WordPress blog. 6,182 ads were served over the course of a month, earning $0.86 from impressions and clicks. My average CPM or cost per thousand impressions was $0.14. My blog averages about 1,600 views a month at the moment, mostly fueled by various search engines. Here's an example of one ad that ran:&lt;/p&gt;
&lt;div class="wp-image-6185 figure"&gt;
&lt;img alt="**Example Ad Run on This Site Shown Above**" src="https://pythonmarketer.files.wordpress.com/2021/10/wordads-ad-1.png?w=877" /&gt;
&lt;p class="caption"&gt;&lt;strong&gt;Example Ad Run on This Site Shown Above&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In my WordPress account, I upgraded to the business plan. This gave me access to WordPress plug-ins. I enabled the &lt;a class="reference external" href="https://yoast.com/wordpress/plugins/seo/"&gt;Yoast SEO plug-in&lt;/a&gt; and activated its site optimization. I also enabled the maximum ads possible in my settings. In spite of these efforts, the results were sparse. Maybe there's more that I could have done. But this blog is passive and more like a hobby at the moment. I'm ok with a blog that makes $0.86 per month. Maybe someday it will be worth more. But I enjoy writing so it's all good. My skills grow and maybe I share something with someone across the world. That's what keeps me coming back.&lt;/p&gt;
&lt;p&gt;I concluded I will not be running ads anytime soon. I wanted to get a baseline of what I was leaving on the table by not running ads. Now I can project when I might tap into the blog's potential traffic revenue, if ever. It seems I would need much higher views per month before ads makes sense with my level of traffic, 65 blog followers and minor social media clout.&lt;/p&gt;
&lt;p&gt;There's also the added benefit of not serving up people's data to ad companies. Ads seem to be a generally accepted way to earn from your internet labors. But right now, they're not for this blog. Good luck monetizing your blog. Or just writing for the hell of it!&lt;/p&gt;
&lt;div class="wp-image-6182 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/10/sept-2021-ad-campaign-results.png?w=1024" /&gt;
&lt;/div&gt;
</content><category term="Marketing, meta, writing"></category><category term="ad campaign"></category><category term="SEO"></category></entry><entry><title>Khadija Ansari - 2021-10-07 06:03:21</title><link href="https://pythonmarketer.com/ba7f3c48d5786c4f7b552a893fd8df94.html" rel="alternate"></link><published>2021-10-07T06:03:00-05:00</published><updated>2021-10-07T06:03:00-05:00</updated><author><name>@erickbytes</name></author><id>tag:pythonmarketer.com,2021-10-07:/ba7f3c48d5786c4f7b552a893fd8df94.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hi,&lt;/div&gt;
&lt;div class="line"&gt;Hope you are having a good day.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I am writing because I am interested in publishing a well-researched post on your website. I wonder if you could provide me the opportunity to share my story with your readers. I have done comprehensive research and come up with below mentioned …&lt;/p&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hi,&lt;/div&gt;
&lt;div class="line"&gt;Hope you are having a good day.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I am writing because I am interested in publishing a well-researched post on your website. I wonder if you could provide me the opportunity to share my story with your readers. I have done comprehensive research and come up with below mentioned topic ideas.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;1)China is dominating the Ecommerce world - How Businesses earn more Profits.&lt;/div&gt;
&lt;div class="line"&gt;2) Plan for the 2021 Holiday Shopping Season: 10 Ways to Prepare for Shipping Demands.&lt;/div&gt;
&lt;div class="line"&gt;3) Getting Success: How to Search For The Right Mentor For Your Business.&lt;/div&gt;
&lt;div class="line"&gt;4) Demand Generation Strategy: How To Attract More Leads in 2021.&lt;/div&gt;
&lt;div class="line"&gt;5) Starting Your First Venture? Here’s What You Need to Become a Business Owner.&lt;/div&gt;
&lt;div class="line"&gt;6) Demand Generation Strategy: How To Attract More Leads.&lt;/div&gt;
&lt;div class="line"&gt;7) eCommerce User Experience: Reducing Buyer Friction&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Articles on the above mentioned topics will not only attract more readers but also provide information on the subject. I affirm the post would be informative, relevant, and unique.&lt;/p&gt;
&lt;p&gt;Let me know if you have any other ideas in mind.&lt;/p&gt;
&lt;p&gt;Looking forward to hearing from you soon.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Best regards,&lt;/div&gt;
&lt;div class="line"&gt;Khadija&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR: Khadija Ansari&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR EMAIL: &lt;a class="reference external" href="mailto:khadijaansari559&amp;#64;gmail.com"&gt;khadijaansari559&amp;#64;gmail.com&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR URL: &lt;a class="reference external" href="https://codup.co/"&gt;https://codup.co/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;SUBJECT: [PyMarketer] Contact&lt;/div&gt;
&lt;div class="line"&gt;IP: 124.29.232.179&lt;/div&gt;
&lt;div class="line"&gt;Array&lt;/div&gt;
&lt;div class="line"&gt;(&lt;/div&gt;
&lt;div class="line"&gt;[1_Name] =&amp;gt; Khadija Ansari&lt;/div&gt;
&lt;div class="line"&gt;[2_Email] =&amp;gt; &lt;a class="reference external" href="mailto:khadijaansari559&amp;#64;gmail.com"&gt;khadijaansari559&amp;#64;gmail.com&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[3_Website] =&amp;gt; &lt;a class="reference external" href="https://codup.co/"&gt;https://codup.co/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[4_Comment] =&amp;gt; Hi,&lt;/div&gt;
&lt;div class="line"&gt;Hope you are having a good day.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I am writing because I am interested in publishing a well-researched post on your website. I wonder if you could provide me the opportunity to share my story with your readers. I have done comprehensive research and come up with below mentioned topic ideas.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;1)China is dominating the Ecommerce world - How Businesses earn more Profits.&lt;/div&gt;
&lt;div class="line"&gt;2) Plan for the 2021 Holiday Shopping Season: 10 Ways to Prepare for Shipping Demands.&lt;/div&gt;
&lt;div class="line"&gt;3) Getting Success: How to Search For The Right Mentor For Your Business.&lt;/div&gt;
&lt;div class="line"&gt;4) Demand Generation Strategy: How To Attract More Leads in 2021.&lt;/div&gt;
&lt;div class="line"&gt;5) Starting Your First Venture? Here’s What You Need to Become a Business Owner.&lt;/div&gt;
&lt;div class="line"&gt;6) Demand Generation Strategy: How To Attract More Leads.&lt;/div&gt;
&lt;div class="line"&gt;7) eCommerce User Experience: Reducing Buyer Friction&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Articles on the above mentioned topics will not only attract more readers but also provide information on the subject. I affirm the post would be informative, relevant, and unique.&lt;/p&gt;
&lt;p&gt;Let me know if you have any other ideas in mind.&lt;/p&gt;
&lt;p&gt;Looking forward to hearing from you soon.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Best regards,&lt;/div&gt;
&lt;div class="line"&gt;Khadija&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[email_marketing_consent] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[entry_title] =&amp;gt; Contact&lt;/div&gt;
&lt;div class="line"&gt;[entry_permalink] =&amp;gt; &lt;a class="reference external" href="https://atomic-temporary-107329037.wpcomstaging.com/contact/"&gt;https://atomic-temporary-107329037.wpcomstaging.com/contact/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[feedback_id] =&amp;gt; ba7f3c48d5786c4f7b552a893fd8df94&lt;/div&gt;
&lt;div class="line"&gt;)&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>What I Learned from Black, Python's "Uncompromising" Code Formatter</title><link href="https://pythonmarketer.com/a-learning-use-case-for-black-python-code-formatter.html" rel="alternate"></link><published>2021-09-23T10:12:00-05:00</published><updated>2021-09-23T10:12:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-09-23:/a-learning-use-case-for-black-python-code-formatter.html</id><summary type="html">&lt;p&gt;Black is a code formatting tool that I have been testing out recently to see what the hype is about. It is the defacto &amp;quot;uncompromising code formatter in Python&amp;quot;. I normally do not use any code formatters since I'm not required to use them. This short post aims to convince …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Black is a code formatting tool that I have been testing out recently to see what the hype is about. It is the defacto &amp;quot;uncompromising code formatter in Python&amp;quot;. I normally do not use any code formatters since I'm not required to use them. This short post aims to convince you that Black is an insightful way to see the parts of your code that are dangerously unreadable.&lt;/p&gt;
&lt;p&gt;I have found it interesting to see what black does with my gnarliest code. It has taught me what is considered &amp;quot;good formatting&amp;quot; by some Pythonistas. The areas where I see the most improvement is how it enforces &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP-8&lt;/a&gt;'s characters per line limit. Often before, I didn't know how to break my code into several lines. My scripts tended to have one-liners trailing off the edge of my text editor. Black teaches you new ways to organize your code and makes it easier to understand. Now I write my code like Black the first time instead of letting it trail off the screen.&lt;/p&gt;
&lt;p&gt;Initially I was hesitant to try Black because I didn't want to sabotage my own code style. But since running Black on a few of my scripts, it has taught me new ways to write code. Give Black a chance and you will learn how to write more readable Python.&lt;/p&gt;
&lt;p&gt;Here's the project on GitHub: &lt;a class="reference external" href="https://github.com/psf/black"&gt;https://github.com/psf/black&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python"></category><category term="Black Python"></category><category term="PEP-8"></category><category term="writing code"></category></entry><entry><title>Write More Code, Write Less Code</title><link href="https://pythonmarketer.com/write-more-code-write-less-code.html" rel="alternate"></link><published>2021-09-09T17:11:00-05:00</published><updated>2021-09-09T17:11:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-09-09:/write-more-code-write-less-code.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Write More Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write code everyday. Code fast and break things. Cherish your tracebacks. Keep going back, no matter how hopeless it may seem. Code habitually. Learn how to code. Get better at code. Love code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write Less Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use as few lines as possible. Nothing looks better than a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Write More Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write code everyday. Code fast and break things. Cherish your tracebacks. Keep going back, no matter how hopeless it may seem. Code habitually. Learn how to code. Get better at code. Love code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write Less Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use as few lines as possible. Nothing looks better than a program shorter than 50 or 100 lines! Avoid aggressively gnarly one-liners. Use sensible one-liners or [&lt;em&gt;gasp&lt;/em&gt;] for loops. Read other people's code.&lt;/p&gt;
&lt;p&gt;Write more code, write less code.&lt;/p&gt;
</content><category term="coding"></category><category term="code"></category><category term="coding practice"></category><category term="how to code"></category></entry><entry><title>8 Promising Python Static Site Generators</title><link href="https://pythonmarketer.com/a-brief-summary-of-promising-python-static-site-generators.html" rel="alternate"></link><published>2021-07-28T23:31:00-05:00</published><updated>2021-07-28T23:31:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-07-28:/a-brief-summary-of-promising-python-static-site-generators.html</id><summary type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for this Wordpress blog. Or maybe I'll spin up a new one!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Why Statics?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most &amp;quot;modern&amp;quot; websites are &lt;em&gt;dynamic&lt;/em&gt; in the sense that the contents of the site live in a database, and are converted into presentation-ready HTML only when a user wants to see the page. That's great. However, it presents some minor issues that static site generators try to solve.&lt;/p&gt;
&lt;p&gt;In a static site, the whole site, every page, &lt;em&gt;everything&lt;/em&gt;, is created before the first user even sees it and uploaded to the server as a simple folder full of HTML files (and images, CSS, etc).&lt;/p&gt;
&lt;p&gt;The Nikola Handbook - &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;https://getnikola.com/handbook.html#why-static&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="static-site-generator-python-libraries"&gt;
&lt;h2&gt;Static Site Generator Python Libraries&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;listed in largest to smallest order by # of Github project stars&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Github - 11K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seems to be the front running static site generator in Python's ecosystem. It contains a convenient pelican-importer tool to import existing content from WordPress, Dotclear, or RSS feeds. Enjoying the modular nature of the &lt;a class="reference external" href="https://github.com/pelican-plugins"&gt;pelican-plugins&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lektor&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/lektor/lektor"&gt;Github - 3.5K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intriguing CMS project touting a &amp;quot;Python API&amp;quot;, &lt;a class="reference external" href="https://www.getlektor.com/plugins/"&gt;plugins for tools like Webpack&lt;/a&gt; and talented maintainers including the author of Flask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cactus&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/eudicots/Cactus"&gt;Github - 3.5K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Simple but powerful &lt;a class="reference external" href="http://mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html"&gt;static website generator&lt;/a&gt; using Python and the &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/templates/"&gt;Django template system&lt;/a&gt;... typical users would be designers that are tech-savvy, want to use templates, but don't like to mess with setting up django or S3.&amp;quot; (Mac OS) &lt;a class="reference external" href="https://vimeo.com/46999791"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nikola&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getnikola/nikola"&gt;Github - 2.2K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Viable option to host your site with the informative &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;Nikola Handbook&lt;/a&gt; walking you through each step. &lt;a class="reference external" href="https://plugins.getnikola.com/"&gt;Plugins&lt;/a&gt; for &lt;a class="reference external" href="https://plugins.getnikola.com/v7/notebook_shortcode/"&gt;Jupyter Notebooks&lt;/a&gt;, &lt;a class="reference external" href="https://getnikola.com/handbook.html#post-processing-filters"&gt;post processing filters&lt;/a&gt;, a &lt;a class="reference external" href="https://getnikola.com/handbook.html#importing-your-wordpress-site-into-nikola"&gt;Wordpress importer&lt;/a&gt; command line tool and about &lt;a class="reference external" href="https://themes.getnikola.com/"&gt;40 ready to go themes&lt;/a&gt; to find the perfect style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Makesite&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/sunainapai/makesite"&gt;Github - 1.6K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offers less configuration, using only a single makesite.py file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hyde&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/hyde/hyde"&gt;Github - 1.6K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Port from &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, a &lt;a class="reference external" href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; static site generator. It has since formed its own &amp;quot;evil twin&amp;quot; identity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mynt&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/Anomareh/mynt"&gt;Github - 400 stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Designed to give you all the features of a CMS with none of the often rigid implementations of those features.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Staticjinja&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/staticjinja/staticjinja"&gt;Github - 250 Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Minimalist Python library for building static websites with Jinja.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://PyLadies.com"&gt;PyLadies.com&lt;/a&gt;, &lt;a class="reference external" href="https://pyladies.com/"&gt;created with Mynt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FullStackPython.com, &lt;a class="reference external" href="https://github.com/mattmakai/fullstackpython.com"&gt;created with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GetLektor.com, &lt;a class="reference external" href="https://github.com/lektor/lektor-website"&gt;created with Lektor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gohugoio/hugo"&gt;Hugo&lt;/a&gt;, a Go static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website.html"&gt;How to Build a Low-tech&amp;nbsp;Website?&lt;/a&gt; (featuring Pelican)&lt;/li&gt;
&lt;li&gt;One convenient way to serve your static files up on the web is with a &lt;a class="reference external" href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/#:~:text=A%20content%20delivery%20network%20(CDN,stylesheets%2C%20images%2C%20and%20videos."&gt;CDN&lt;/a&gt; like &lt;a class="reference external" href="https://developers.cloudflare.com/pages/framework-guides/deploy-anything/"&gt;Cloudflare Pages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can research more projects on &lt;a class="reference external" href="https://jamstack.org/generators/"&gt;Jamstack&lt;/a&gt;, a site I found helpful for finding these libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;! I launched a Pelican blog about investing with Cloudflare pages. It's my first live static blog. Read more about it &lt;a class="reference external" href="https://pythonmarketer.com/2022/07/08/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, web development"></category><category term="creating your own blog"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>Lucy Reed - 2021-06-02 21:28:25</title><link href="https://pythonmarketer.com/6e55bb3bf691feceaa3e4419eadffaeb.html" rel="alternate"></link><published>2021-06-02T21:28:00-05:00</published><updated>2021-06-02T21:28:00-05:00</updated><author><name>@erickbytes</name></author><id>tag:pythonmarketer.com,2021-06-02:/6e55bb3bf691feceaa3e4419eadffaeb.html</id><summary type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;These days, starting a business is so easy that it has become a great option for a side gig.&lt;/p&gt;
&lt;p&gt;Ecommerce businesses, especially, are great for anyone who wants to test the entrepreneurial waters or set up a potential passive income stream. But as with any business, the key to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;These days, starting a business is so easy that it has become a great option for a side gig.&lt;/p&gt;
&lt;p&gt;Ecommerce businesses, especially, are great for anyone who wants to test the entrepreneurial waters or set up a potential passive income stream. But as with any business, the key to success in ecommerce is creating loyal, happy customers.&lt;/p&gt;
&lt;p&gt;It’s a topic I’d love to write about for your website, if you’re interested. In the article, I’ll offer tips for ecommerce entrepreneurs or wannabe entrepreneurs on how they can attract first-time customers and turn them into loyal shoppers. I'll include a tip on hiring a web designer to put together an attractive, easy-to-navigate website, and will plug in your services.&lt;/p&gt;
&lt;p&gt;Please let me know if this topic is of interest and I’ll get started on the article.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Thank you for your time!&lt;/div&gt;
&lt;div class="line"&gt;Lucy Reed&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR: Lucy Reed&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR EMAIL: &lt;a class="reference external" href="mailto:lucyreed&amp;#64;gigmine.co"&gt;lucyreed&amp;#64;gigmine.co&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR URL:&lt;/div&gt;
&lt;div class="line"&gt;SUBJECT: [Python Marketer] Contact&lt;/div&gt;
&lt;div class="line"&gt;IP: 41.210.147.7&lt;/div&gt;
&lt;div class="line"&gt;Array&lt;/div&gt;
&lt;div class="line"&gt;(&lt;/div&gt;
&lt;div class="line"&gt;[1_Name] =&amp;gt; Lucy Reed&lt;/div&gt;
&lt;div class="line"&gt;[2_Email] =&amp;gt; &lt;a class="reference external" href="mailto:lucyreed&amp;#64;gigmine.co"&gt;lucyreed&amp;#64;gigmine.co&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[3_Website] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[4_Comment] =&amp;gt; Hi,&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These days, starting a business is so easy that it has become a great option for a side gig.&lt;/p&gt;
&lt;p&gt;Ecommerce businesses, especially, are great for anyone who wants to test the entrepreneurial waters or set up a potential passive income stream. But as with any business, the key to success in ecommerce is creating loyal, happy customers.&lt;/p&gt;
&lt;p&gt;It’s a topic I’d love to write about for your website, if you’re interested. In the article, I’ll offer tips for ecommerce entrepreneurs or wannabe entrepreneurs on how they can attract first-time customers and turn them into loyal shoppers. I'll include a tip on hiring a web designer to put together an attractive, easy-to-navigate website, and will plug in your services.&lt;/p&gt;
&lt;p&gt;Please let me know if this topic is of interest and I’ll get started on the article.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Thank you for your time!&lt;/div&gt;
&lt;div class="line"&gt;Lucy Reed&lt;/div&gt;
&lt;div class="line"&gt;[email_marketing_consent] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[entry_title] =&amp;gt; Contact&lt;/div&gt;
&lt;div class="line"&gt;[entry_permalink] =&amp;gt; &lt;a class="reference external" href="https://pythonmarketer.com/contact/"&gt;https://pythonmarketer.com/contact/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[feedback_id] =&amp;gt; 6e55bb3bf691feceaa3e4419eadffaeb&lt;/div&gt;
&lt;div class="line"&gt;)&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Python Libraries, Tools + Resources for Creative and Academic Writers</title><link href="https://pythonmarketer.com/python-libraries-tools-resources-for-creative-and-academic-writers.html" rel="alternate"></link><published>2021-05-29T17:51:00-05:00</published><updated>2021-05-29T17:51:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-05-29:/python-libraries-tools-resources-for-creative-and-academic-writers.html</id><summary type="html">&lt;p&gt;Today I scoured the internet for tools written in Python that assist writing in any form. After some relentless Google and Github searching, here are my favorites. I found tools to help write modular stories and novels, screenwriting with Trelby and several libraries for academic papers. I haven't tried all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I scoured the internet for tools written in Python that assist writing in any form. After some relentless Google and Github searching, here are my favorites. I found tools to help write modular stories and novels, screenwriting with Trelby and several libraries for academic papers. I haven't tried all of these... yet!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storywriting&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/olivierkes/manuskript"&gt;manuskript&lt;/a&gt;: A open-source tool for writers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mimadrone/writerblocks"&gt;writerblocks&lt;/a&gt;: A toolkit for writing stories in a modular way&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vkbo/novelWriter"&gt;NovelWriter&lt;/a&gt;: novelWriter is an open source plain text editor designed for writing novels.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/trelby/trelby"&gt;Trelby&lt;/a&gt;: The free, multiplatform, feature-rich screenwriting program!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Carleslc/Readteractive"&gt;Readeractive&lt;/a&gt;: Tool for writing and generating interactive books, also known as gamebooks.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Moonbase59/PAWS"&gt;PAWS&lt;/a&gt;: Python Adventure Writing System&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous Writing, Text Cleaning and Proofreading Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://languagetool.org/http-api/swagger-ui/#!/default/post_check"&gt;Language Tool API&lt;/a&gt;: Open Source proofreading software for English, French, German, Polish, Russian, and&amp;nbsp;more than 20 other languages. It finds many errors that a simple spell checker cannot detect. See also: &lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python library&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/languagetool-org/languagetool"&gt;Github&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jfilter/clean-text"&gt;clean-text&lt;/a&gt;: Python package for text cleaning&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pudo/normality"&gt;normality&lt;/a&gt;: A tiny library for Python text normalisation. Useful for ad-hoc text processing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shivam5992/textstat"&gt;textstat&lt;/a&gt;: Python package to calculate readability statistics of a text object - paragraphs, sentences, articles.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sloria/TextBlob"&gt;textblob&lt;/a&gt;: Simple, Pythonic, text processing--Sentiment analysis, part-of-speech tagging, noun phrase extraction, translation, spelling correction and more.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.nltk.org/"&gt;Natural Language Toolkit (NLTK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/miso-belica/sumy"&gt;Sumy&lt;/a&gt;: Module for automatic summarization of text documents and HTML pages.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/wp-admin/post.php?post=5519&amp;amp;action=edit"&gt;Mackerel&lt;/a&gt;: Mackerel provides an automated, easy to use alternative for company or school writing tasks. Simply provide the topic and/or files and we will do the rest.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fandu/Verb-Miner"&gt;Verb Miner&lt;/a&gt;: This tool can help you analyze a document and discover cool verbs from pdf papers.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lkjie/paper-translator"&gt;paper-translater&lt;/a&gt;: Chinese and English essay translator, paper translator, clipboard listener&lt;/li&gt;
&lt;li&gt;There are many &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/26/comparing-text-editors-on-ubuntu-atom-emacs-sublime-vim-vs-code/"&gt;text editor options&lt;/a&gt; like Sublime or Atom with useful &lt;a class="reference external" href="https://github.com/thedataking/SublimeWritingStyle"&gt;plug-ins for text documents&lt;/a&gt; or code.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.google.com/tech-writing"&gt;Free Google Technical Writing Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/PythonWriters"&gt;PythonWriters Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Academic Writing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/Wookai/paper-tips-and-tricks"&gt;Tips and Tricks for Writing Scientific Papers&lt;/a&gt;: Practice and tips &amp;amp; tricks to write scientific papers in LaTeX, with figures generated in Python or Matlab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/dmvaldman/library"&gt;library&lt;/a&gt;: A collection of essays and timeless papers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/amusi/CVPR2021-Papers-with-Code"&gt;2021 Papers with Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;` &amp;lt;&lt;a class="reference external" href="https://github.com/JelteF/PyLaTeX"&gt;https://github.com/JelteF/PyLaTeX&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://github.com/JelteF/PyLaTeX"&gt;PyLaTeX&lt;/a&gt;: A Python library for creating LaTeX files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/luong-komorebi/Begin-Latex-in-minutes"&gt;Begin LaTeX in minutes&lt;/a&gt;: Brief Intro to LaTeX for beginners that helps you use LaTeX with ease.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://pypi.org/project/texbib/"&gt;Texbib&lt;/a&gt;: A program that helps you to manage your BibTeX references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/Pezmc/BibLatex-Check"&gt;BibLatex-Check&lt;/a&gt;: A python script for checking BibLatex .bib files for common referencing mistakes!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/paperpy/paperpy"&gt;paperpy&lt;/a&gt;: Tools for simplifying the preparation of version-controlled and well-written academic papers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/devd/Academic-Writing-Check"&gt;Academic Writing Check&lt;/a&gt;: Check for passive words, weasel words, duplicate words, typographical errors and words strunk &amp;amp; white don't like. (Written in Perl.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/matplotlib/AnatomyOfMatplotlib"&gt;Anatomy of Matplotlib&lt;/a&gt;: Tutorial developed for the SciPy conference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://www.scipy.org/"&gt;SciPy&lt;/a&gt;: (pronounced “Sigh Pie”) is a Python-based ecosystem of open-source software for mathematics, science, and engineering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;:&amp;nbsp;A fundamental package for scientific computing with Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;: A fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the&amp;nbsp;&lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;&amp;nbsp;programming language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://newsletter.timber.fm/p/a-writing-tip-i-learned-at-oxford"&gt;A writing tip I learned at Oxford&lt;/a&gt;: TLDR read your writing out loud to proof it.&lt;/p&gt;
&lt;p&gt;In Math, Computer Science, Physics, or any field where your typical paper has even a modest amount of mathematical notation the percentage of papers written using LaTeX (or even plain TeX!) is probably about 90%+.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.quora.com/What-percent-of-papers-are-written-with-LaTeX"&gt;Adam Russell,&amp;nbsp;PhD Data Visualization, Computational Geometry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BibTeX is reference management software for formatting lists of references. The BibTeX tool is typically used together with the LaTeX document preparation system.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/BibTeX"&gt;https://en.wikipedia.org/wiki/BibTeX&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content><category term="education, productivity, python, writing"></category><category term="academic writing"></category><category term="Python Tools for Writing"></category><category term="resources for writers"></category><category term="storywriting"></category><category term="writing tools"></category></entry><entry><title>Did You Read the Whole Error?</title><link href="https://pythonmarketer.com/did-you-read-the-whole-error.html" rel="alternate"></link><published>2021-04-15T15:34:00-05:00</published><updated>2021-04-15T15:34:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-04-15:/did-you-read-the-whole-error.html</id><summary type="html">&lt;p&gt;You read the whole thing front to back? Every word? Stop and think about it. What is the computer trying to tell you?&lt;/p&gt;
&lt;p&gt;Sometimes something is obvious but needs to be reminded. I found myself thinking this yet again today. Often there are times where I would have saved some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You read the whole thing front to back? Every word? Stop and think about it. What is the computer trying to tell you?&lt;/p&gt;
&lt;p&gt;Sometimes something is obvious but needs to be reminded. I found myself thinking this yet again today. Often there are times where I would have saved some time and grief by carefully reading the error.&lt;/p&gt;
&lt;p&gt;Carefully read the error when you see a traceback. Then once you've taken it all in, consider what to do next. If you're stumped, googling it might yield a solution. But make sure you actually read the error first.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="errors"></category><category term="solutions"></category></entry><entry><title>Organize Your Emails in Bulk With Gmail Search Operators + Python Libraries</title><link href="https://pythonmarketer.com/using-gmails-search-operators-to-organize-your-emails-in-bulk.html" rel="alternate"></link><published>2021-02-07T11:17:00-06:00</published><updated>2021-02-07T11:17:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2021-02-07:/using-gmails-search-operators-to-organize-your-emails-in-bulk.html</id><summary type="html">&lt;p&gt;After 12 years with Gmail as my primary email inbox, I wanted to clear out old &amp;quot;Promotions&amp;quot; emails. This can be done with some clever use of Gmail's search syntax shown below.&lt;/p&gt;
&lt;p&gt;I wanted to preserve my &amp;quot;Starred&amp;quot; emails, but delete old emails to free up space. I was able …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After 12 years with Gmail as my primary email inbox, I wanted to clear out old &amp;quot;Promotions&amp;quot; emails. This can be done with some clever use of Gmail's search syntax shown below.&lt;/p&gt;
&lt;p&gt;I wanted to preserve my &amp;quot;Starred&amp;quot; emails, but delete old emails to free up space. I was able to delete 58,000 &amp;quot;Promotions&amp;quot; emails! I wrote this post because I feel it might save you a little time figuring it out yourself. I also included brief details on possible Python tools for Gmail and IMAP below if you are considering scripting your contact management.&lt;/p&gt;
&lt;p&gt;I didn't need Python in the end after reading some &lt;a class="reference external" href="https://support.google.com/mail/answer/7190?hl=en"&gt;Gmail search operator examples&lt;/a&gt;. For example, adding a hypen before a search in Gmail acts similar to a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bitwise_operation#NOT"&gt;&amp;quot;bitwise&amp;quot; or unary operator (~)&lt;/a&gt; in Python. It excludes or inverses the criteria in a search rather than including it. I was able to use this to exclude my starred emails. You can also add a filter for &amp;quot;has attachment&amp;quot;. I used that to star any emails with attachments, then delete the rest and excluded &amp;quot;starred&amp;quot; emails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gmail search syntax to get &amp;quot;Promotions&amp;quot; minus &amp;quot;Starred&amp;quot; emails and filter on a date range&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;category:promotions &lt;span class="pre"&gt;-is:starred&lt;/span&gt; after:2019/12/31 before:2021/1/1&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selecting &amp;quot;all&amp;quot; emails in your search&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-image-5251 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/02/select-all-in-search.jpg?w=588" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Once, you've selected &amp;quot;All&amp;quot; from the checkbox dropdown, click &amp;quot;Select all conversations that match this search&amp;quot;.&lt;/strong&gt; Now you can apply actions such as &amp;quot;add a star&amp;quot; or &amp;quot;delete&amp;quot; them by clicking the (⋮) vertical ellipses menu:&lt;/p&gt;
&lt;div class="wp-image-5258 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/02/gmail-filter-steps.jpg?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;To Python or not?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I also considered Python tools for interfacing with gmail to accomplish this. There doesn't seem to be an easy way to group emails by &amp;quot;Category&amp;quot; in the &lt;a class="reference external" href="https://developers.google.com/gmail/api/quickstart/python"&gt;Gmail API&lt;/a&gt; or IMAP. IMAP is shorthand for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol"&gt;Internet Message Access Protocol&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/imaplib.html"&gt;imaplib&lt;/a&gt; is an &amp;quot;IMAP4 protocol client&amp;quot; in the Python standard library. Usually python's &lt;a class="reference external" href="https://docs.python.org/3/library/smtplib.html"&gt;smtplib&lt;/a&gt; is the first library that comes up for email. Don't forget about imaplib! It might be more suitable for searching based on text in your emails or &lt;a class="reference external" href="https://superuser.com/questions/719677/how-to-use-gmail-tabs-with-imap"&gt;creating labeled segments yourself, then applying actions to them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Gmail + Python Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://support.google.com/mail/answer/7190?hl=en"&gt;G&lt;/a&gt;&lt;a class="reference external" href="https://support.google.com/mail/answer/7190?hl=en"&gt;mail search operators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/imaplib.html"&gt;imaplib&lt;/a&gt; - python standard library interface to email accounts [&lt;a class="reference external" href="https://stackoverflow.com/questions/3180891/imap-how-to-delete-messages"&gt;Stack Overflow example&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://support.google.com/mail/answer/7126229?hl=en"&gt;enabling IMAP in your gmail&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/gmail/api/quickstart/python"&gt;Gmail API Python Quickstart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/charlierguo/gmail"&gt;Gmail python library&lt;/a&gt; - There are also pythonic wrappers to the Gmail API like this one.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pymotw.com/2/imaplib/"&gt;imaplib - Python Module of the Week&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://markodenic.com/use-google-like-a-pro/"&gt;Use Google Like a Pro&lt;/a&gt;&lt;/p&gt;
</content><category term="productivity, python"></category><category term="email"></category><category term="gmail"></category><category term="IMAP"></category><category term="smtp"></category></entry><entry><title>20 Eclectic Computer Science Wikipedia Articles</title><link href="https://pythonmarketer.com/a-computer-science-themed-wikipedia-link-grab-bag.html" rel="alternate"></link><published>2020-11-28T12:55:00-06:00</published><updated>2020-11-28T12:55:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-11-28:/a-computer-science-themed-wikipedia-link-grab-bag.html</id><summary type="html">&lt;p&gt;Here are 20 random technology-oriented Wikipedia links I recently collected after re-organizing troves of bookmarked links accumulated over the past few years. These articles peek into the wide variety of things to learn about that exist in Computer Science. ABL. Always. Be. Learning. Curiosity and well organized browser bookmarks are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are 20 random technology-oriented Wikipedia links I recently collected after re-organizing troves of bookmarked links accumulated over the past few years. These articles peek into the wide variety of things to learn about that exist in Computer Science. ABL. Always. Be. Learning. Curiosity and well organized browser bookmarks are your friend.&lt;/p&gt;
&lt;p&gt;I support Wikipedia with a donation nearly every year. It's an amazing resource to learn about everything and I'm very grateful for it. Thank you for existing, Wikipedia. It's is a great jumping off point to learn about something I don't understand, which is much of this list here.&lt;/p&gt;
&lt;div class="section" id="algorithms-theories"&gt;
&lt;h2&gt;Algorithms &amp;amp; Theories&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deterministic_algorithm"&gt;Deterministic algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Greater fool theory&lt;/a&gt; (economics)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Man_or_boy_test"&gt;Man or boy test&lt;/a&gt; - compiler theory from Donald Knuth&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursion"&gt;Recursion&lt;/a&gt; - the most common algorithm I read about in passing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="databases"&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_(computing)"&gt;Cache&lt;/a&gt; + &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_invalidation"&gt;Cache invalidation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
caching is a common technique to store data so that it can be quickly fetched later with limited usage of database resources.&lt;/blockquote&gt;
&lt;p&gt;` &amp;lt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;https://en.wikipedia.org/wiki/Column-oriented_DBMS&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Column-oriented DBMS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Data_definition_language#:~:text=In%20the%20context%20of%20SQL,tables%2C%20indexes%2C%20and%20users."&gt;Data definition language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Database_normalization"&gt;Database normalization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"&gt;Lock&lt;/a&gt; (mutex)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing"&gt;Hybrid transactional/analytical processing&lt;/a&gt; (HTAP)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;Online transaction processing&lt;/a&gt; (OLTP) - Making lots of writes to the database.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;Online analytical processing&lt;/a&gt; (OLAP) - Reading the database. Lots of joins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="developer"&gt;
&lt;h2&gt;Developer&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)"&gt;Asynchrony&lt;/a&gt; Used for performing operations in parallel.&lt;/p&gt;
&lt;p&gt;` &amp;lt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;https://en.wikipedia.org/wiki/Remote_procedure_call&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Event-driven_programming#:~:text=In%20computer%20programming%2C%20event%2Ddriven,from%20other%20programs%20or%20threads."&gt;Event-driven programming&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Async is always event-driven, but not the other way round.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/5844955/whats-the-difference-between-event-driven-and-asynchronous-between-epoll-and-a#:~:text=Asynchronous%20is%20basically%20multitasking.,in%20an%20easy%20responsive%20manner."&gt;Stephen Chung - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;Garbage collection&lt;/a&gt; - automatic memory management&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parallel_computing#:~:text=Parallel%20computers%20can%20be%20roughly,work%20on%20the%20same%20task."&gt;Parallel Computing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Reinforcement_learning"&gt;Reinforcement learning&lt;/a&gt; - one paradigm of machine learning&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;Remote procedure call&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Runbook#:~:text=In%20a%20computer%20system%20or,or%20in%20physical%20book%20form."&gt;List of Lists of Lists&lt;/a&gt; - check out the &amp;quot;Technology&amp;quot; section&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-reminders"&gt;
&lt;h2&gt;Final Reminders&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;check out the &lt;a class="reference external" href="https://pypi.org/project/wikipedia/"&gt;Wikipedia python library&lt;/a&gt; (import wikipedia)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Special:Random"&gt;Random&lt;/a&gt; - Wikipedia's Random Article Button&lt;/li&gt;
&lt;li&gt;And now for something completely different: &lt;a class="reference external" href="https://github.com/yuandongzhong/useful-links-for-javascript"&gt;Useful Links for Javascript Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading, hope you found something you liked! Here's another post with more &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/06/23/my-favorite-free-educational-courses-and-talks-to-absorb/"&gt;free resources for learning computer science online&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Databases, programming"></category><category term="algorithms"></category><category term="articles"></category><category term="computer science"></category><category term="Wikipedia"></category></entry><entry><title>Maximize Your Energy Through Trade-offs and Specialization in Life Choices</title><link href="https://pythonmarketer.com/leveraging-specialization-and-considering-trade-offs-in-decision-making.html" rel="alternate"></link><published>2020-09-12T12:54:00-05:00</published><updated>2020-09-12T12:54:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-09-12:/leveraging-specialization-and-considering-trade-offs-in-decision-making.html</id><summary type="html">&lt;p&gt;Your life is a game of trade-offs. You spend x units of energy on x thing in order to gain something from it. You only have a limited number of energy and focus units.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Each life interest you pursue comes with a cost per benefit units returned. Some examples of …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Your life is a game of trade-offs. You spend x units of energy on x thing in order to gain something from it. You only have a limited number of energy and focus units.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Each life interest you pursue comes with a cost per benefit units returned. Some examples of this might be:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cooking vs. ordering food&lt;/li&gt;
&lt;li&gt;family life, relationship, friends &amp;amp; social life&lt;/li&gt;
&lt;li&gt;job, income, career, financial planning&lt;/li&gt;
&lt;li&gt;travel \ serendipity&lt;/li&gt;
&lt;li&gt;skill development \ hobbies&lt;/li&gt;
&lt;li&gt;home improvement \ DIY vs. hiring specialists&lt;/li&gt;
&lt;li&gt;health choices \ exercising frequency&lt;/li&gt;
&lt;li&gt;renting vs. buying a house&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these life choices require a certain amount of your energy and focus. So how do you determine the right balance?&lt;/p&gt;
&lt;p&gt;It's good to start from the idea that nothing is given that you have to have. Some people eat take-out food instead of cooking. Lately I've preferred this as well. I know how to cook some things. But I know I can outsource the meal, pay a premium and enjoy great food. I am able to support my cravings for Taqueria Traspasada, even if it is more expensive. I want to leverage this trade-off to get a meal from someone who is a better cook than me. I also like supporting local businesses. All I have to do is pick it up from the restaurant. Plus it saves me the time spent shopping and preparing the meal, which I can use to write blog posts! 🤓 Or instead use the time to learn to speak German and French. J'habit a Chicago a Logan Square 👋&lt;/p&gt;
&lt;p&gt;Some humans have no interest in seeing their family. Others are very tightly woven into the fabric of their kin. Introverts and extroverts will fall over the spectrum in what they deem an adequate social life. (But we're all pretty much even on this front in this pandemic world it seems.) Ultimately time given to others could be invested in yourself. However, humans are social animals and we benefit greatly from our bonds with our friends and family.&lt;/p&gt;
&lt;p&gt;My point is that you should not assume that you have to be a good cook. But cooking is a rewarding and useful habit to cultivate. Maybe someday I'll get back into it more regularly!&lt;/p&gt;
&lt;p&gt;You should pursue home improvement and DIY if it is interesting and fun to you. But I will hire a contractor if I ever need any work done on my home and leverage their specialization. Actually, I've avoided this choice altogether by renting an apartment instead of buying a house. I don't plan on buying a home anytime soon. That's my preference in this trade-off.&lt;/p&gt;
&lt;p&gt;Renting instead of buying is also more conducive to my yearning for serendipity, which is a life more mobile and free with less rigid or even no employment. But right now I am greatly benefiting from stable employment with a successful company. Less vacation now is a trade for financial stability. But maybe someday I'll have both? Either way, someday I'll backpack the world. 🌍🌏🌎&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Relevant Economic Theory: The Law of Diminishing&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Marginal_utility"&gt;Marginal Utility&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In college, my economics professor likened this law to eating &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Big_Mac"&gt;Big Macs&lt;/a&gt; from McDonald's. The first Big Mac you eat gives you the most happiness units. The 2nd Big Mac gives you some happiness, but less than the first one because you are full. A 3rd Big Mac would give you even less happiness units. Hopefully you don't eat more than 3 Big Macs in one sitting, it won't give you very many happiness units. 😆&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Law Of Diminishing Marginal Utility states that all else equal as consumption increases the marginal utility derived from each additional unit declines. Marginal utility is derived as the change in&amp;nbsp;utility&amp;nbsp;as an additional unit is consumed. Utility is an economic term used to represent satisfaction or happiness.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Will Kenton, &lt;a class="reference external" href="https://www.investopedia.com/terms/l/lawofdiminishingutility.asp#:~:text=The%20Law%20Of%20Diminishing%20Marginal,to%20represent%20satisfaction%20or%20happiness."&gt;Law of Diminishing Marginal Utility&lt;/a&gt; - Investopedia&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When allocating your energy and focus units, keep in mind this law. Maybe going out with your friends more than once a week gives you diminishing marginal utility. Maybe those units will be better spent on other activities and will bring greater joy per energy unit spent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In conclusion,&lt;/strong&gt; carefully consider all of these trade-offs when designing your ideal life. Be cautious of putting too much of your energy and focus units into any one of these. But there's no right or wrong balance. The key is to think about your preferences, seek them out and constantly re-evaluate your trade-off decisions. Consider deeply what you really want and run towards it.&lt;/p&gt;
</content><category term="life"></category><category term="choices"></category><category term="decisions"></category><category term="specialization"></category><category term="trade-offs"></category></entry><entry><title>Pondering Join Algorithms</title><link href="https://pythonmarketer.com/join-algorithms.html" rel="alternate"></link><published>2020-08-09T18:24:00-05:00</published><updated>2020-08-09T18:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-08-09:/join-algorithms.html</id><summary type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, your smaller table should be the &amp;quot;left&amp;quot; table when joining two tables.&amp;quot;... Professor demonstrates better performance by making the smaller table the &amp;quot;outer&amp;quot; table in a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/nested-loop-joins.html#:~:text=A%20Block%20Nested%2DLoop%20(BNL,inner%20loops%20must%20be%20read.&amp;amp;text=The%20join_buffer_size%20system%20variable%20determines,used%20to%20process%20a%20query."&gt;mysql example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The brute force approach&amp;quot;&lt;/li&gt;
&lt;li&gt;If you have enough memory to hold a large table, a good option for joining.&lt;/li&gt;
&lt;li&gt;Always pick the smaller table as the outer table.&lt;/li&gt;
&lt;li&gt;Buffer as much of your outer table in memory as possible to reduce redundant I/O.&lt;/li&gt;
&lt;li&gt;Loop over the inner table or use an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Index Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://www.cs.carleton.edu/faculty/dmusicant/cs347f03/proj3/"&gt;CS Course definition&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If indexes are available, or you could create an index to use for a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sort-Merge Join [&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sort-merge_join"&gt;wikipedia&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Useful if one or both tables are sorted on a join key. Maximize sequential I/O.&lt;/p&gt;
&lt;img alt="Sort - Merge Join" class="alignnone size-full wp-image-4121" src="https://pythonmarketer.files.wordpress.com/2020/08/sort-merge-join-1.png" style="width: 1731px; height: 855px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash Join [&lt;/strong&gt;&lt;a class="reference external" href="https://mysqlserverteam.com/hash-join-in-mysql-8/#:~:text=Hash%20join%20is%20a%20way,inputs%20can%20fit%20in%20memory."&gt;mysql blog example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best performance. For large datasets.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Phase #1 Build (Hash Table)&lt;/li&gt;
&lt;li&gt;Phase #2 Probe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Use&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom Filter&lt;/a&gt;&lt;strong&gt;set operations for probe phase optimization&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;insert a key&lt;/li&gt;
&lt;li&gt;lookup a key&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading on Bloom Filters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://onatm.dev/2020/08/10/let-s-implement-a-bloom-filter/"&gt;Let's implement a Bloom Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gopiandcode.uk/logs/log-bloomfilters-debunked.html"&gt;Bloom Filters Debunked&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Grace Hash Join&lt;/strong&gt; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_join#Grace_hash_join"&gt;wikipedia&lt;/a&gt;]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Do hash joins when things don't fit in memory.&amp;quot;&lt;/li&gt;
&lt;li&gt;Use a hash table for each table. Break the tables into buckets then do a nested loop join on each bucket. If the buckets do not fit in memory, use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_partitioning#:~:text=Recursive%20partitioning%20is%20a%20statistical,on%20several%20dichotomous%20independent%20variables."&gt;recursive partitioning&lt;/a&gt;. Then everything fits in memory for the join.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Split outer relation into partitions based on the hash key.&amp;quot;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo on Hash Join algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashing is almost always better than sorting for operator execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;No join algorithm works well in all scenarios.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Andy Pavlo&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="coding, data, Databases, programming"></category><category term="algorithms"></category><category term="computer science"></category><category term="joins"></category><category term="learning"></category><category term="study"></category><category term="technology"></category></entry><entry><title>Alijan - 2020-06-28 07:58:20</title><link href="https://pythonmarketer.com/bc2cedf98f1081feefb0c80e2d2d4e2c.html" rel="alternate"></link><published>2020-06-28T07:58:00-05:00</published><updated>2020-06-28T07:58:00-05:00</updated><author><name>@erickbytes</name></author><id>tag:pythonmarketer.com,2020-06-28:/bc2cedf98f1081feefb0c80e2d2d4e2c.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hi Erick,&lt;/div&gt;
&lt;div class="line"&gt;Regarding AUTOMATING PYTEST ON WINDOWS WITH A .BAT FILE, PYTHON, TASK SCHEDULER (&lt;a class="reference external" href="https://pythonmarketer.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;https://pythonmarketer.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/&lt;/a&gt;)&lt;/div&gt;
&lt;div class="line"&gt;I created a bat-file and scheduled execution according to your instructions. bat-file is triggered and command prompt is appeared for a fraction of a second and then disappeared. 'Test_Results …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hi Erick,&lt;/div&gt;
&lt;div class="line"&gt;Regarding AUTOMATING PYTEST ON WINDOWS WITH A .BAT FILE, PYTHON, TASK SCHEDULER (&lt;a class="reference external" href="https://pythonmarketer.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;https://pythonmarketer.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/&lt;/a&gt;)&lt;/div&gt;
&lt;div class="line"&gt;I created a bat-file and scheduled execution according to your instructions. bat-file is triggered and command prompt is appeared for a fraction of a second and then disappeared. 'Test_Results.txt' is created but is empty.&lt;/div&gt;
&lt;div class="line"&gt;What possible problems could be?&lt;/div&gt;
&lt;div class="line"&gt;Thanks in advance&lt;/div&gt;
&lt;div class="line"&gt;Alijan&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR: Alijan&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR EMAIL: &lt;a class="reference external" href="mailto:semc07&amp;#64;gmail.com"&gt;semc07&amp;#64;gmail.com&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;AUTHOR URL:&lt;/div&gt;
&lt;div class="line"&gt;SUBJECT: [Python Marketer] Contact&lt;/div&gt;
&lt;div class="line"&gt;IP: 188.150.72.128&lt;/div&gt;
&lt;div class="line"&gt;Array&lt;/div&gt;
&lt;div class="line"&gt;(&lt;/div&gt;
&lt;div class="line"&gt;[1_Name] =&amp;gt; Alijan&lt;/div&gt;
&lt;div class="line"&gt;[2_Email] =&amp;gt; &lt;a class="reference external" href="mailto:semc07&amp;#64;gmail.com"&gt;semc07&amp;#64;gmail.com&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[3_Website] =&amp;gt;&lt;/div&gt;
&lt;div class="line"&gt;[4_Comment] =&amp;gt; Hi Erick,&lt;/div&gt;
&lt;div class="line"&gt;Regarding AUTOMATING PYTEST ON WINDOWS WITH A .BAT FILE, PYTHON, TASK SCHEDULER (&lt;a class="reference external" href="https://pythonmarketer.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;https://pythonmarketer.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/&lt;/a&gt;)&lt;/div&gt;
&lt;div class="line"&gt;I created a bat-file and scheduled execution according to your instructions. bat-file is triggered and command prompt is appeared for a fraction of a second and then disappeared. 'Test_Results.txt' is created but is empty.&lt;/div&gt;
&lt;div class="line"&gt;What possible problems could be?&lt;/div&gt;
&lt;div class="line"&gt;Thanks in advance&lt;/div&gt;
&lt;div class="line"&gt;Alijan&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[entry_title] =&amp;gt; Contact&lt;/div&gt;
&lt;div class="line"&gt;[entry_permalink] =&amp;gt; &lt;a class="reference external" href="https://pythonmarketer.com/contact/"&gt;https://pythonmarketer.com/contact/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;[feedback_id] =&amp;gt; bc2cedf98f1081feefb0c80e2d2d4e2c&lt;/div&gt;
&lt;div class="line"&gt;)&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category></entry><entry><title>Characterizing Database Workloads &amp; Storage Models</title><link href="https://pythonmarketer.com/choosing-database-storage-models-and-workloads-that-mesh.html" rel="alternate"></link><published>2020-06-27T13:22:00-05:00</published><updated>2020-06-27T13:22:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-06-27:/choosing-database-storage-models-and-workloads-that-mesh.html</id><summary type="html">&lt;p&gt;Thank you &lt;a class="reference external" href="https://db.cs.cmu.edu/"&gt;Carnegie Mellon Database Group&lt;/a&gt; for putting this online! These are my notes from watching on YouTube.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carnegie Mellon Databases Storage II, Lecture 4&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo [&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;Watch on YouTube&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-problem-and-solution"&gt;
&lt;h2&gt;The Problem and Solution&lt;/h2&gt;
&lt;p&gt;How should the DBMS represent the database in storage files on disk? Solve it by …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Thank you &lt;a class="reference external" href="https://db.cs.cmu.edu/"&gt;Carnegie Mellon Database Group&lt;/a&gt; for putting this online! These are my notes from watching on YouTube.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carnegie Mellon Databases Storage II, Lecture 4&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo [&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;Watch on YouTube&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-problem-and-solution"&gt;
&lt;h2&gt;The Problem and Solution&lt;/h2&gt;
&lt;p&gt;How should the DBMS represent the database in storage files on disk? Solve it by choosing the right &lt;em&gt;storage model&lt;/em&gt; for your target &lt;em&gt;workload&lt;/em&gt;. The right strategy varies if you are reading data, writing data and with how many joins you are performing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="workload-characterization"&gt;
&lt;h2&gt;Workload Characterization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;OLTP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;Online Transaction Processing&lt;/a&gt;): &amp;quot;Simple queries with lots of writes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OLAP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;Online Analytical Processing&lt;/a&gt;): &amp;quot;Read only queries. Lots of joins. Doing a lot of reads, but they're more complex.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTAP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing"&gt;Hybrid Transactional Analytical Processing&lt;/a&gt;): &amp;quot;is trying to do both of them. You still want to ingest new data, but analyze it as it comes in. It's used for companies making decisions on the fly as people are browsing websites, like internet advertising companies.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="screenshot-2020-06-27-at-11-56-10-am"&gt;
&lt;h2&gt;&lt;img alt="Screenshot 2020-06-27 at 11.56.10 AM" class="alignnone size-full wp-image-3897" src="https://pythonmarketer.files.wordpress.com/2020/06/screenshot-2020-06-27-at-11.56.10-am.png" style="width: 1920px; height: 1080px;" /&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="storage-models"&gt;
&lt;h2&gt;Storage Models&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;screenshots from the&lt;/em&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;lecture&lt;/a&gt;&lt;/p&gt;
&lt;img alt="n-ary model" class="alignnone size-full wp-image-3918" src="https://pythonmarketer.files.wordpress.com/2020/06/n-ary-model.png" style="width: 692px; height: 360px;" /&gt;
&lt;p&gt;N-ary used to be the dominant model until the '80s.&lt;/p&gt;
&lt;img alt="DSM model" class="alignnone size-full wp-image-3917" src="https://pythonmarketer.files.wordpress.com/2020/06/dsm-model-1.png" style="width: 938px; height: 396px;" /&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading:&lt;/strong&gt; &lt;a class="reference external" href="https://www.allthingsdistributed.com/2013/09/column-oriented-databases.html"&gt;All Things Distributed&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="column-store-vs-row-store-rdbms"&gt;
&lt;h2&gt;Column Store Vs. Row Store RDBMS&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/"&gt;Row-oriented DBMS&lt;/a&gt;&lt;strong&gt;(Row Store)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PostgreSQL, MySQL&lt;/li&gt;
&lt;li&gt;Row Store = use OLTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Column-oriented DBMS&lt;/a&gt;&lt;strong&gt;(Column Store)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Red Shift, BigQuery&lt;/li&gt;
&lt;li&gt;Column Store = use OLAP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If types are consistent, you can compress data into single column store.&lt;/p&gt;
&lt;/div&gt;
</content><category term="data, Databases, education, performance"></category><category term="Carnegie Mellon"></category><category term="database storage"></category><category term="learning"></category><category term="lectures notes"></category></entry><entry><title>A Guide To Making HTTP Requests To APIs With JSON &amp; Python</title><link href="https://pythonmarketer.com/how-to-make-json-requests-with-python.html" rel="alternate"></link><published>2020-05-18T05:41:00-05:00</published><updated>2020-05-18T05:41:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-05-18:/how-to-make-json-requests-with-python.html</id><summary type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/li&gt;
&lt;li&gt;Testing and Exporting Python Request Code from Postman (Optional)&lt;/li&gt;
&lt;li&gt;Formatting Your Request&lt;/li&gt;
&lt;li&gt;Example GET and POST Requests&lt;/li&gt;
&lt;li&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/li&gt;
&lt;li&gt;Sidebar: requests.Session()&lt;/li&gt;
&lt;li&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;strong&gt;Terminology Clarification&lt;/strong&gt;: I will refer to &amp;quot;items&amp;quot; or &amp;quot;data&amp;quot; throughout this post. This could be substituted for contacts or whatever data you are looking for. For example, you might be fetching a page of contacts from your CRM. Or fetching your tweets from Twitter's API. Or searching the Google location API, you might look up an address and return geo-location coordinates.&lt;/blockquote&gt;
&lt;div class="section" id="api-http-lingo-you-should-know"&gt;
&lt;h2&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hypertext Transfer Protocol (HTTP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Per &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;Mozilla&lt;/a&gt;,&amp;quot;Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical&amp;nbsp;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;client-server model&lt;/a&gt;, with a client opening a connection to make a request, then waiting until it receives a response.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
HTTP: you = client. API = way to communicate with server&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Application Programming Interface (API)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;Per Wikipedia&lt;/a&gt;, the purpose of an API is to simplify &amp;quot;programming by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstraction_(software_engineering)"&gt;abstracting&lt;/a&gt; the underlying implementation and only exposing objects or actions the developer needs.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Representational State Transfer (REST)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; is an architectural style of web APIs. It is the dominant architecture that many APIs use. Simple Object Access Protocol (&lt;a class="reference external" href="https://smartbear.com/blog/test-and-monitor/soap-vs-rest-whats-the-difference/"&gt;SOAP&lt;/a&gt;) is another style I've heard of, but it seems less common nowadays.&lt;/p&gt;
&lt;p&gt;A REST API is built for interoperability and has properties like: &amp;quot;simplicity of a uniform interface&amp;quot; and &amp;quot;visibility of communication between components by service agents.&amp;quot; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Wikipedia&lt;/a&gt;] If an API follows REST, it has many good principles baked in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;``GET``, ``POST`` and ``PATCH``&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are three common types of request methods.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;: &amp;nbsp;Read data returned, such as all of your tweets in &lt;a class="reference external" href="https://developer.twitter.com/en/docs"&gt;the Twitter API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;: Create a new item, like writing a new tweet. Can also update existing data. Tweets aren't editable though!&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt;: Similar to &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, this is typically used for updating data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;URL or &amp;quot;endpoint&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The website location to send your request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Values you pass to tell the API what you want. They are defined by the API specifications, which are usually &lt;a class="reference external" href="https://developers.activecampaign.com/reference"&gt;well documented&lt;/a&gt;. In python's &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library, they may be passed as &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt;. Sometimes they are passable directly within the endpoint url string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Body or &amp;quot;payload&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make a request, you send a payload to the url. Often this is a JSON string with the API's URL parameters and values, AKA the request body. If the &lt;a class="reference external" href="https://jira.readthedocs.io/"&gt;API is written specifically for Python&lt;/a&gt;, it might accept an actual Python dictionary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript Object Notation (JSON)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=KnAyziNnuI0"&gt;JSON&lt;/a&gt; is the data interchange standard for all languages. Usually it is the default way to pass data into and receive data from an API. If making a&amp;nbsp; &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, you can check your json object is formatted correctly by using a &lt;a class="reference external" href="https://jslint.com/"&gt;json linter&lt;/a&gt;. Or try Python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#module-json.tool"&gt;json.tool&lt;/a&gt;! You can also pretty print your JSON or python dictionary with the &lt;a class="reference external" href="https://docs.python.org/3/library/pprint.html"&gt;pprint&lt;/a&gt; module. If you're using json.dumps remember it has &lt;a class="reference external" href="https://docs.python.org/3/library/json.html"&gt;pretty printing accessible by keyword arguments&lt;/a&gt;! These features are accessible in the standard library. Isn't Python great? See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/09/15/python-101-an-intro-to-working-with-json/"&gt;Python 101 - An Intro to Working with JSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Headers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These usually contain website cookies and authorization info. They also may tell the API what kind of data you want back. JSON and XML are the two most common types of data to return. You can specify the return format in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers.&lt;/p&gt;
&lt;blockquote&gt;
If you need to parse an XML response, check out Python's stock &lt;a class="reference external" href="https://docs.python.org/3.8/library/xml.etree.elementtree.html"&gt;ElementTree API&lt;/a&gt;. I've only seen a few APIs using XML responses, such as the &lt;a class="reference external" href="https://www.usps.com/business/web-tools-apis/"&gt;USPS Address Validation API&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization varies widely. This is the level of identification you need to pass to the API to make a request. Public APIs might require none. Some just need a username and password. Others use the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OAuth"&gt;Oauth standard&lt;/a&gt;, which is a system involving credentials and tokens for extra security.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization Scheme Example [&lt;/strong&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Mozilla&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization: &amp;lt;auth-scheme&amp;gt; &amp;lt;authorisation-parameters&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
# headers python dict example
headers = {&amp;quot;Authorization&amp;quot;: f&amp;quot;basic {token}&amp;quot;}
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;API data is commonly returned in multiple pages when there is a lot of data returned. Each page can be accessed one request at a time. Sometimes you can specify how many items you want on a page. But there is usually a maximum items per page limit like 100.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Status code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each request usually gives you a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;numeric code corresponding to happened&lt;/a&gt; when the server tried to handle your request. There is also usually a message returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also: Web Server Gateway Interface (WSGI, pronounced &amp;quot;Wis-Ghee&amp;quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;As described in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt;, the Python Web Server Gateway Interface (WSGI) is a way to make sure that web servers and python web applications can talk to each other.&amp;quot;&amp;nbsp; &lt;a class="reference external" href="https://docs.gunicorn.org/en/latest/install.html"&gt;Gunicorn&lt;/a&gt; is one of &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi"&gt;a few Python WSGI clients&lt;/a&gt;. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/04/30/useful-links-for-web2py-beginners/"&gt;web2py&lt;/a&gt; is another WSGI client and web framework I have used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nginx"&gt;Nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;Create, read, update and delete (CRUD)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-request-json"&gt;
&lt;h2&gt;Creating the Request JSON&lt;/h2&gt;
&lt;p&gt;I recommend using &lt;a class="reference external" href="https://www.postman.com/"&gt;Postman&lt;/a&gt; in most cases, depending on the complexity of the API. If the JSON syntax is straightforward, you can format your data as a python dictionary, then convert it to a JSON object with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.dumps"&gt;json module&lt;/a&gt;. But JSON can be tricky sometimes. You may also need to pass a dictionary of HTTP headers.&lt;/p&gt;
&lt;p&gt;Some APIs have &amp;quot;Postman Collections&amp;quot;, a set of Python (or any language) script templates for the API. In those cases, it might make sense to use those resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Path One: Make HTTP request with json &amp;amp; requests libraries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Format Python dict with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&amp;nbsp; Infer API requirements from documentation. Use requests for HTTP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path Two: Make HTTP request with Postman &amp;amp; requests library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Postman to generate the JSON payload. Plug headers and payload into requests. Use requests library for HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Postman has a friendly interface for plugging in all your pieces and tinkering with your request body until it works. Make it easier on yourself and use Postman, especially if there are collections. An alternative is to troubleshoot in Python if you are confident in your grasp of the API. I use both options depending on my familiarity with the API at hand.&lt;/p&gt;
&lt;p&gt;Once you have the request working, you may &lt;a class="reference external" href="https://learning.postman.com/docs/postman/sending-api-requests/generate-code-snippets/"&gt;export your Postman request to almost any language&lt;/a&gt;. For Python, you can sometimes export to the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt;,&amp;nbsp; &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;urllib&lt;/tt&gt; libraries. Hit the &amp;quot;code&amp;quot; button in Postman and then copy your code.&lt;/p&gt;
&lt;blockquote&gt;
If you choose not to use Postman, you can use the json library. See the use of &lt;tt class="docutils literal"&gt;json.dumps()&lt;/tt&gt;to convert a dictionary to a JSON object in Example #2 below&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="formatting-your-request"&gt;
&lt;h2&gt;Formatting Your Request&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Paste your Postman headers, payload and url into your existing code.&lt;/li&gt;
&lt;li&gt;You may want to use a dict or &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting&lt;/a&gt; to pass values to your request parameters or url.&lt;/li&gt;
&lt;li&gt;If the API uses a token or other form of authorization that needs to be refreshed intermittently, I usually have a function that returns a token. &lt;tt class="docutils literal"&gt;token = fetch_token()&lt;/tt&gt; Then put the token in the headers dict.&amp;nbsp; &lt;tt class="docutils literal"&gt;{&amp;quot;Authorization&amp;quot;: f&amp;quot;basic &lt;span class="pre"&gt;{token}&amp;quot;}&lt;/span&gt;&lt;/tt&gt; Finally pass your headers and payload to your&amp;nbsp; &lt;tt class="docutils literal"&gt;requests.get&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;requests.request&lt;/tt&gt; function along with the endpoint url. You're now ready to test the request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="python-installation"&gt;
&lt;h2&gt;Python Installation&lt;/h2&gt;
&lt;p&gt;You can install &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. Alternatively, &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; is included within the Python standard library. If you want to convert HTTP response data to a dataframe or csv, install &lt;tt class="docutils literal"&gt;pandas.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install requests&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-1-get-the-geolocation-details-of-any-public-location-with-the-google-api"&gt;
&lt;h2&gt;Example #1: &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; the geolocation details of any public location with the Google API&lt;/h2&gt;
&lt;p&gt;This was modified from another example of &lt;a class="reference external" href="https://www.geeksforgeeks.org/get-post-requests-using-python/"&gt;Google's Geolocation API&lt;/a&gt;. To use this, you need to &lt;a class="reference external" href="https://developers.google.com/maps/documentation/geolocation/intro"&gt;create a developer account with Google&lt;/a&gt; and paste your API keys below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import requests
# import pandas as pd

&amp;quot;&amp;quot;&amp;quot;Find the best double-cheeseburger + fries $7 can buy.&amp;quot;&amp;quot;&amp;quot;
payload = {&amp;quot;key&amp;quot;:&amp;quot;Add_Google_API_Key_Here&amp;quot;, &amp;quot;address&amp;quot;:&amp;quot;Redhot Ranch&amp;quot;}
# optional: set a 5 second timeout for the http request
r = requests.get(url=&amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;,
                 params=payload,
                 timeout=5)
print(r.text)
print(r.status_code)
data = r.json()

# extracting latitude, longitude and formatted address of the first matching location
latitude = data['results'][0]['geometry']['location']['lat']
longitude = data['results'][0]['geometry']['location']['lng']
formatted_address = data['results'][0]['formatted_address']
print(longitude)
print(latitude)
print(formatted_address)

# optional: convert response into a dataframe with pandas
# location_df = pd.json_normalize(data['results'])
# location_df.to_csv('Locations.csv')
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Above you can see:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; makes it easy to see the server's text response also with &lt;tt class="docutils literal"&gt;response.text&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; also makes JSON encoding easy with &lt;tt class="docutils literal"&gt;response.json()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;I like to use &lt;tt class="docutils literal"&gt;pd.json_normalize()&lt;/tt&gt; to convert the response object to a dataframe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-encode-a-python-dictionary-to-json-string-and-post-to-a-hypothetical-api"&gt;
&lt;h2&gt;Example #2: Encode a Python dictionary to json string and &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; to a hypothetical API&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a simple dictionary with request body data and pretty inspect it with pprint.&lt;/li&gt;
&lt;li&gt;Convert it to encoded json string with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; the encoded JSON to the endpoint url with requests.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
import pprint
import json
import requests

def convert_dict_to_json_object():
    &amp;quot;&amp;quot;&amp;quot;Create request body with fictional contact details.&amp;quot;&amp;quot;&amp;quot;
    payload = {
        &amp;quot;first_name&amp;quot;:&amp;quot;P&amp;quot;,
        &amp;quot;last_name&amp;quot;:&amp;quot;Sherman&amp;quot;,
        &amp;quot;address&amp;quot;:&amp;quot;42 Wallaby Way&amp;quot;,
        &amp;quot;address_2&amp;quot;:&amp;quot;&amp;quot;,
        &amp;quot;city&amp;quot;:&amp;quot;Sydney&amp;quot;,
        &amp;quot;state&amp;quot;:&amp;quot;NSW&amp;quot;,
        &amp;quot;country&amp;quot;:&amp;quot;AU&amp;quot;,
        &amp;quot;zip&amp;quot;:&amp;quot;2000&amp;quot;
        }
    pprint.pprint(payload)
    json_str = json.dumps(payload, ensure_ascii=True)
    # encode json str to utf-8
    return json_str.encode(&amp;quot;utf-8&amp;quot;)

def create_new_contact(json_str):
    &amp;quot;&amp;quot;&amp;quot;
    This is a fictional API request.
    Passing a json object to requests.
    Decoding server response with response.json(),
    Returning a contact id by calling the data's keys.
    &amp;quot;&amp;quot;&amp;quot;
    headers = {
        &amp;quot;Authorization&amp;quot;: f&amp;quot;Bearer {token}&amp;quot;,
        &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
        &amp;quot;cache-control&amp;quot;: &amp;quot;no-cache&amp;quot;,
        &amp;quot;Postman-Token&amp;quot;: f&amp;quot;{postman_token}&amp;quot;
        }
    r = requests.request(method=&amp;quot;POST&amp;quot;,
                         url=&amp;quot;https://SomeSoftwareAPI.com/contacts/&amp;quot;,
                         data=json_str,
                         headers=headers)
    data = r.json()
    print(data.keys())
    contact_id = data['contact_id'] # call dict keys to get their values
    return contact_id

json_str = convert_dict_to_json_object()
contact_id = create_new_contact(json_str)
&lt;/pre&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;requests.request keyword argument alternatives for passing data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;params&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples or bytes to send in the query string for the&amp;nbsp;&lt;tt class="docutils literal"&gt;`Request&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.Request"&gt;https://2.python-requests.org/en/master/api/#requests.Request&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the&amp;nbsp;&lt;tt class="docutils literal"&gt;`Request&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.Request"&gt;https://2.python-requests.org/en/master/api/#requests.Request&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json&lt;/strong&gt;&amp;nbsp;– (optional) A JSON serializable Python object to send in the body of the&amp;nbsp;&lt;tt class="docutils literal"&gt;`Request&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.Request"&gt;https://2.python-requests.org/en/master/api/#requests.Request&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/"&gt;requests API documentation&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status codes&lt;/a&gt; are your friend. They offer a hint at why your request is not working. If you see 200 or 201, that's a good sign. They're usually helpful, but sometimes they can be misleading.&lt;/li&gt;
&lt;li&gt;Ensure you are defining the correct content-type. I had an experience where Postman defined two conflicting &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers and it &lt;a class="reference external" href="https://github.com/postmanlabs/postman-code-generators/issues/215"&gt;caused my request to fail&lt;/a&gt;. The server's error message indicated the problem was in my JSON, so it took me a while to figure out the headers were the problem.&lt;/li&gt;
&lt;li&gt;Sometimes it makes a difference if your url has &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://&lt;/span&gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; in it. Usually &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; is preferred.**&amp;nbsp;**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;requests.Session()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might be able to improve performance by using a requests &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;&amp;quot;session&amp;quot; object&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;
a session adds a &amp;quot;keep-alive&amp;quot; header to your HTTP connection.
It can be used to store cookies across requests.
&amp;quot;&amp;quot;&amp;quot;
import requests
s = requests.Session()
for page in range(0, 2):
    url = f&amp;quot;https://SomeSoftwareAPI.com/contacts/{str(page)}&amp;quot;
    r = s.get(url)
    print(r.text)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPResponse.debuglevel:&lt;/strong&gt; A debugging hook. If &lt;tt class="docutils literal"&gt;`debuglevel&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel&lt;/a&gt;&amp;gt;`__ is greater than zero, messages will be printed to stdout as the response is read and parsed. &lt;strong&gt;-&lt;/strong&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;http.client Python Docs&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from http.client import HTTPConnection
import requests
HTTPConnection.debuglevel = 1
payload = {&amp;quot;key&amp;quot;:&amp;quot;Add_Google_API_Key_Here&amp;quot;, &amp;quot;address&amp;quot;:&amp;quot;90 Miles&amp;quot;}
url = &amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;
r = requests.get(url=url, params=payload, timeout=5)
print(r.text)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I remember APIs seemed mysterious and daunting before I had used them. But like all things, they can be conquered with knowledge, understanding and tenacity to keep trying until you figure it out. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requests Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/api/"&gt;requests.request() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.get"&gt;requests.get() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.post"&gt;requests.post() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation"&gt;Google's HTTP Timing Explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Rolstenhouse/unofficial-apis"&gt;List of Interesting &amp;quot;Unofficial&amp;quot; APIs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Proxy_server"&gt;Proxy servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html"&gt;Making 1 million requests with python-aiohttp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Chicago, coding, HTTP, json, pandas, programming"></category><category term="api"></category><category term="data"></category><category term="python"></category><category term="requests"></category><category term="sandwiches"></category><category term="web"></category></entry><entry><title>Assessing The Marketing Effects of Randomization Failure</title><link href="https://pythonmarketer.com/when-random-isnt-so-random-the-time-i-accidentally-postcard-bombed-some-people.html" rel="alternate"></link><published>2020-05-09T04:06:00-05:00</published><updated>2020-05-09T04:06:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-05-09:/when-random-isnt-so-random-the-time-i-accidentally-postcard-bombed-some-people.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I always enjoy reading when technical people share their stories of the times things went a little haywire. Times when, despite their best intentions, a solution didn't work as planned and it ends in unpleasant or catastrophic failure. I had an experience like this recently, so here's my &amp;quot;oops …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I always enjoy reading when technical people share their stories of the times things went a little haywire. Times when, despite their best intentions, a solution didn't work as planned and it ends in unpleasant or catastrophic failure. I had an experience like this recently, so here's my &amp;quot;oops&amp;quot; story. Fortunately, I think this falls closer to the unpleasant end of the spectrum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finding A Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My employer needed a way to create postcard contact lists to mail 500,000 people each month. About 2 years in with the company, the old postcard system was breaking down and no one knew how to fix it. The guy who built it left the company. I never knew him and he didn't leave behind much help for anyone to fix his creation.&lt;/p&gt;
&lt;p&gt;For my team, it was easier to create the contacts lists by drawing contact data out of our CRM with &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/"&gt;requests&lt;/a&gt; and formatting the data with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html"&gt;pandas&lt;/a&gt;. So that's what I did to help us deliver the postcards. (Let's set aside the debate on the strategic value of postcards.)&lt;/p&gt;
&lt;p&gt;Things were going smooth for a few months. The new system was creating the lists and nothing appeared to change. The system is still in use today we are more reliable than the old system in its partially degraded state. But there were some growing pains.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Moment of&lt;/strong&gt; &lt;a class="reference external" href="https://twitter.com/jamesorharry/status/1100717726547562503"&gt;Ely&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
ELY (n.) The first, tiniest inkling you get that something, somewhere, has gone terribly wrong. [Douglas Adams, The Meaning of Liff]&lt;/blockquote&gt;
&lt;p&gt;We began to hear murmurs of the same contacts getting mailed each month from our senders. The script was supposed to draw a certain allocation of contacts at random for each sender. I knew I used &lt;tt class="docutils literal"&gt;`df.sample(n=1)&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html"&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html&lt;/a&gt;&amp;gt;`__ from pandas to randomize the contact pool. The contacts were definitely getting randomized.&lt;/p&gt;
&lt;p&gt;Then one day while making a change requested by our stakeholders, I noticed some code I had written that looked sort of like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def remove_duplicates(df):
    &amp;quot;&amp;quot;&amp;quot;Remove duplicates and randomize the order of the rows.&amp;quot;&amp;quot;&amp;quot;
    original = df.copy(deep=True)
    df = format_for_duplicate_removal(df)
    df = df.drop_duplicates().sample(n=1)
    deduped_contacts = original[original.index.isin(df.index)]
    return deduped_contacts
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The idea of this function was to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a throwaway copy of the original dataframe with &lt;tt class="docutils literal"&gt;df.copy()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;format the throwaway for better duplicate removal&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;drop_duplicates()&lt;/tt&gt; and randomize the dataframe's order of the rows with &lt;tt class="docutils literal"&gt;df.sample(n=1)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;return those rows from the original dataframe, preserving original data but in randomized order&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Discovering The Error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Looks great, right? Can you spot my error? Here's where I went wrong: I needed to randomize the data that gets returned. But instead, I randomized the throwaway dataframe. I never once altered the order of the original table. I did remove the duplicates, but the row order of the original dataframe never changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assessing the Damage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It took me a few months after I wrote the code to realize. That was enough time for a small fraction of our customers to get postcard bombed.&lt;/p&gt;
&lt;p&gt;Suppose you have two postcard campaigns every month. Both campaigns are drawing from the same contact source data. Both lists are created by the same script with nearly the same logic. That's ok if you randomize the contact order or the list is static. But if you don't randomize them and it's supposed to be a &amp;quot;random&amp;quot; draw campaign, that means you'll likely end up sending to the same people in both campaigns. That's exactly what happened. I accidentally postcard bombed 'em.&lt;/p&gt;
&lt;p&gt;Thankfully, only a small percent of our &amp;quot;senders&amp;quot; were opted into both campaigns. What does that mean for those senders? Their contacts got &lt;a class="reference external" href="https://www.youtube.com/watch?v=SSPewc--3yY"&gt;NFL blitzed&lt;/a&gt; for 3 months straight. Instead of getting 1 or maybe 2 postcards a month if they're really lucky, they received 2 a month, each month until I caught the error. We bombarded about 3,000 lucky potential customers each month during that time. Some of them let us know they thought it was excessive.&lt;/p&gt;
&lt;blockquote&gt;
The opposite of love is not hate, it's indifference. - Elie Wiesel&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sidebar On Analog Marketing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think postcards are still relevant as a Marketing tool in 2020. From an environmental perspective, I prefer going digital. Some people let us know when we mail them that they feel the same way and then we stop mailing them. But I think there's something tangible about real things you can hold in your hands. Postcards also tend to get a reaction, even if it's not a good one. Sometimes that reaction is an email stating, &amp;quot;DON'T EVER MAIL ME AGAIN!!!&amp;quot; 😆&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For the record, I changed my mistake to this:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def remove_duplicates(df):
    &amp;quot;&amp;quot;&amp;quot;Remove duplicates and randomize the order of the rows.&amp;quot;&amp;quot;&amp;quot;
    original = df.copy(deep=True)
    df = format_for_duplicate_removal(df)
    df = df.drop_duplicates()
    deduped_contacts = original[original.index.isin(df.index)]
    randomized_contacts = deduped_contacts.sample(n=1)
    return randomized_contacts
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Or maybe something like this would be better, for clearer separation of actions:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def remove_duplicates(df):
    &amp;quot;&amp;quot;&amp;quot;Remove duplicates while preserving original data.&amp;quot;&amp;quot;&amp;quot;
    original = df.copy(deep=True)
    df = format_for_duplicate_removal(df)
    df = df.drop_duplicates()
    deduped_contacts = original[original.index.isin(df.index)]
    return deduped_contacts

def randomize_contacts(df):
    &amp;quot;&amp;quot;&amp;quot;Randomize the order of the rows.&amp;quot;&amp;quot;&amp;quot;
    randomized_contacts = df.sample(n=1)
    return randomized_contacts
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;In Conclusion: Mistakes Happen.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes they have interesting consequences when you make them at a certain scale. Maybe I could have written some tests to prevent this. Maybe I should have reviewed my code a couple more times. Sometimes, we're asked to do work that stretches our mental capacity and time to the limit.&lt;/p&gt;
&lt;p&gt;Additionally, it's almost always a better choice to use an existing system, rather than writing your own. But in this case, my team was put in a situation where we needed to deliver because some else's software wasn't doing the job. I did my best to fill that need. And we're still using this way to send postcards today.&lt;/p&gt;
&lt;p&gt;I wish this failure didn't happen for the sake of everyone involved, but &lt;a class="reference external" href="https://en.wikipedia.org/wiki/An_Essay_on_Criticism"&gt;to err is human&lt;/a&gt;, right? Live and learn.&lt;/p&gt;
</content><category term="coding, Marketing, pandas, programming, python, work"></category><category term="business"></category><category term="mistakes"></category><category term="random"></category></entry><entry><title>Reflections on 5 Years of Solving Problems with Python</title><link href="https://pythonmarketer.com/reflections-on-5-years-of-solving-problems-with-python.html" rel="alternate"></link><published>2020-04-11T17:15:00-05:00</published><updated>2020-04-11T17:15:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-04-11:/reflections-on-5-years-of-solving-problems-with-python.html</id><summary type="html">&lt;p&gt;Prior to learning Python, I had no programming experience. I worked in marketing for a book publisher and did not perform well at my job. It was not a good fit. They eventually fired me. As my previous job unraveled, I discovered Python and the Coursera course, &lt;a class="reference external" href="https://www.coursera.org/learn/python?utm_medium=email&amp;amp;utm_source=other&amp;amp;utm_campaign=opencourse.course_complete.python.%7Eopencourse.course_complete.7A1yFTaREeWWBQrVFXqd1w."&gt;Programming for Everybody …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Prior to learning Python, I had no programming experience. I worked in marketing for a book publisher and did not perform well at my job. It was not a good fit. They eventually fired me. As my previous job unraveled, I discovered Python and the Coursera course, &lt;a class="reference external" href="https://www.coursera.org/learn/python?utm_medium=email&amp;amp;utm_source=other&amp;amp;utm_campaign=opencourse.course_complete.python.%7Eopencourse.course_complete.7A1yFTaREeWWBQrVFXqd1w."&gt;Programming for Everybody (Getting Started with Python)&lt;/a&gt;. Fortunately, that course jump-started me onto a path of learning and reading each day. My aim was to make my own website, a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/05/25/askkevinparker-com-my-first-web-app-other-notes/"&gt;goal that I accomplished&lt;/a&gt;. I needed to know how the sausage was made.&lt;/p&gt;
&lt;p&gt;Looking back from 2020, I can safely say Python changed my life. Because of it, I now have a fulfilling marketingdata-oriented career. I'm also grateful for the financial stability that came with it. I love to learn about the language and continue to improve my abilities to solve problems with new tools, not only Python.&lt;/p&gt;
&lt;p&gt;Below are pieces of wisdom picked up from my experiences. They are the result of many hours of study, reading, mistakes, luck, toil and eventual glory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These are thought-provoking adages and guidelines, not absolute truths in all cases.&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Developing a habit of learning pays off over time, no matter what the subject is. It is an investment in yourself that compounds.&lt;/li&gt;
&lt;li&gt;Follow your own curiosity. It's less important to compare what you know to others. Compare what you know today to what you knew yesterday. Don't worry about &lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;how long it takes to learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Watch educational or technical conference talks on sites like &lt;a class="reference external" href="https://www.youtube.com/channel/UCMjMBMGt0WJQLeluw6qNJuA/videos"&gt;YouTube&lt;/a&gt; or InfoQ. &lt;a class="reference external" href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Rich Hickey,&lt;/a&gt; &lt;a class="reference external" href="https://rhodesmill.org/brandon/talks/#selenium-at-scale"&gt;Brandon Rhodes&lt;/a&gt; and &lt;a class="reference external" href="https://www.youtube.com/watch?v=lyDLAutA88s"&gt;David Beazley&lt;/a&gt; are some of my favorite speakers. Watch talks from all languages, not just Python. Often the concepts apply to any programming language.&lt;/li&gt;
&lt;li&gt;Use an RSS reader. Anytime you find a good blog, subscribe by RSS or email to get new posts. I use the &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en"&gt;Feeder Chrome extension&lt;/a&gt;\Android app.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; contains a lot of wisdom. I like the concept of &lt;tt class="docutils literal"&gt;Explicit is better than implicit.&lt;/tt&gt; This implies declaring your actions in written or oral fashion, providing additional context. Consider favoring easier to read solutions over clever one-liners. For example:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List comprehensions&lt;/a&gt; are useful and &amp;quot;pythonic&amp;quot;, use them! But sometimes it's easier to use a for loop to hash out an idea. (Contrarily, avoiding the &lt;a class="reference external" href="https://www.youtube.com/watch?v=W-lZttZhsUY"&gt;Initialize Then Modify&lt;/a&gt; pattern benefits those comfortable with comprehensions.)&lt;/li&gt;
&lt;li&gt;Explicitly using &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt; versus positional arguments is another way to make your code easier to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can you explain the solution simply? If not, try to clarify your understanding or maybe there's a simpler way. In Python, there are often several ways to accomplish the same goal. But keep in mind the Zen of Python: &lt;tt class="docutils literal"&gt;There should be &lt;span class="pre"&gt;one--&lt;/span&gt; and preferably only one &lt;span class="pre"&gt;--obvious&lt;/span&gt; way to do it. Although that way may not be obvious at first unless you're Dutch.&lt;/tt&gt; Look for the obvious way. An example of this is &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting.&lt;/a&gt; I've heard f-strings are the hot new way to do this now.&lt;/li&gt;
&lt;li&gt;Don't be afraid to change course if things don't feel right. Ask yourself while coding, &amp;quot;Does this feel efficient?&amp;quot; Recently I was trying to format a json string so I approached it like I had in the past, by &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;exporting the request from Postman and formatting the json string&lt;/a&gt; with python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html?highlight=format#format"&gt;format() built-in&lt;/a&gt;. But this time, the curly braces were confusing me, I was struggling and it wasn't working. I googled and around and saw python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html?highlight=json#module-json"&gt;json module&lt;/a&gt; and &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html"&gt;df.to_json()&lt;/a&gt; in pandas. They were a much easier and better-looking solution. But it still wasn't working. Finally, i used the Postman approach and f-strings to format a successful payload. The third try worked! F-strings are super nice and clean.&lt;/li&gt;
&lt;li&gt;If you're stuck, there's probably a free online course or blog post that explains whatever is confusing you. Use the Googles. When in doubt, Google the error message.&lt;/li&gt;
&lt;li&gt;Begin your project by writing a list of requirements. This often leads to good questions and cases that may need to be addressed. The book &lt;a class="reference external" href="https://www.amazon.com/gp/product/0735619670/"&gt;Code Complete 2&lt;/a&gt; covers establishing project requirements in great detail, along with the other stages in the life-cycle of a software project. I'm really enjoying this book and highly recommend it.&lt;/li&gt;
&lt;li&gt;Names are really important. Take time to think about a good name for your variables and functions. Also, name your scripts well. I name my scripts using &lt;a class="reference external" href="https://examples.yourdictionary.com/action-verb-examples.html"&gt;action verbs&lt;/a&gt;. For example, my script that organizes accumulated files on my desktop into folders is named &lt;tt class="docutils literal"&gt;clean_desktop_files.py&lt;/tt&gt;. When I see this script months later, its name reminds me the action the script is performing. I believe it's better to err on the side of longer, more descriptive names for variables and functions. It makes code easier to understand. But there is a trade-off with length to keep in check.&lt;/li&gt;
&lt;li&gt;Moving a block of code into a function can abstract away repetitive code and increase its readability.&lt;/li&gt;
&lt;li&gt;Each function should do one thing only. Follow the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single-responsibility principle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Train yourself to think in &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html"&gt;data structure&lt;/a&gt;&amp;nbsp;conversions. The Python dictionary is very useful and can be converted to and from lists, tuples, sets, etc. I often find it more efficient to convert to a different structure to efficiently organize it. Usually I am googling things like &amp;quot;convert class object to python dictionary&amp;quot; because dictionaries are easy to work with or convert to other structures. The &lt;tt class="docutils literal"&gt;vars()&lt;/tt&gt; built-in is great for converting objects to a dictionary. For example, once you have a dictionary, you might be able to solve your problem by &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.from_dict.html"&gt;converting it to a dataframe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use only the data you need. Reading in just the essential data helps avoid memory issues and hanging programs. In &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;pandas&lt;/a&gt;, the &lt;tt class="docutils literal"&gt;usecols&lt;/tt&gt; argument in &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"&gt;pd.read_csv()&lt;/a&gt; is great for this. This creates a dataframe with 2 columns:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;df = &lt;span class="pre"&gt;pd.read_csv('emails.csv',&lt;/span&gt; &lt;span class="pre"&gt;usecols=['name','email'])&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;ol class="arabic" start="15"&gt;
&lt;li&gt;&lt;p class="first"&gt;Assume that if something is broken, it's because of something you've done. Start from the assumption that your code contains the bug and work outward by eliminating possibilities. Avoid jumping to quick conclusions. Instead, carefully consider possible reasons for why something is happening. Many times, I find my 2nd or 3rd hypothesis is actually true.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There will be times when you'll look at someone else's choices and wonder why they did things a certain way. Consider the possibility that they know more than you in this domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Beware of sequencing errors. Are your tasks, scripts or functions executing in an efficient order to reach your end goal? Look to unblock bottlenecks and correct chronological mistakes in your processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Before you send that email asking for help, go back and take another look. There's also no shame in asking for help. Be sure you proofread your email before sending.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status code 200&lt;/a&gt; does not guarantee your API request was successful. You may want to write a test to confirm success that doesn't rely on response status codes.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_3108&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;941&amp;quot;]&lt;img alt="pytest_test_results" class="alignnone size-full wp-image-3108" src="https://pythonmarketer.files.wordpress.com/2020/04/pytest_test_results.png" style="width: 941px; height: 540px;" /&gt; pytest deprecation warnings for unescaped pipes or slashes in docstrings? ¯_(ツ)_/¯[/caption]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Unfortunately, &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/05/a-collection-of-software-testing-opinions-for-python-and-beyond/"&gt;testing&lt;/a&gt; gets shunned sometimes. Make it a priority. I enjoy writing &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;pytest tests&lt;/a&gt; more than most other code. Why? Because tests confirm my scripts are working to some degree, detect bugs and provide a refactoring safety net.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Refactoring your code is a crucial step in making it better. Coming back to my code after a few weeks, months or years brings clarity, experience and a new perspective. It feels good to improve the quality of my old work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Consolidate your tasks. Bundling things can save you a bundle of time! Identify redundant patterns and remove if possible. Observe yourself while working. Any repetitive manual process can probably be automated away. Recently, I figured out how to use a &lt;a class="reference external" href="https://www.windowscentral.com/how-create-and-run-batch-file-windows-10"&gt;Windows batch file&lt;/a&gt; to instantly activate my Python &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;. It took me a few years of tediously pasting the &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; commands into command prompt every day to realize. Now it's a snap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Stack Overflow is a useful resource. But the top answers may be outdated. Check the other less popular answers sometimes. Or...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Read the documentation! An updated or more elegant solution might be there. I recently found &lt;tt class="docutils literal"&gt;os.makedirs(path, exist_ok=True)&lt;/tt&gt; in the &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.makedirs"&gt;os docs&lt;/a&gt;. I didn't know about the &lt;tt class="docutils literal"&gt;exist_ok&lt;/tt&gt; argument. I was creating folders with a more complicated alternative from &lt;a class="reference external" href="https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory"&gt;Stack Overflow&lt;/a&gt; for years. I use this way all the time now. In the same vein, if you need the local system username, the Python docs state &lt;tt class="docutils literal"&gt;`getpass.getuser()&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3.8/library/getpass.html"&gt;https://docs.python.org/3.8/library/getpass.html&lt;/a&gt;&amp;gt;`__ is preferred over &lt;tt class="docutils literal"&gt;os.getlogin()&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Write documentation explaining how to use your projects. Even if you can only muster a quick &lt;a class="reference external" href="https://en.wikipedia.org/wiki/README"&gt;README&lt;/a&gt; text file, that's better than nothing. Within your code, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt; are a nice addition. I have yet to use &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;, but it is a popular choice for generating documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Teaching others feels good and solidifies your knowledge. Writing and pair programming are great ways to improve your understanding and pass your skills along to other people. While we're on the subject of writing...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Write everything down! Your head is not good at storing information in memory. Computers are. This frees your mind to come up with new ideas rather than expending energy to remember what you've already done. It also helps you plan. I use a Notepad text file to keep a running to-do list. You could also use services like Trello or Microsoft Planner. While writing code, use comments and docstrings conservatively for quick notes, clarifications or reminders. The important thing is to write it down somewhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When editing your writing, continually ask yourself, &amp;quot;Do I need this word or phrase?&amp;quot; for every word you write.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&amp;quot;Brevity is the soul of wit.&amp;quot; - William Shakespeare (Hamlet)&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="29"&gt;
&lt;li&gt;Draw inspiration from culture, nature and professional disciplines outside of your own. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/01/28/lessons-learned-from-lost-in-space-on-netflix/"&gt;Insights can be mined from anything&lt;/a&gt;. Don't dismiss a situation as mundane without first scanning for knowledge nuggets and gems.&lt;/li&gt;
&lt;li&gt;Better solutions often come to me after gaining time and experience with a problem. Building software is an iterative cycle of adjustment towards consistently fulfilling the needs of those it serves in 100% of cases. In a perfect world, you'd never have bugs. But edge cases tend to pop up in ways you didn't think of when you first wrote a solution. There will also be projects where requirements or business rules change. Consider that possibility when you are designing your solution.&lt;/li&gt;
&lt;li&gt;It's possible to find a job that you're excited about and genuinely enjoy the work.&lt;/li&gt;
&lt;li&gt;Respect your craft, whether it's coding or another profession. A skilled carpenter needs precision, practice and focus to make something beautiful. Approach your craft with the same mindset and pride in making your best art.&lt;/li&gt;
&lt;li&gt;We all have holes in our knowledge. Be receptive to other ways of thinking. The best way to learn is from other humans. Everyone has different backgrounds and experiences. I have never used object oriented programming, classes or certain command line tools like &lt;a class="reference external" href="https://www.howtogeek.com/336775/how-to-enable-and-use-windows-10s-built-in-ssh-commands/"&gt;ssh&lt;/a&gt;. I have a loose understanding of these things but have not yet applied them to my projects. Working with paths (os and pathlib) still gives me fits sometimes. These are knowledge gaps that I want to fill in. Additionally, we don't know what we don't know. Try to illuminate the fog of your unknown.&lt;/li&gt;
&lt;li&gt;Choosing to dedicate to learning Python is among the best decisions I've made.&lt;/li&gt;
&lt;li&gt;Attitude is more important than intelligence. Anyone can learn to program, play guitar or fly an airplane. You can become an adept problem solver. Acquire an attitude to support your determination and persistence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_2981&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;959&amp;quot;]&lt;a class="reference external image-reference" href="https://www.youtube.com/watch?v=I56oFTm9UlE"&gt;&lt;img alt="brandonrhodes" class="alignnone size-full wp-image-2981" src="https://pythonmarketer.files.wordpress.com/2020/04/brandonrhodes.png" style="width: 959px; height: 541px;" /&gt;&lt;/a&gt; Brandon Rhodes: Stopping to Sharpen Your Tools - PyWaw Summit 2015[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'll leave you with the 4 P's and 4 C's from my&lt;/strong&gt; &lt;a class="reference external" href="https://www.youtube.com/watch?v=SfQYA0JQWkA"&gt;Programming for Everybody Coursera course graduation ceremony&lt;/a&gt;&lt;strong&gt;. Cultivating these principles will guide you to growing your education and finding a positive course in life:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;4 P’s:&lt;/strong&gt; Passion, Purpose, Persistence, Playfulness&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 C’s:&lt;/strong&gt; Choice, Commitment, Connection, Completion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you for reading and I hope this post helps you on your own educational journey.&lt;/p&gt;
</content><category term="coding, education, Marketing, programming, python, wisdom"></category><category term="advice"></category><category term="learning"></category><category term="problem solving"></category><category term="writing"></category></entry><entry><title>Easy Tune-ups For Your Windows Computer</title><link href="https://pythonmarketer.com/easy-wins-for-your-windows-computer.html" rel="alternate"></link><published>2020-03-22T22:59:00-05:00</published><updated>2020-03-22T22:59:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-03-22:/easy-wins-for-your-windows-computer.html</id><summary type="html">&lt;div class="section" id="this-post-covers-6-handy-windows-tools"&gt;
&lt;h2&gt;This post covers 6 handy Windows tools:&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Windows Experience Index&lt;/li&gt;
&lt;li&gt;Disk Cleanup&lt;/li&gt;
&lt;li&gt;Windows Update Troubleshooter&lt;/li&gt;
&lt;li&gt;Windows Update&lt;/li&gt;
&lt;li&gt;Microsoft Support and Recovery Assistant&lt;/li&gt;
&lt;li&gt;Disk Defragmenter&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-get-your-baseline-windows-experience-index-score"&gt;
&lt;h2&gt;&lt;strong&gt;First, get your baseline Windows Experience Index score.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;These metrics are a way to monitor your system's performance over time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to &amp;quot;Control PanelSystem and SecuritySystem …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="this-post-covers-6-handy-windows-tools"&gt;
&lt;h2&gt;This post covers 6 handy Windows tools:&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Windows Experience Index&lt;/li&gt;
&lt;li&gt;Disk Cleanup&lt;/li&gt;
&lt;li&gt;Windows Update Troubleshooter&lt;/li&gt;
&lt;li&gt;Windows Update&lt;/li&gt;
&lt;li&gt;Microsoft Support and Recovery Assistant&lt;/li&gt;
&lt;li&gt;Disk Defragmenter&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-get-your-baseline-windows-experience-index-score"&gt;
&lt;h2&gt;&lt;strong&gt;First, get your baseline Windows Experience Index score.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;These metrics are a way to monitor your system's performance over time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to &amp;quot;Control PanelSystem and SecuritySystem&amp;quot;&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Your Windows Experience Index needs to be refreshed.&amp;quot;&lt;/li&gt;
&lt;li&gt;Note the metrics you see and the last updated date. If you've never refreshed them, these are likely your computer's factory scores.&lt;/li&gt;
&lt;li&gt;Then click &amp;quot;Refresh Now&amp;quot; and note the results. These are your computer's current scores.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="check_Windows_Experience_Index" class="alignnone size-full wp-image-2780" src="http://pythonmarketer.files.wordpress.com/2020/03/f6e0a-check_windows_experience_index-e1584936945758.jpg" style="width: 729px; height: 501px;" /&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="run-disk-cleanup"&gt;
&lt;h2&gt;&lt;strong&gt;Run Disk Cleanup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The name says it all. Go to the Start menu and search 'Disk Cleanup'. Running this freed up 40 GB of C: drive space for me.&lt;/p&gt;
&lt;p&gt;disk_cleanup&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="install-os-patches-and-software-updates-withwindows-update"&gt;
&lt;h2&gt;&lt;strong&gt;Install OS patches and software updates withWindows Update.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First, troubleshoot Windows Update to fix any errors.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="tdhotingtrpot2" class="wp-image-2790 alignright" src="http://pythonmarketer.files.wordpress.com/2020/03/83836-tdhotingtrpot2-e1584941263675.jpg" style="width: 357px; height: 274px;" /&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://support.microsoft.com/en-us/help/4027322/windows-update-troubleshooter"&gt;Windows Update Troubleshooter&lt;/a&gt;is supported by Windows and may help&amp;nbsp;with updates that fail. I downloaded the troubleshooter forWindows Update and BITS, Windows'&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal"&gt;Background Intelligence Transfer System.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The troubleshooter analyzes Windows Update and tries to fix the errors it finds. After running, it provides a status update on the issues it finds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run Windows Update to upgrade your software.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows Update usually updates your software reliably. However, some updates may fail or are not triggered automatically. Installing updates, especially security patches for your operating system is typically a good idea.In my case, several Windows 7 OS security patches had not auto-updated, some from 6 months ago.&lt;/p&gt;
&lt;p&gt;check_updates&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go to your start menu and search for 'Windows Update'.&lt;/li&gt;
&lt;li&gt;I clicked 'Check online for updates from Windows Update' also.&lt;/li&gt;
&lt;li&gt;When you restart your computer, use a power cord for your laptop.&lt;/li&gt;
&lt;li&gt;I found more new updates twice after installing new updates and restarting my system.&amp;nbsp; Some updates are required before another update may be installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;windowsuptodate&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="microsoft-support-and-recovery-assistant"&gt;
&lt;h2&gt;Microsoft Support and Recovery Assistant&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Got Microsoft Errors?&lt;/strong&gt; Check out the &lt;a class="reference external" href="https://support.office.com/en-us/article/about-the-microsoft-support-and-recovery-assistant-e90bb691-c2a7-4697-a94f-88836856c72f"&gt;Microsoft Support and Recovery Assistant&lt;/a&gt;. It may help you if you're having trouble with Microsoft Office, Skype or any other Windows&amp;nbsp;tools.&lt;/p&gt;
&lt;img alt="options_recovery" class="wp-image-3225 alignnone" src="http://pythonmarketer.files.wordpress.com/2020/03/1ea73-options_recovery-e1587747001750.jpg" style="width: 465px; height: 350px;" /&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="finally-defragment-your-c-drive"&gt;
&lt;h2&gt;&lt;strong&gt;Finally, defragment your C: drive.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Defragmentation is like spring cleaning for your computer's hard disk. It optimizes your drive's data for more efficient computing and frees up space for other activities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to your start menu and search for 'Disk Defragmenter'.&lt;/li&gt;
&lt;li&gt;Click 'Analyze disk' to check your C: Drive's fragmented rate.&lt;/li&gt;
&lt;li&gt;If the fragmented rate is above 10%, &lt;a class="reference external" href="https://support.microsoft.com/en-us/help/17126/windows-7-improve-performance-defragmenting-hard-disk"&gt;Windows recommends&lt;/a&gt; to defragment your C: Drive. As you can see below, mine had a whopping 48% fragmentation rate. 😨 My poor computer had never been defragged in 2.5 years of use.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="defragment_results" class="alignnone size-full wp-image-2740" src="http://pythonmarketer.files.wordpress.com/2020/03/699fd-defragment_results-e1585007505765.jpg" style="width: 658px; height: 529px;" /&gt;
&lt;p&gt;&lt;strong&gt;46% Less Fragmented Disk Space After Two Defrags&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running the defragmenter once reduced my drive's fragmentation from 48% to 32%. Re-running the defragmenter dropped my C: drive to a 2% fragmented rate. That's more like it. 🤓&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="ng-scope docutils container"&gt;
Fragmentation makes your hard disk do extra work that can slow down your computer. Removable storage devices such as USB flash drives can also become fragmented. Disk Defragmenter in Windows rearranges fragmented data so your disks and drives can work more efficiently.&lt;/div&gt;
&lt;div class="docutils container"&gt;
Source: &lt;a class="reference external" href="https://support.microsoft.com/en-us/help/17126/windows-7-improve-performance-defragmenting-hard-disk"&gt;Ways to Improve Your Computer's Performance&lt;/a&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="my-windows-7-system-improvement-results"&gt;
&lt;h2&gt;&lt;strong&gt;My Windows 7 System Improvement Results&lt;/strong&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Raised Windows Experience Index base sub-score from 4.9 to 5.0/7.9.&lt;/li&gt;
&lt;li&gt;Added 40 GB of hard drive space thanks to Disk Cleanup.&lt;/li&gt;
&lt;li&gt;Patched operating system security vulnerabilities and all software is up to date.&lt;/li&gt;
&lt;li&gt;Fixed any misbehaving Windows products.&lt;/li&gt;
&lt;li&gt;Decreased fragmented drive space from 48% to 2%. Windows recommends keeping it under 10%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On paper, that looks great. Hopefully it means less spinning lag wheels and programs not responding when you really shoulda saved that document...&amp;nbsp; &lt;a class="reference external" href="https://www.youtube.com/watch?v=e2cjVhUrmII"&gt;We'll see&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="performance, Windows"></category><category term="maintenance"></category><category term="operating system"></category><category term="windows update"></category></entry><entry><title>Lessons Learned from "Lost in Space" on Netflix</title><link href="https://pythonmarketer.com/lessons-learned-from-lost-in-space-on-netflix.html" rel="alternate"></link><published>2020-01-28T06:39:00-06:00</published><updated>2020-01-28T06:39:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-01-28:/lessons-learned-from-lost-in-space-on-netflix.html</id><summary type="html">&lt;p&gt;Being a developer has similarities to the life of a family surviving in space. Sure, the stakes are lower when writing code versus being chased by alien life forms, but the core idea is the same. One is faced with a problem and it must be solved, with varying degrees …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Being a developer has similarities to the life of a family surviving in space. Sure, the stakes are lower when writing code versus being chased by alien life forms, but the core idea is the same. One is faced with a problem and it must be solved, with varying degrees of consequences for failure.&lt;/p&gt;
&lt;p&gt;I enjoyed watching the Robinsons solve problem after problem to stay alive in alien worlds and the vacuum of space. I believe you can learn from anything. &lt;strong&gt;So in that spirit, here are some lessons from the show for us problem solving humans:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;img alt="tayrob" class="size-full wp-image-2271 alignright" src="https://pythonmarketer.files.wordpress.com/2020/01/tayrob.jpeg" style="width: 300px; height: 168px;" /&gt;Don't panic when you're in trouble. A cool head is vitally important to your survival chances when you're in a bind. Judy demonstrates this quality in evading the&amp;nbsp;raptor-like creatures chasing her.&lt;/li&gt;
&lt;li&gt;Problems solved often lead to more problems to solve. We would be wise to anticipate what might happen if we do succeed.&lt;/li&gt;
&lt;li&gt;Be cautious when venturing into unfamiliar territories. You never know what could be there to trip you up. Which leads me to my next point...&lt;/li&gt;
&lt;li&gt;Respect nature's ability to f*ck you up. The environment you're in, other organisms, and bacteria can wreak havoc. Despite our perceived self-importance, nature is our god. We are but specks in its creation. Cases in point: the metal-dissolving virus that destroys Judy's chariot and the poisonous algae Don accidentally discovers that immobilizes him.&lt;/li&gt;
&lt;li&gt;Know when to go for broke, or when to re-group and wait to make your next move. The Robinsons spent 7 months stocking up at their new beach home. Until they suffered a setback...&lt;img alt="beach" class="alignnone size-full wp-image-2279" src="https://pythonmarketer.files.wordpress.com/2020/01/beach.jpg" style="width: 2155px; height: 1181px;" /&gt;&lt;/li&gt;
&lt;li&gt;Adapt your plan when new information becomes available or unexpected events happen. They will happen.&lt;/li&gt;
&lt;li&gt;Think of unconventional ways to use the resources you do have to fix the problem at hand. Who would have thought a spaceship could be retrofitted into a boat?&lt;/li&gt;
&lt;li&gt;Things often work 83% of the way you expect them to work. Sometimes that's enough to move on. Or maybe it buys you enough time to figure out your next move. The electrical field stalled the fleet of robots long enough for the Robinsons to realize the children should &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lord_of_the_Flies"&gt;Lord of the Flies&lt;/a&gt;&amp;quot; their way to Alpha Centauri.&lt;/li&gt;
&lt;li&gt;Question your own motivations, and be open to changing course if you are wrong. Adler realized he should help Will save Scarecrow's life after first trying to stop him. Scarecrow then exhibits this same quality when he turns against his robot comrades to save the children.&lt;/li&gt;
&lt;li&gt;Ethics and morals may conflict with each other. Was Maureen Robinson wrong for fraudulently saving her son Will? Ethically, yes. But morally, as a mother saving her son? No.&lt;/li&gt;
&lt;li&gt;Make time for your family and friends. Maureen was so busy saving the family that she didn't read Penny's book. Stop and smell the roses every once in a while. Or read your daughter's damn book.&lt;/li&gt;
&lt;li&gt;Humans are capable of both great compassion and horrible cruelty. We're running from alien robots, but sometimes we're the monsters? Cough cough Smith and Hastings... cough. Excuse me. (smh 🤦)&lt;/li&gt;
&lt;li&gt;&lt;img alt="robot" class="wp-image-2282 alignright" src="https://pythonmarketer.files.wordpress.com/2020/01/robot-1.jpeg" style="width: 358px; height: 179px;" /&gt;I'll spare you any parallels about modern artificial intelligence. The best, most grounded definition I've heard of modern AI is &amp;quot;&lt;a class="reference external" href="https://twitter.com/fchollet/status/1214392496375025664?lang=en"&gt;automated cognition&lt;/a&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;Self-sacrifice is an honorable death to save the lives of others, but can be frustrating to watch on TV. &amp;quot;Did you really have to kill yourself there?&amp;quot; - me, several times during the show 😆&lt;/li&gt;
&lt;/ol&gt;
</content><category term="entertainment, life, space"></category><category term="Lost in Space"></category><category term="Netflix"></category><category term="problem solving"></category></entry><entry><title>"Git" The Basics: A Version Control Cheat Sheet</title><link href="https://pythonmarketer.com/git-the-basics-a-git-version-control-cheat-sheet.html" rel="alternate"></link><published>2020-01-25T05:06:00-06:00</published><updated>2020-01-25T05:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2020-01-25:/git-the-basics-a-git-version-control-cheat-sheet.html</id><summary type="html">&lt;p&gt;&lt;em&gt;I am finally starting to understand&lt;/em&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git"&gt;git version control&lt;/a&gt;&lt;em&gt;! It makes developing a project on different computers easy. Some of these notes were picked up from the super informative&lt;/em&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt;&lt;em&gt;by Jake VanderPlas, author of the&lt;/em&gt;&lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/"&gt;Python Data Science Handbook&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;First,&lt;/em&gt;&lt;a class="reference external" href="https://git-scm.com/downloads"&gt;go here&lt;/a&gt;&lt;em&gt;, download …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;I am finally starting to understand&lt;/em&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git"&gt;git version control&lt;/a&gt;&lt;em&gt;! It makes developing a project on different computers easy. Some of these notes were picked up from the super informative&lt;/em&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt;&lt;em&gt;by Jake VanderPlas, author of the&lt;/em&gt;&lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/"&gt;Python Data Science Handbook&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;First,&lt;/em&gt;&lt;a class="reference external" href="https://git-scm.com/downloads"&gt;go here&lt;/a&gt;&lt;em&gt;, download and install git if you haven't yet. Alright, here are my go-to steps and commands for git:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beginning a New Project With Git&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create new repository on GitHub&lt;/li&gt;
&lt;li&gt;Add a README&lt;/li&gt;
&lt;li&gt;Add a Python gitignore&lt;/li&gt;
&lt;li&gt;Add a license (Jake V. used an MIT license)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Clone Any Repository from GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visit your new project, or any GitHub project, click the green &amp;quot;Clone or download&amp;quot; button and copy the link.&lt;/li&gt;
&lt;li&gt;In your terminal or command prompt, navigate to the directory where you want to clone your project.&lt;/li&gt;
&lt;li&gt;In terminal, enter: &lt;tt class="docutils literal"&gt;git clone PASTE_URL_HERE&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Now cd into your project folder.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Push Your Local Computer Changes to the Master Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's say you did some work on your computer and want to push the changes to GitHub. Enter these commands in terminal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git add .&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;-m&lt;/span&gt; &amp;quot;Add your commit note here&amp;quot;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git push origin master&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*Above: &lt;tt class="docutils literal"&gt;git add .&lt;/tt&gt; = stage all files in project directory for master&lt;/p&gt;
&lt;p&gt;**Substitute &lt;tt class="docutils literal"&gt;git add path\to\file\here&lt;/tt&gt; to stage only a single file to add to your master repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fetch Changes From Master Branch to Your Local Computer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I like to update my local computer with any master branch changes before beginning work on it. Enter these commands in terminal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git pull origin master&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Review Merge Conflicts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, your code may conflict with changes in the master branch. You'll find out if you try to push or pull changes and the auto-merge fails. Use &amp;quot;git status&amp;quot; to locate the files with the conflicts. Enter in your terminal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git status&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Then &lt;a class="reference external" href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line"&gt;follow these instructions&lt;/a&gt; to review the merge conflicts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/conflicts.html"&gt;Resolving Conflicts - Virtualenv Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or maybe you want to discard any local changes, then merge:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git checkout .&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git pull origin master&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Recovering from a Corrupted Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;git fsck &lt;span class="pre"&gt;--full&lt;/span&gt; &lt;span class="pre"&gt;--no-dangling&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html#recovering-from-repository-corruption"&gt;Additional Reading&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1"&gt;CS Visualized: Useful Git Commands&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lanraccoon.com/2018/8-git-commands-i-use-everyday/"&gt;8 Git Commands I Use Every Day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://who-t.blogspot.com/2009/12/on-commit-messages.html"&gt;On Commit Messages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Git-Workflows"&gt;Pandas Library Git Workflows&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, command prompt, data analysis, git, programming, software"></category><category term="github"></category><category term="terminal"></category><category term="version control"></category></entry><entry><title>Comparing Text Editors on Ubuntu: Atom, Emacs, Sublime, Vim &amp; VS Code</title><link href="https://pythonmarketer.com/comparing-text-editors-on-ubuntu-atom-emacs-sublime-vim-vs-code.html" rel="alternate"></link><published>2019-12-26T01:25:00-06:00</published><updated>2019-12-26T01:25:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2019-12-26:/comparing-text-editors-on-ubuntu-atom-emacs-sublime-vim-vs-code.html</id><summary type="html">&lt;p&gt;The text editor is a core tool for writing software. I've always used Atom. Lately, I've noticed my Atom text editor was bogging down on my Chromebook running Ubuntu 16.04. Keystrokes and mouse movements were lagging and slowing my coding down. I'm also getting low on disk space, which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The text editor is a core tool for writing software. I've always used Atom. Lately, I've noticed my Atom text editor was bogging down on my Chromebook running Ubuntu 16.04. Keystrokes and mouse movements were lagging and slowing my coding down. I'm also getting low on disk space, which may be a related issue.&lt;/p&gt;
&lt;p&gt;You'll want to choose a text editor based on how it suits your own needs. In this case, I want a light-weight, responsive editor with no lag. Bells and whistles are less important. I'm also looking to minimize disk space required.&lt;/p&gt;
&lt;p&gt;I decided to compare the &lt;a class="reference external" href="https://codeburst.io/a-beginners-guide-to-using-apt-get-commands-in-linux-ubuntu-d5f102a56fc4"&gt;apt installed&lt;/a&gt; package size of some popular editors.&amp;nbsp;First, I installed Atom, Emacs, Sublime, VS Code and Vim using the Ubuntu 16.04 terminal. You&amp;nbsp;could also consider using &lt;a class="reference external" href="https://docs.python.org/3/library/idle.html"&gt;IDLE, python's built-in text editor&lt;/a&gt; as an alternative that requires no additional software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Then I&lt;/strong&gt; &lt;a class="reference external" href="https://unix.stackexchange.com/questions/40442/which-installed-software-packages-use-the-most-disk-space-on-debian"&gt;found the below command&lt;/a&gt; &lt;strong&gt;to list all installed apt packages by package size on Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Here's the terminal output with relevant packages in Megabytes (including Firefox for comparative size):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
136    emacsen-common
366 vim-common
1071    vim-tiny
2400    vim
21648   emacs26
26870   vim-runtime
34033   sublime-text
70307   emacs26-common
193694  firefox
236965  code
607932  atom
&lt;/pre&gt;
&lt;p&gt;Atom is by far the largest package I downloaded. It is nearly three times the size of VS Code, my second largest package. The next largest was my web browser, Firefox. Most of the other packages I downloaded were considerably smaller.&lt;/p&gt;
&lt;blockquote&gt;
Side note: I also found out Ubuntu 16.04 ships with a stripped down version of Vim called &lt;a class="reference external" href="https://askubuntu.com/questions/104138/what-features-does-vim-tiny-have"&gt;vim-tiny&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Total Installed Package Sizes in Megabytes (Smallest to Largest)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of these editors have multiple packages they are dependent on.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="36%" /&gt;
&lt;col width="48%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Text Editor&lt;/td&gt;
&lt;td&gt;Total Installed Packages Size&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Packages Installed&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;29,636 MB&lt;/td&gt;
&lt;td&gt;vim, vim-common, vim-runtime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Sublime&lt;/td&gt;
&lt;td&gt;34,033 MB&lt;/td&gt;
&lt;td&gt;sublime-text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;91,955 MB&lt;/td&gt;
&lt;td&gt;emacs26-common, emacs26, emacsen-common&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VS Code&lt;/td&gt;
&lt;td&gt;236,965 MB&lt;/td&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;607,932 MB&lt;/td&gt;
&lt;td&gt;atom&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Results: Vim and Sublime win for smallest installed package size.&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Vim is the lightest-weight package of these 5 popular text editors, with Sublime not far behind. Emacs is comparable to them for usability and relatively small.&lt;/li&gt;
&lt;li&gt;Atom is nearly 3x the size of VS Code and 20x the size of Vim. Atom and VS Code are larger than the Firefox browser package, the third largest of any downloaded package on my system.&lt;/li&gt;
&lt;li&gt;I tested out all of the editors by opening the same Python file and making some edits. I found Vim, Emacs and Sublime were much more responsive than Atom and VS Code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: All Editors Are Not Created Equal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are fine editors when paired with the right machine and developer needs. In my case, a Chromebook running Linux installed with &lt;a class="reference external" href="https://github.com/dnschneid/crouton"&gt;Crouton&lt;/a&gt;, a few editors are performing faster and taking up less space. I've chosen Sublime or Emacs as my editor for this computer. One slightly annoying feature of Sublime is being prompted to buy the paid version from the trial version. Atom, Emacs, Vim and VS Code are free. Vim might be a good option if I ever decide to conquer its &lt;a class="reference external" href="https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor"&gt;notoriously high learning curve&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Bonus] Find the size of all packages matching with &amp;quot;vim&amp;quot; in their name:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | grep vim
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Terminal output from above command:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
366 vim-common
1071 vim-tiny
2400 vim
26870 vim-runtime
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.quora.com/What-is-the-best-lightweight-text-editor"&gt;What is the best lightweight text editor?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/atom/atom/issues/9755"&gt;Atom as an Editor is Too Big&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, Linux, Scripts, software, Ubuntu"></category><category term="atom"></category><category term="emacs"></category><category term="sublime"></category><category term="text editors"></category><category term="vim"></category><category term="vs code"></category></entry><entry><title>A Collection of Software Testing Opinions for Python and Beyond</title><link href="https://pythonmarketer.com/a-collection-of-software-testing-opinions-for-python-and-beyond.html" rel="alternate"></link><published>2019-12-05T03:06:00-06:00</published><updated>2019-12-05T03:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2019-12-05:/a-collection-of-software-testing-opinions-for-python-and-beyond.html</id><summary type="html">&lt;div class="section" id="i-am-a-beginner-to-testing-my-code-i-wanted-to-write-about-testing-to-better-understand-it-while-shaping-this-link-fest-masquerading-as-an-essay-i-collected-great-ideas-from-people-who-are-way-more-experienced-than-me-you-ll-find-a-few-of-my-thoughts-a-pytest-example-i-use-to-monitor-files-ideas-for-unit-testing-property-testing-test-driven-development-and-many-other-commonly-used-software-tests"&gt;
&lt;h2&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="i-am-a-beginner-to-testing-my-code-i-wanted-to-write-about-testing-to-better-understand-it-while-shaping-this-link-fest-masquerading-as-an-essay-i-collected-great-ideas-from-people-who-are-way-more-experienced-than-me-you-ll-find-a-few-of-my-thoughts-a-pytest-example-i-use-to-monitor-files-ideas-for-unit-testing-property-testing-test-driven-development-and-many-other-commonly-used-software-tests"&gt;
&lt;h2&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example I use to monitor files, ideas for unit testing, property testing, test driven development and many other commonly used software tests.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;An Introductory Rant on Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over several years as a programmer, I've slowly grasped the landscape of testing in software development. After moving beyond my first few tutorials and projects, it seemed very noisy to sort out. Examples provided are usually simple assertions that seem tough to relate to a real use case. It might be easy test the wrong things. Plus, some don't do it at all! The quality of the tests is more important than the quantity. But what makes a quality test? Where's the balance between testing every minute detail of a program and not at all?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yeah. And the worst thing that happens is that you get people that just stop&amp;nbsp;&lt;em&gt;thinking&lt;/em&gt;&amp;nbsp;about what they’re doing. “This is the principle, to always write unit tests, so I’m always going to write unit tests,” and then they’re just not thinking about how they’re spending their time, and they wind up wasting a lot of it.&lt;/p&gt;
&lt;p&gt;Joel Spolsky, &lt;a class="reference external" href="https://www.joelonsoftware.com/2009/01/"&gt;Stack Overflow Podcast #38&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementing software tests is a best practice for maintaining code, but seems ambiguous to someone who has not tested any code before. I guess the best way is to &lt;a class="reference external" href="https://github.com/iodide-project/pyodide/tree/master/test"&gt;read open source projects with test suites&lt;/a&gt;, but those can be tough to find. How do you know &lt;a class="reference external" href="https://docs.python-guide.org/writing/reading/"&gt;a good test suite&lt;/a&gt; when you see it? Maybe the maintainers went rogue and off the deep end with tests. Online, everybody says you should test your code, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Emperor%27s_New_Clothes"&gt;is the emperor wearing any clothes?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a beginner stumbling across articles on testing, these questions were tough to answer. As with most things in programming, figuring out the right question to ask is a challenge in itself. &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python-3"&gt;Codeacademy&lt;/a&gt; and &lt;a class="reference external" href="https://www.coursera.org/specializations/python"&gt;Coursera&lt;/a&gt; never mentioned anything about writing tests. On the other hand, &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django&lt;/a&gt; includes testing in its tutorial and documentation. Also, most languages come with built-in testing tools. Python has the &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why test at all? First, some solid benefits of software testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;With tests on your code in place, you can implement changes and have confidence the code still works if the tests pass. This gives developers more confidence to iterate and improve an application.&lt;/li&gt;
&lt;li&gt;Detect problems faster. Passing tests are a good indicator that your programs are actually doing what they're supposed to do. If they don't pass, you likely found a bug you might have missed otherwise.&lt;/li&gt;
&lt;li&gt;When you find a bug, you either need to amend your code, or your tests. write a test for that bug and then fix it. Either that, or you need to be amend your tests. You've just improved the quality of your test suite.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://daedtech.com/dont-learn-to-code-learn-to-automate/"&gt;Automation&lt;/a&gt;. If you are writing tests, those tests can be automated. If you are manually checking the results of your program, you're missing a chance to automate those checks away. I haven't applied it yet, but have heard the &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;Tox library&lt;/a&gt; may be useful to automate tests related to Python packaging. For more on automating tests, see this PyCon talk, &lt;a class="reference external" href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;Three Excellent Python Tools to Automate Repetitive Tasks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test Driven Development can decrease the time spent debugging code. This claim sometimes lacks empirical evidence, supporting evidence tends to be anecdotal.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;A good unit test, therefore, is one that helps enforce the contract to which the function is committed.&lt;/p&gt;
&lt;p&gt;If a good unit test breaks, the contract is violated and should be either explicitly amended (by changing the documentation and tests), or fixed (by fixing the code and leaving the tests as is).&lt;/p&gt;
&lt;p&gt;A good unit test is also&amp;nbsp;&lt;em&gt;strict&lt;/em&gt;. It does its best to ensure the output is valid. This helps it catch more bugs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Moshe Zadka, &lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pytest and Unit Testing in Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is where the Python hits the pavement. Unit tests are generally liked, although some prefer property tests or integration tests because they think the scope of unit tests is too narrow. The &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library is Python's default testing framework. However nowadays, &lt;a class="reference external" href="https://docs.pytest.org/en/latest/contents.html"&gt;pytest&lt;/a&gt; seems to be the preferred unit testing framework for Python. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; is another popular framework I've read about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pytest Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://realpython.com/interview-brian-okken/"&gt;Interview with the author of Pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;Pytest Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/7"&gt;Pytest Features That You Need In Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://love-python.blogspot.com/2017/10/table-driven-unit-test-in-python.html"&gt;Table Driven Unit Testing With pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Pf1ADyUKOrE"&gt;Reproducible Data Analysis in Jupyter, Part 6/10: Unit Testing with PyTest&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Tests start to lose signal when &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;Mock&lt;/a&gt; becomes routine instead of a reluctant workaround. - Brandon Rhodes, &lt;a class="reference external" href="http://S0No2zSJmks"&gt;When Python Practices Go Wrong&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing in Python \ General Unit Testing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Testing"&gt;Testing Conventions for the Pandas Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kanoki.org/2019/11/18/how-to-create-dataframe-for-testing/"&gt;How to Create a Dataframe for Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing//"&gt;Improve Your Python: Understanding Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kbroman.org/blog/2015/12/07/write-unit-tests/"&gt;Write Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2013/12/08/tdd-unit-tests-and-the-passage-of-time/"&gt;Writing Unit Tests for Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2014/02/19/5-unit-testing-mistakes/"&gt;5 Unit Testing Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/unit-tests-are-not-tests/"&gt;Unit Tests Are Not Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hakibenita.com/the-best-new-feature-in-unittest-you-didnt-know-you-need"&gt;The Best New Feature in unittest You Didn't Know You Need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html"&gt;The Flawed Theory Behind Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django Introduction to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/python-doctests/"&gt;Python Doc Tests&lt;/a&gt; Turn docstrings into tests, unique to Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;I think&amp;nbsp;&lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;hypothesis&lt;/a&gt;&amp;nbsp;is probably underrated—some libraries are hesitant to incorporate it into their testing frameworks, but I think the property-based testing has real potential to catch scenarios humans would have a hard time anticipating, or at least that would take a long time to properly plan for. I find that hypothesis almost always adds a few useful test cases I hadn’t thought of that will require special error handling, for example.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2020/01/13/pydev-of-the-week-tyler-reddy/"&gt;Tyler Reddy&lt;/a&gt;, SciPy Release Manager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Integration \ Property Tests&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.juliobiason.me/books/things-i-learnt/integration-tests/"&gt;Unit Tests Are Good, Integration Tests Are Gooder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/pbt-contracts/"&gt;PROPERTY TESTS + CONTRACTS = INTEGRATION TESTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contract-examples/"&gt;Finding Property Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contracts/"&gt;Contracts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditional, or example-based, testing specifies the behavior of your software by writing examples of it—each test sets up a single concrete scenario and asserts how the software should behave in that scenario. Property-based tests take these concrete scenarios and generalize them by focusing on which features of the scenario are essential and which are allowed to vary. This results in cleaner tests that better specify the software’s behavior—and that better uncover bugs missed by traditional&amp;nbsp;testing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;David Maciver, &lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assertions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assertions are generally accepted as welcome additions to your code.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.regehr.org/archives/1091"&gt;Use of Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.squarefree.com/2014/02/03/fuzzers-love-assertions/"&gt;Fuzzers Love Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/assert.html#assert"&gt;pytest Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, the safety and restraints that these code carabiners provide actually give you &lt;strong&gt;more freedom&lt;/strong&gt; to take risks in your coding. If you want to try out some risky feature, refactoring, or external library, you know something is wrong as soon as one of your assertions or tests fail and can undo back to an earlier working state.&lt;/p&gt;
&lt;p&gt;Phillip J. Guo, &lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eventually, you'll discover the evangelists preaching Test Driven Development. There are certain discussions which polarize us in the software development world, such as the appropriate scenarios to deploy this system of development.&lt;/p&gt;
&lt;p&gt;Opinions vary widely on the merits and appropriate application of TDD. I'm admittedly skeptical but do see the merits of TDD. But which flavor? Where do unit tests and integration tests fit in? How many tests should I write? What exactly should I be testing? &lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;This essay&lt;/a&gt; claims anyone pair programming software with an expected life of 3 or more years should use Test Driven Development.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2019/09/29/when-tdd-is-not-a-good-fit/"&gt;When TDD is Not a Good Fit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neverworkintheory.org/2016/10/05/test-driven-development.html"&gt;Test Driven Development vs. Test Last Development&lt;/a&gt; [Study]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=DQBf6li1hww"&gt;Why TDD Is Crap&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/why-tdd-isnt-crap/"&gt;Why TDD Isn't Crap&lt;/a&gt; [Response Blog to Video]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.arp242.net/testing.html"&gt;Testing Isn't Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;Is Pair Programming + TDD worth it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Test Driven Development is a tool for continuously evaluating hypotheses.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?time_continue=170&amp;amp;v=UOOuW5tqT8M&amp;amp;feature=emb_logo"&gt;James Shore, Assert(JS) Con 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;General Testing Ideas and Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python-guide.org/writing/tests/"&gt;Testing Your Code&lt;/a&gt;, The Hitchhiker's Guide to Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.liw.fi/posts/2019/06/29/dijkstra_was_only_partially_correct_about_testing/"&gt;The Point of Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://rachelbythebay.com/w/2013/01/30/test/"&gt;Connecting Bug Fixing to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.jamesshore.com/In-the-News/Thinking-In-Tests.html"&gt;Thinking in Tests&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.drmaciver.com/2015/04/some-empirically-derived-testing-principles/"&gt;Some empirically derived testing principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://danluu.com/tests-v-reason/"&gt;Testing Vs. Informal Reasoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.nelhage.com/2016/12/how-i-test/"&gt;How I Write Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Xu5EhKVZdV8"&gt;Stop Mocking, Start Testing&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;a class="reference external" href="https://python-guide-es.readthedocs.io/es/latest/writing/reading.html"&gt;Each one of these projects is a paragon of Python coding.&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/development/what-its-like-to-be-a-developer-at/"&gt;What it's Like to Be a Developer at...&lt;/a&gt;&amp;nbsp;[Testing Practices Described]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;Hammock Driven Development&lt;/a&gt; [YouTube] Not so much testing focused, but including because I really enjoyed this talk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other common tests types:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unit test: when it fails, it tells you what piece of your code needs to be fixed.&lt;/p&gt;
&lt;p&gt;Integration test: when it fails, it tells you that the pieces of your application are not working together as expected.&lt;/p&gt;
&lt;p&gt;Acceptance test: when it fails, it tells you that the application is not doing what the customer expects it to do.&lt;/p&gt;
&lt;p&gt;Regression test: when it fails, it tells you that the application no longer behaves the way it used to.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/7672511/unit-test-integration-test-regression-test-acceptance-test"&gt;Mathias, Stack Overflow Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing maturity level progression:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No tests&lt;/li&gt;
&lt;li&gt;Occasional, slow, unreliable tests&lt;/li&gt;
&lt;li&gt;Semi-comprehensive integration tests&lt;/li&gt;
&lt;li&gt;Fast, comprehensive unit tests comprise the bulk of testing&lt;ul&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Composable subsystem design&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Real-time test feedback (ideally integrated into the editor)&lt;/li&gt;
&lt;li&gt;Tests are extremely reliable or&amp;nbsp;&lt;a class="reference external" href="http://andyfriesen.com/2015/06/17/testable-io-in-haskell.html"&gt;guaranteed reliable by the type system&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;With tooling that tracks the reliability of tests and provides that feedback to authors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fuzzing, statistically automated microbenchmarking, rich testing frameworks for every language and every platform, and a company culture of writing the appropriate number of unit tests and high-value integration tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chadaustin.me/2019/11/two-years-at-dropbox/"&gt;ChadAustin.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I recently wrote my first unit tests with pytest. Below is a script named test_file_date.py. It tests if the day of month of the most recently changed file in a directory matches today's day. To install pytest, enter into command prompt or terminal:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pytest&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_file_date.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import glob
import os
from datetime import datetime, date

# The dir_query format is for a Windows path with Unix style pattern matching.
def test_csv_date_equals_today():
    dir_query = 'C:\\Users\\your_username\\Desktop\\*.csv' # specify csv extension and folder
    file_path = sorted(glob.iglob(dir_query), key=os.path.getmtime)[-1] # get most recent file
    file_timestamp = os.path.getmtime(file_path)
    file_date = datetime.fromtimestamp(file_timestamp)
    print(file_date.day)
    print(date.today().day)
    assert file_date.day == date.today().day
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Run the test with pytest by entering:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;pytest test_file_date.py&lt;/tt&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;I write programs for personal productivity and to &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;automate processes&lt;/a&gt; at my company. The scope of problems my code solves has grown with my programming ability. I'm now reaching the point where I can apply tests to my advantage. However, sometimes I'll write a quick-hitter script for which I can't justify writing tests. Beyond those cases, testing can help if you pick the right style for your project. More so for recurring, automated processes.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It feels pretty cool when your tests run and you know with more certainty whether a part of your program is getting the job done or not. After setting up my first test with pytest, I have leveled up to novice tester, instead of blissfully not knowing what I don't know about testing. That's a step in the right direction.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, productivity, programming, python, software testing"></category><category term="pytest"></category><category term="software development"></category><category term="test driven development"></category></entry><entry><title>Inserting New Rows Into A Microsoft Access Database With Python and pyodbc</title><link href="https://pythonmarketer.com/inserting-new-records-into-a-microsoft-access-database-with-python.html" rel="alternate"></link><published>2019-11-30T00:28:00-06:00</published><updated>2019-11-30T00:28:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2019-11-30:/inserting-new-records-into-a-microsoft-access-database-with-python.html</id><summary type="html">&lt;p&gt;I recently automated the loading of data into a Microsoft Access database with &lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki"&gt;pyodbc&lt;/a&gt;, a Python library for connecting to databases. ODBC stands for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_Database_Connectivity"&gt;Open Database Connectivity&lt;/a&gt;. It can be used for a variety of Database Management Systems outside of Access also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;install libraries with pip&lt;/a&gt;&lt;strong&gt;. Enter in terminal …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently automated the loading of data into a Microsoft Access database with &lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki"&gt;pyodbc&lt;/a&gt;, a Python library for connecting to databases. ODBC stands for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_Database_Connectivity"&gt;Open Database Connectivity&lt;/a&gt;. It can be used for a variety of Database Management Systems outside of Access also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;install libraries with pip&lt;/a&gt;&lt;strong&gt;. Enter in terminal or command prompt:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pyodbc&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Next, check available Microsoft Access drivers on your computer. Enter the below statements into the Python interpreter:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python
&amp;gt;&amp;gt;&amp;gt; import pyodbc
&amp;gt;&amp;gt;&amp;gt; [x for x in pyodbc.drivers() if x.startswith('Microsoft Access Driver')]
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Drivers for&lt;/strong&gt; &lt;strong&gt;Access &amp;amp; Many Other Data Sources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The driver is the engine that allows you to connect to a specific type of database. The drivers available vary depending on your machine.&lt;/p&gt;
&lt;p&gt;The two most common drivers for Access are Microsoft Access Driver (&lt;em&gt;.mdb) and Microsoft Access Driver (&lt;/em&gt;.mdb, *.accdb). My computer only had *.mdb, which has been deprecated. My Access database was a .mdb file, so I was able to use this driver as shown below. Read more on Access drivers &lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-Microsoft-Access"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Drivers exist for all major DBMSs, many other data sources like address book systems and Microsoft Excel, and even for text or comma-separated values (CSV) files.&amp;quot;&amp;nbsp; - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_Database_Connectivity"&gt;Wikipedia&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Database Data Types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I set all of the field data types to &amp;quot;Short Text&amp;quot; because I'm passing strings as SQL parameters below. Uploading as other data types may require additional formatting. To edit the data types of your table, open the table and select &amp;quot;Design View&amp;quot; under the &amp;quot;Home&amp;quot; tab. It got the job done for me!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inserting new rows into a Microsoft Access Database:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import pandas as pd
import pyodbc


def df_to_row_tuples(df):
    &amp;quot;&amp;quot;&amp;quot;
    use list comprehension to format df rows as a list of tuples:
    rows = [('Garfield','Orange','Eat'),('Meowth','White','Scratch')]
    &amp;quot;&amp;quot;&amp;quot;
    df = df.fillna('')
    rows = [tuple(cell) for cell in df.values]
    return rows

&amp;quot;&amp;quot;&amp;quot;
Rows are not added to DB until they are committed.
Pass each row tuple as a SQL parameter (?,?,?).
cursor.execute docs: https://www.mcobject.com/docs/Content/Programming/Python/Classes/Cursor/execute.htm
&amp;quot;&amp;quot;&amp;quot;
conn = pyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Add_Path\To_DB\Here\Your_DB.mdb;')
cursor = conn.cursor()
sql = ''' INSERT INTO Cats (Name, Color, Move)
          VALUES(?,?,?) '''
df = pd.read_csv('Cat Data.csv')
rows = df_to_row_tuples(df)
for row in rows:
    cursor.execute(sql, row)
conn.commit()
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running the above in command prompt uses pyodbc and SQL to add dataframe rows to a Microsoft Access DB table named &amp;quot;Cats&amp;quot;. Passing each row as a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/#paramstyle"&gt;SQL parameter&lt;/a&gt; has two benefits:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It handles strings with single quotes (') and loads them to the DB.&lt;/li&gt;
&lt;li&gt;It protects against &lt;a class="reference external" href="https://www.acunetix.com/websitesecurity/sql-injection/"&gt;SQL injection&lt;/a&gt; attacks.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Access Limitation Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Access topped out just shy of 10 million rows in my use case, when records stopped getting added to my database. So keep that in mind if you're thinking about using Access to store your data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://datatofish.com/insert-ms-access-python/"&gt;Insert Values into MS Access Table using Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki"&gt;pyodbc documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-3-proof-of-concept-connecting-to-sql-using-pyodbc?view=sql-server-ver15"&gt;Microsoft Documentation pyodbc example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.mcobject.com/docs/Content/Programming/Python/Classes/Cursor.htm"&gt;The Python Cursor Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.psycopg.org/docs/cursor.html"&gt;Psycopg Cursor Class Documentation&lt;/a&gt;&lt;/p&gt;
</content><category term="automation, data, Databases, excel, ODBC, pandas, python, Windows"></category><category term="Access"></category><category term="Microsoft"></category><category term="productivity"></category><category term="programming"></category></entry><entry><title>Automated Python With Windows Task Scheduler</title><link href="https://pythonmarketer.com/automated-python-with-windows-task-scheduler.html" rel="alternate"></link><published>2018-11-25T19:44:00-06:00</published><updated>2018-11-25T19:44:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2018-11-25:/automated-python-with-windows-task-scheduler.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;So you want to run your Python scripts automatically, but how?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had heard of several popular scheduling libraries in Python like &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt;, &lt;a class="reference external" href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, and&amp;nbsp;&lt;a class="reference external" href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;. One of my requirements is to run the python file &amp;quot;in the background&amp;quot;, not in command prompt or an open window.&lt;/p&gt;
&lt;p&gt;Enter Windows Task …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;So you want to run your Python scripts automatically, but how?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had heard of several popular scheduling libraries in Python like &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt;, &lt;a class="reference external" href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, and&amp;nbsp;&lt;a class="reference external" href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;. One of my requirements is to run the python file &amp;quot;in the background&amp;quot;, not in command prompt or an open window.&lt;/p&gt;
&lt;p&gt;Enter Windows Task Scheduler, the de facto scheduler on Windows 7 computers. I have&amp;nbsp; scheduled a few scripts and it is working like a charm. In this post, I will schedule an example script to clean up my desktop at the beginning of each day. I have a habit of accumulating many Excel files there throughout the workday. This example automatically moves them into a folder.&lt;/p&gt;
&lt;p&gt;Other Windows scheduling alternatives worth mentioning include &lt;a class="reference external" href="http://thepythoncorner.com/dev/how-to-create-a-windows-service-in-python/"&gt;creating a Windows service&lt;/a&gt;, or using &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/taskschd/schtasks"&gt;schtasks&lt;/a&gt; if you prefer the command line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's how to schedule a Python script to run:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Search for Windows Task Scheduler in the start menu. Then select &amp;quot;Task Scheduler Library&amp;quot; to see all of the tasks Windows is running automatically.&lt;/li&gt;
&lt;li&gt;In the right toolbar, select &amp;quot;Create Basic Task&amp;quot; and give it a name and description. Note: I selected &amp;quot;Configure for: Windows 7, Windows Server 2008 R2&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="general" class="wp-image-1577 alignright" src="https://pythonmarketer.files.wordpress.com/2018/11/general.png" style="width: 481px; height: 361px;" /&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Set the time and frequency that the program will run in the &amp;quot;Triggers&amp;quot; tab.&lt;/li&gt;
&lt;li&gt;Under the &amp;quot;Actions&amp;quot; tab, select &amp;quot;Start a Program&amp;quot; from the dropdown. Under &amp;quot;Program/Script&amp;quot;, enter the path to your Python.exe file. I set mine to a Python executable located within my &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;, but yours might be found wherever you have Python installed.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\36env\Scripts\python.exe
&lt;/pre&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Under &amp;quot;Add arguments (optional)&amp;quot;, add the path to your .py script, within quotes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;C:\Users\your_username\Desktop\36env\clean_desktop_excels.py&amp;quot;
&lt;/pre&gt;
&lt;img alt="actions" class="alignnone size-full wp-image-1578" src="http://pythonmarketer.files.wordpress.com/2018/11/bd0a9-actions-e1543177551739.png" style="width: 448px; height: 236px;" /&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Select additional conditions and settings as desired, such as &amp;quot;Wake the computer to run this task&amp;quot; and &amp;quot;Run with highest privileges&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am enjoying this simple, easy and convenient scheduling manager for Windows. I figured most of this out thanks to &lt;a class="reference external" href="https://www.esri.com/arcgis-blog/products/product/analytics/scheduling-a-python-script-or-model-to-run-at-a-prescribed-time/?rmedium=redirect&amp;amp;rsource=/esri/arcgis/2013/07/30/scheduling-a-scrip"&gt;this blog&lt;/a&gt;. Below is my script to clean my desktop each morning by moving my Excel files into a folder, using Python's stock &lt;a class="reference external" href="https://docs.python.org/3/library/shutil.html"&gt;shutil&lt;/a&gt; and os libraries. Set it and forget it, ya know what i mean? :D&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from shutil import move
import getpass
import os

&amp;quot;&amp;quot;&amp;quot;
Desktop Spreadsheet File Cleaner - Python Marketer
https://atomic-temporary-107329037.wpcomstaging.com/2018/11/25/automated-python-with-windows-task-scheduler/
&amp;quot;&amp;quot;&amp;quot;
# Get all Desktop files and folders
src_directory = f'C:\\Users\\{getpass.getuser()}\\Desktop'
dir_items = os.listdir(src_directory)
excel_files = [item for item in dir_items \
                if '.csv' in item or '.xls' in item]

dst = f'C:\\Users\\{getpass.getuser()}\\Desktop\\Current_Month_Excels'
os.makedirs(dst, exist_ok=True)
for xl in excel_files:
    path_to_file = src_directory + xl
    move(path_to_file, dst)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc721846(v=ws.11)?redirectedfrom=MSDN"&gt;Troubleshooting Windows Task Scheduler&lt;/a&gt; - Windows Documentation&lt;/p&gt;
</content><category term="automation, productivity, programming, python, Windows"></category><category term="coding"></category><category term="organization"></category></entry><entry><title>Gooey GUI for Python Scripts</title><link href="https://pythonmarketer.com/gooey-gui-for-python-scripts.html" rel="alternate"></link><published>2018-08-25T16:32:00-05:00</published><updated>2018-08-25T16:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2018-08-25:/gooey-gui-for-python-scripts.html</id><summary type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of are Tkinter (comes in the standard library), wxPython, PyQT, easygui, &lt;a class="reference external" href="https://github.com/hoffstadt/DearPyGui"&gt;DearPyGui&lt;/a&gt; and PySimpleGUI. I &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/29/tkinter-and-python-libraries/"&gt;explored Tkinter&lt;/a&gt; back when I first got into Python. It was more intricate and offered more control over the look of your app, and took longer to pick up. Gooey is more of a pre-packaged GUI library.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/chriskiehl/Gooey"&gt;Gooey Github page&lt;/a&gt; was most useful to me and helped me to do what I needed. The script posted &lt;a class="reference external" href="http://pbpython.com/pandas-gui.html"&gt;in this blog&lt;/a&gt; helped as well. I needed to enable a human to supply three files and enter a number. Gooey was a good match for this. The library has two branches:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;some basic widgets piggyback off the &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2015/10/08/a-intro-to-argparse/"&gt;argparse&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;another part of the library uses a function called the GooeyParser. The GooeyParser offers more advanced widgets, like a file chooser. This was exactly what I was looking to use to pull in files for my script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Installing Gooey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Argparse comes stock with Python. You can install Gooey via the &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip installer&lt;/a&gt;. Open command prompt or terminal and enter:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install Gooey&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Below is a basic argparse/Gooey combination script. The argparse version offers a handful of widgets such as checkboxes and dropdown, but I had trouble getting them to work with the GooeyParser (used in 2nd script).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from argparse import ArgumentParser
from gooey import Gooey

&amp;#64;Gooey(program_name='Email Campaign Reporting Generator', default_size=(575, 600))
def get_args():
    &amp;quot;&amp;quot;&amp;quot;Demonstrating python's vars built-in to store arguments in a python dict.&amp;quot;&amp;quot;&amp;quot;
    parser = ArgumentParser(description='A simple argument parser', epilog='This is where you might put example usage')
    parser.add_argument('Name', action='store', required=True, help='Help text for option X')
    parser.add_argument('Email', help='Help text for option Y', default=False)
    parser.add_argument('Campaign Number', help='Help text for option Z', type=int)
    parser.add_argument('Campaign Segment', choices=['A', 'B','All'], default='a', nargs='?')
    user_inputs = vars(parser.parse_args())
    print(user_inputs)
    name = user_inputs['Name']
    campaign_number = user_inputs['Campaign Number']
    return parser.parse_args()

if __name__ == '__main__':
    get_args()
&lt;/pre&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Side note: Check out Python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#vars"&gt;vars() built-in&lt;/a&gt; function above. It returns the input data as a dictionary called user_inputs. Then we can get the values via the dictionary's keys. Pretty nifty!&lt;/blockquote&gt;
&lt;p&gt;The &amp;#64;Gooey() part of the code is an advanced function known as a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0318/"&gt;decorator in Python&lt;/a&gt;. Put simply, decorators are functions that modify the function to which they are attached.&lt;/p&gt;
&lt;p&gt;Below is my script that uses the more advanced GooeyParser for its &amp;quot;FileChooser&amp;quot; widget. Gooey allows you to group widgets together and set how many widgets per line with the gooey_options={} parameter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from gooey import Gooey, GooeyParser

&amp;#64;Gooey(program_name='Email Campaign Reporting Generator', default_size=(575, 600))
def get_args():
    &amp;quot;&amp;quot;&amp;quot;
    Adding two argument groups, each accepting two arguments.
    Using gooey_options to set layout.
    &amp;quot;&amp;quot;&amp;quot;
    parser = GooeyParser(description='Export campaign report spreadsheets and upload below.')
    top_group = parser.add_argument_group(gooey_options={'show_border': False,'columns': 1})
    top_group.add_argument('Contact List', help='Upload Send List (.xlsx)', widget='FileChooser')
    top_group.add_argument('Opens List', help='Upload Opens List (.xlsx)', widget='FileChooser')
    top_group.add_argument('Unsubscribe List', help='Upload Unsubscribe List (.xlsx)', widget='FileChooser')
    bottom_group = parser.add_argument_group(gooey_options={'show_border': False,'columns': 1, 'required':False})
    bottom_group.add_argument('Campaign ID', action='store', help=&amp;quot;Number found in the Campaign 'Reports' tab&amp;quot;)
    bottom_group.add_argument('Campaign Segment', action='store', help='Enter A, B, or All. All lists supplied must match segment.')
    user_inputs = vars(parser.parse_args())
    name = user_inputs['Name']
    return parser.parse_args()

if __name__ == '__main__':
    get_args()
&lt;/pre&gt;
&lt;p&gt;Overall, Gooey knows what it wants to be, an easy to use GUI framework for Python. It does it well. Here's a screenshot of my program's shiny GUI:&lt;/p&gt;
&lt;img alt="gooey_gui_shot_2" class="alignnone size-full wp-image-1431" src="https://pythonmarketer.files.wordpress.com/2018/08/gooey_gui_shot_2.png" style="width: 578px; height: 603px;" /&gt;
&lt;p&gt;Now that I have a GUI on top of my program and it delivers the expected output file, I'm hoping to take it one step further by packaging it up as a Windows .exe file. This would allow it to run as a desktop app on any Windows computer without the need to install Python or library dependencies. I've only begun exploring options to do this but a few libraries I've heard of are pyinstaller, cx_Freeze and Py2Exe. Updates coming if I figure it out. Cheers :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I did figure out how to compile my Gooey app to a Windows application with Pyinstaller. You can&amp;nbsp;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/20/packaging-python-as-a-windows-app/"&gt;read more on how I did it here&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, data, product development, programming, software"></category><category term="gooey"></category><category term="gui"></category><category term="python"></category><category term="software development"></category></entry><entry><title>Findstr, RegEx File Searches for Windows</title><link href="https://pythonmarketer.com/findstr-aka-grep-for-windows.html" rel="alternate"></link><published>2018-07-15T19:52:00-05:00</published><updated>2018-07-15T19:52:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2018-07-15:/findstr-aka-grep-for-windows.html</id><summary type="html">&lt;p&gt;Findstr is the Windows alternative to GREP, which runs on the &lt;a class="reference external" href="https://www.howtogeek.com/182649/htg-explains-what-is-unix/"&gt;Unix operating system&lt;/a&gt;. Findstr searches files with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expressions&lt;/a&gt; and seems useful for string matching within files and directories.&amp;nbsp; It is one of over &lt;a class="reference external" href="https://www.lifewire.com/list-of-command-prompt-commands-4092302"&gt;280 command prompt commands&lt;/a&gt;. Here's the official&amp;nbsp;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/findstr"&gt;Windows Documentation&lt;/a&gt;&amp;nbsp;and some&amp;nbsp;&lt;a class="reference external" href="https://www.mkyong.com/linux/grep-for-windows-findstr-example/"&gt;Linux vs. Windows Examples …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Findstr is the Windows alternative to GREP, which runs on the &lt;a class="reference external" href="https://www.howtogeek.com/182649/htg-explains-what-is-unix/"&gt;Unix operating system&lt;/a&gt;. Findstr searches files with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expressions&lt;/a&gt; and seems useful for string matching within files and directories.&amp;nbsp; It is one of over &lt;a class="reference external" href="https://www.lifewire.com/list-of-command-prompt-commands-4092302"&gt;280 command prompt commands&lt;/a&gt;. Here's the official&amp;nbsp;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/findstr"&gt;Windows Documentation&lt;/a&gt;&amp;nbsp;and some&amp;nbsp;&lt;a class="reference external" href="https://www.mkyong.com/linux/grep-for-windows-findstr-example/"&gt;Linux vs. Windows Examples.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Windows announced that &lt;a class="reference external" href="https://hackaday.com/2019/06/10/windows-10-goes-to-shell/"&gt;Grep and several other Unix command line tools will be added to Windows 10&lt;/a&gt;. This is a new alternative to findstr.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This findstr command returns all lines containing an '&amp;#64;' in a text file.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
findstr &amp;#64; test.txt
&lt;/pre&gt;
&lt;img alt="findstr Emails" class="alignnone size-full wp-image-1406" src="https://pythonmarketer.files.wordpress.com/2018/07/findstr-emails.png" style="width: 602px; height: 48px;" /&gt;
&lt;p&gt;&lt;strong&gt;I was happy to see Findstr's convenient help menu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
findstr -?
&lt;/pre&gt;
&lt;img alt="findstr_help" class="alignnone size-full wp-image-1408" src="https://pythonmarketer.files.wordpress.com/2018/07/findstr_help.png" style="width: 657px; height: 603px;" /&gt;
&lt;p&gt;Regular expressions are so powerful. It's nice to have this utility within the command prompt. I am hoping to get to know some of the other 280 command prompt commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I've previously explored regex with Python. This Python regex example finds all words in a text file containing '&amp;#64;' symbols:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re


# read the file to string + regex email search
with open('test.txt', 'r') as fhand:
    string = fhand.read()
    # this regex returns a python list of emails:
    emails = re.findall('(\S*&amp;#64;\S+)', string)
    print(emails)
&lt;/pre&gt;
&lt;img alt="findall_python" class="alignnone size-full wp-image-1405" src="https://pythonmarketer.files.wordpress.com/2018/07/findall_python.png" style="width: 633px; height: 173px;" /&gt;
&lt;p&gt;For more command prompt nuggets, check out my more recent post: &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/05/06/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection/"&gt;Exploring Windows Command Line Tools, Batch Files and Remote Desktop Connection&lt;/a&gt;.&lt;/p&gt;
</content><category term="command prompt, data, python, Windows"></category><category term="programming"></category><category term="regex"></category></entry><entry><title>list(cool_python_things)</title><link href="https://pythonmarketer.com/blog_post-listcool_python_things.html" rel="alternate"></link><published>2018-03-24T19:38:00-05:00</published><updated>2018-03-24T19:38:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2018-03-24:/blog_post-listcool_python_things.html</id><summary type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project contains&amp;nbsp;&lt;strong&gt;pytudes&lt;/strong&gt;—Python programs for perfecting programming skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt; - Fuzzy string matching python library, written …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project contains&amp;nbsp;&lt;strong&gt;pytudes&lt;/strong&gt;—Python programs for perfecting programming skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt; - Fuzzy string matching python library, written by SeatGeek&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://soundcloud.com/talkpython"&gt;Talk Python to Me&lt;/a&gt; - Python podcast&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.oreilly.com/programming/free/?imm_mid=0e20a9&amp;amp;cmp=em-prog-na-na-afterp_triggered_email_programming_resources"&gt;Free Programming Books from O'Reilly&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="coding, pandas, programming"></category><category term="computers"></category><category term="python"></category></entry><entry><title>Python File Handling Basics</title><link href="https://pythonmarketer.com/python-file-handling-basics.html" rel="alternate"></link><published>2018-01-14T18:53:00-06:00</published><updated>2018-01-14T18:53:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2018-01-14:/python-file-handling-basics.html</id><summary type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file. &lt;a class="reference external" href="https://github.com/BurntSushi/nfldb/wiki/Python-&amp;amp;-pip-Windows-installation"&gt;You need to have Python 3 installed&lt;/a&gt;. In the same folder as your .py file, save a .txt file with some words in it. Alright, let's write some code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
file_name = input(&amp;quot;Enter your file name. e.g. words.txt&amp;quot;)
file_handle = open(file_name, &amp;quot;r&amp;quot;)
lines = file_handle.readlines()
print (lines)
file_handle.close()
&lt;/pre&gt;
&lt;p&gt;In line 1, we ask the user to enter their file name with Python's raw_input function. When the program runs, the user enters their text file name with extension. This line stores the name in a variable called file_name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 2,&lt;/strong&gt; we open your text file and store it in a variable I have named file_handle. Think of the file handle as a bridge between your code and the text file. Quick point about the 'r' above: that tells the program to open the file in &amp;quot;Read&amp;quot; mode. There are several different file modes in programming. Some modes are just for reading an existing file, some are just for writing a new file, and some are capable of both. &lt;a class="reference external" href="https://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w/16208298"&gt;This Stack Overflow post&lt;/a&gt; is well written and details the differences between file modes. Once established, the file handle allows you to read the file's contents or write new contents to the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 3,&lt;/strong&gt;&amp;nbsp;we are calling the .readlines() method on our file handle. This method takes the file contents and stores them, line by line, into a list named &amp;quot;lines&amp;quot;. An alternative method is .read(), which opens the file and stores its contents as one string. Try switching this out in place of&amp;nbsp; .readlines() to check out the difference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4,&lt;/strong&gt; we are printing the stored lines to show them to the user. We now have the file contents, ready to be used however we please.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 5&lt;/strong&gt;, we are closing the file.&lt;/p&gt;
&lt;p&gt;Below, we are going to write a new file. Let's pretend we've done something worth saving with our lines and now want to save them to a new file. We will represent this as the variable &amp;quot;output&amp;quot; in the first line below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
file_name = input(&amp;quot;Enter any file name.&amp;quot;)
save_file = open(file_name, &amp;quot;w&amp;quot;)
save_file.write(&amp;quot;Here is some text to save in a file.&amp;quot;)
save_file.close()
&lt;/pre&gt;
&lt;p&gt;In line 1, we are using Python's input function to ask the user what to name the file and storing it in a variable named file_name.&lt;/p&gt;
&lt;p&gt;In line 2,&amp;nbsp; we are calling the open function again that we used in the first example, but this time, notice the &amp;quot;w&amp;quot;. This indicates that we are opening the file in &amp;quot;write&amp;quot; mode.&lt;/p&gt;
&lt;p&gt;In line 3, we are calling the .write() method on our file handle, named save_file, and passing it our text to be saved in our new file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4&lt;/strong&gt;, we are closing the file, completing the creation of our new file in the same folder as our .py program file.&lt;/p&gt;
&lt;p&gt;Your program is now ready to be run. Double-click your .py file to execute it.&lt;/p&gt;
&lt;p&gt;Before learning Python, file operations were a mystery to me. It took me a while to understand this clearly, and I wanted to share. Once you master these basic file operations, programming gets to be a lot more fun. Do try it out for yourself :D&lt;/p&gt;
</content><category term="coding, programming"></category><category term="data"></category><category term="python"></category><category term="software"></category></entry><entry><title>Creating A Simple Website and Server Environment with Node.js and Express.js</title><link href="https://pythonmarketer.com/creating-a-simple-website-and-server-environment-with-node-js-and-express-js.html" rel="alternate"></link><published>2017-08-09T21:16:00-05:00</published><updated>2017-08-09T21:16:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2017-08-09:/creating-a-simple-website-and-server-environment-with-node-js-and-express-js.html</id><summary type="html">&lt;p&gt;Here is what I have deduced is the fastest way to get an app up and running with Node.js. This requires some familiarity with using the command line.&amp;nbsp;I completed the Codeacademy course &amp;quot;&lt;a class="reference external" href="https://www.codecademy.com/learn/learn-the-command-line"&gt;Learn The Command Line&lt;/a&gt;&amp;quot; before beginning with Node.js. I think it helped me better understand …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is what I have deduced is the fastest way to get an app up and running with Node.js. This requires some familiarity with using the command line.&amp;nbsp;I completed the Codeacademy course &amp;quot;&lt;a class="reference external" href="https://www.codecademy.com/learn/learn-the-command-line"&gt;Learn The Command Line&lt;/a&gt;&amp;quot; before beginning with Node.js. I think it helped me better understand what the commands are and what they do.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download and install&amp;nbsp;&lt;a class="reference external" href="https://nodejs.org/en/"&gt;Node.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open the node command prompt. (This was on a windows machine.)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;mkdir node_apps&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;creates a folder for your app(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cd \app_name&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;changes command prompt directory to your app's folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;npm &amp;nbsp;init&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;Creates json file for your app&lt;/li&gt;
&lt;li&gt;fill out applicable info or just hit enter until the file is created&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;npm install express&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;installs express.js module in node.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;npm install &lt;span class="pre"&gt;express-generator&lt;/span&gt; &lt;span class="pre"&gt;-g&lt;/span&gt;&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;installs express-generator module in node.js&lt;/li&gt;
&lt;li&gt;this module creates the web app's structure once the command in the next step is entered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;express app_name&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;creates the structure for your app and all necessary folders. (views, css, Javascript, routing, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;npm install&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;ensures all app module dependencies are installed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;npm start&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;starts your server and web app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;a class="reference external" href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in a browser. Port 3000 is the default port of Express.&lt;ul&gt;
&lt;li&gt;Your app is live.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I learned most of this from &lt;a class="reference external" href="https://codeforgeek.com/2014/10/express-complete-tutorial-part-1/"&gt;this great blog post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The above does not include a database integration. I integrated with a MongoDB database by &lt;a class="reference external" href="https://closebrace.com/tutorials/2017-03-02/the-dead-simple-step-by-step-guide-for-front-end-developers-to-getting-up-and-running-with-nodejs-express-and-mongodb"&gt;following the instructions in this post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This &lt;a class="reference external" href="https://www.youtube.com/watch?v=1uFY60CESlM"&gt;YouTube video&lt;/a&gt; was also very helpful to me for figuring out MongoDB and Node.js integration.&lt;/li&gt;
&lt;li&gt;An HTML shorthand language called jade (aka pug) comes stock within Express.js.&amp;nbsp; &lt;a class="reference external" href="https://webapplog.com/jade/"&gt;Here's further reading&lt;/a&gt; on the pros and cons.&lt;/li&gt;
&lt;li&gt;All of the above has been from my own studies. I do not claim anything listed as the most efficient or best way to use Node.js. This is what has worked for me over the past two days.&lt;/li&gt;
&lt;li&gt;It feels good to whip up a nimble app environment that is capable of producing and supporting world changing software; Node.js is used by Netflix, PayPal, Microsoft and Uber.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="coding, javascript, programming, web development"></category><category term="command line"></category><category term="creating websites"></category><category term="express.js"></category><category term="mongodb"></category><category term="Node.js"></category><category term="web dev"></category><category term="website"></category></entry><entry><title>Oversimplified Javascript Terms</title><link href="https://pythonmarketer.com/oversimplified-javascript-terms.html" rel="alternate"></link><published>2017-08-05T18:37:00-05:00</published><updated>2017-08-05T18:37:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2017-08-05:/oversimplified-javascript-terms.html</id><summary type="html">&lt;p&gt;I'm finally coming around in my understanding of Javascript. Here are a few quick explanations to help you if you are new to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; = The language of the web. Most commonly used as a complement to HTML and CSS to create an interactive website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt; = A popular Javascript library …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm finally coming around in my understanding of Javascript. Here are a few quick explanations to help you if you are new to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; = The language of the web. Most commonly used as a complement to HTML and CSS to create an interactive website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt; = A popular Javascript library with many powerful commands that are quick and easy to call.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node.JS&lt;/strong&gt; = Software that allows you to run Javascript from the command line without being connected to the internet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Express.JS&lt;/strong&gt; = A popular Node.JS framework.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; = A popular front-end Javascript web framework. There are many out there but this seems to be the one I've heard of the most.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;I've begun to see a pattern with programming languages:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;1) Learn to execute the core building blocks. (using variables, loops, functions, etc.)&lt;/div&gt;
&lt;div class="line"&gt;2) Learn more advanced libraries, documentation and uses.&lt;/div&gt;
&lt;div class="line"&gt;3) Consider using and learning web frameworks depending on what you're trying to do with the language.&lt;/div&gt;
&lt;div class="line"&gt;4) Practice to hone your knowledge. Build things you like.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I've also noticed that Javascript has been easier to learn than Python was for me, because it's not my first programming language. The concepts are the same. The syntax can trip me up at times, but I'm currently flying through &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-javascript"&gt;Codeacademy's Javascript courses&lt;/a&gt;. Sometimes it even seems fun!&lt;/p&gt;
</content><category term="coding, javascript, programming"></category><category term="angular"></category><category term="express.js"></category><category term="javascript terms"></category><category term="JQuery"></category><category term="Node.js"></category><category term="software"></category><category term="understanding javascript"></category><category term="web frameworks."></category></entry><entry><title>Tips For Creating Useful Ideas</title><link href="https://pythonmarketer.com/how-to-create-things-people-care-about.html" rel="alternate"></link><published>2017-07-30T19:10:00-05:00</published><updated>2017-07-30T19:10:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2017-07-30:/how-to-create-things-people-care-about.html</id><summary type="html">&lt;p&gt;11 Ideas from people who have created great products, businesses, or ideas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Expertise in a field or product is one of the best assets. Nike's founders started out by making their prototype shoe designs themselves with a waffle iron. //&amp;nbsp;&lt;a class="reference external" href="https://www.amazon.com/Shoe-Dog-Phil-Knight/dp/1508211809"&gt;Shoe Dog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scratch your own itch. Create the product that you …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;11 Ideas from people who have created great products, businesses, or ideas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Expertise in a field or product is one of the best assets. Nike's founders started out by making their prototype shoe designs themselves with a waffle iron. //&amp;nbsp;&lt;a class="reference external" href="https://www.amazon.com/Shoe-Dog-Phil-Knight/dp/1508211809"&gt;Shoe Dog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scratch your own itch. Create the product that you wish existed in the world. Write the book you want to read. // &lt;a class="reference external" href="https://austinkleon.com/steal/"&gt;Austin Kleon&lt;/a&gt; //&amp;nbsp;&lt;a class="reference external" href="https://www.indiehackers.com/"&gt;Indie Hackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Observe a problem or inconvenience that exists in the world and create a better solution. // Product Development Class&lt;/li&gt;
&lt;li&gt;Find a niche and create something useful for that segment of people. //&amp;nbsp;&lt;a class="reference external" href="http://sethgodin.typepad.com/"&gt;Seth Godin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For every attribute, there is an opposite, effective attribute.&amp;nbsp;//&amp;nbsp;&lt;a class="reference external" href="https://blog.kowalczyk.info/articles/22-marketing-laws.html"&gt;Law 14, The 22 Immutable Laws of Marketing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Launch quickly, show to people, get feedback, and iterate your idea. //&amp;nbsp;&lt;a class="reference external" href="https://37signals.com/rework"&gt;Rework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use combinatory play. Take ideas from different disciplines and combine them to bring about new ideas. //&amp;nbsp;&lt;a class="reference external" href="https://www.brainpickings.org/2013/08/14/how-einstein-thought-combinatorial-creativity/"&gt;Brain Pickings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Invest in improving your product versus marketing. A great product is obvious to a potential customer.&amp;nbsp;//&amp;nbsp;&lt;a class="reference external" href="http://sethgodin.typepad.com/"&gt;Seth Godin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;People remember how you or your product made them feel versus cost, etc.&lt;/li&gt;
&lt;li&gt;An idea doesn't have to be revolutionary. Many new businesses or products take an existing product and make a slight modification or add a new twist.&lt;/li&gt;
&lt;li&gt;Many of the successful people during the gold rush sold pick-axes to the miners.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="business, entrepreneurship, Marketing, product development"></category><category term="app development"></category><category term="rework"></category><category term="seth godin"></category><category term="shoe dog"></category></entry><entry><title>Should You Go To Programming School?</title><link href="https://pythonmarketer.com/should-i-go-to-programming-school.html" rel="alternate"></link><published>2017-07-28T23:45:00-05:00</published><updated>2017-07-28T23:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2017-07-28:/should-i-go-to-programming-school.html</id><summary type="html">&lt;p&gt;There is no one-size-fits-all answer. Below are some thoughts that may help you decide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What are your programming goals? Get a coding job? Create an app or website? Become more productive at your current job?&lt;/li&gt;
&lt;li&gt;What is your current experience level? Are you starting fresh or do you already know …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;There is no one-size-fits-all answer. Below are some thoughts that may help you decide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What are your programming goals? Get a coding job? Create an app or website? Become more productive at your current job?&lt;/li&gt;
&lt;li&gt;What is your current experience level? Are you starting fresh or do you already know a language or two?&lt;/li&gt;
&lt;li&gt;Do you have money saved up? Otherwise, you might need to take out a loan.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A computer science degree is typically most expensive. Coding bootcamps are a lower cost option that pack a wide curriculum into a few weeks or months, but they can still be pricey. The cheapest option is to take a piecemeal approach through various online courses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;School Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wholistic approach. You get the ins and outs of programming from a proven curriculum.&lt;/li&gt;
&lt;li&gt;Community. You learn with other students and from experienced teachers.&lt;/li&gt;
&lt;li&gt;Job placement. Often various schools and bootcamps will connect you to a company.&lt;/li&gt;
&lt;li&gt;Credentials. You gain confidence and the backing of your skills by an established institution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Potential Downsides&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tuition Money. A lot of&amp;nbsp;what you need to know is available for free or cheap on the web.&lt;/li&gt;
&lt;li&gt;Skill level match. Some bootcamps are oriented for beginners, others are more advanced. If you do a bootcamp, make sure it fits your skill level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you want a coding job&lt;/strong&gt;, school makes sense. The bootcamps look to be effective if you can handle the up-front investment. It's possible to land a job without schooling but much tougher. I am currently considering &lt;a class="reference external" href="https://www.fullstackacademy.com/"&gt;Full Stack Academy&lt;/a&gt;. and &lt;a class="reference external" href="http://www.codingdojo.com/"&gt;Coding Dojo&lt;/a&gt;. There are many out there. CodeAcademy is a popular route as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to make an app or website&lt;/strong&gt;, the school or the non-school route may both work. For the non-school route, the following languages are good places to start: &lt;em&gt;(note - not a comprehensive list, these are my picks.)&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web App or Website: HTML, CSS,&amp;nbsp;Python, Javascript&lt;/li&gt;
&lt;li&gt;Web App or Website Framework:&amp;nbsp; Flask, Django, py4web, Ruby on Rails, React&lt;/li&gt;
&lt;li&gt;iOS app: Swift plus Apple's Xcode environment, Beeware (python library)&lt;/li&gt;
&lt;li&gt;Android App: Java or Kotlin, Beeware&lt;/li&gt;
&lt;li&gt;General Coding: Python or Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you want to be more productive at work&lt;/strong&gt;, I recommend learning Python. More on Python and where to start &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/22/marketer-slash-programmer/"&gt;here&lt;/a&gt;.&amp;nbsp;&lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff With Python&lt;/a&gt; is a great resource for boosting your productivity also.&lt;/p&gt;
&lt;p&gt;It's not easy to decide whether or not school is for you. I'm still unsure after a year and a half of programming on the side. No matter what, continue to learn multiple languages and strive for a better grasp of the ones you know. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My decision: continue self-study and learning online for free.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 8 months after writing this post, I have concluded that learning for free online was the right choice for me. I've achieved many of my programming goals in the last three years, thanks to materials available from &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python"&gt;Codeacademy&lt;/a&gt;, &lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;Coursera&lt;/a&gt;, &lt;a class="reference external" href="https://www.youtube.com/watch?v=u3d-n41Tobw"&gt;YouTube&lt;/a&gt;, &lt;a class="reference external" href="https://stackoverflow.com/questions/1720421/how-to-concatenate-two-lists-in-python?rq=1"&gt;Stack Overflow&lt;/a&gt;, &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;countless helpful resources,&lt;/a&gt;&lt;a class="reference external" href="https://pymotw.com/3/glob/index.html"&gt;interesting blogs&lt;/a&gt;, and &lt;a class="reference external" href="https://docs.python.org/3/library/index.html"&gt;documentation&lt;/a&gt;. I've talked with others who need the in-person assistance that a bootcamp offers to learn. Do what works for you. Good luck with your decision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Several years later, I also get paid to use Python and Excel for a living! I studied for free online intermittently over 2 years to achieve it.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="app development"></category><category term="computer jobs"></category><category term="python"></category><category term="software"></category><category term="web apps"></category><category term="web development"></category><category term="website"></category></entry><entry><title>Cycles</title><link href="https://pythonmarketer.com/cycles.html" rel="alternate"></link><published>2017-07-28T18:32:00-05:00</published><updated>2017-07-28T18:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2017-07-28:/cycles.html</id><summary type="html">&lt;p&gt;We move in cycles. Work, rest, re-energize, play, repeat. The rhythm of life.&lt;/p&gt;
&lt;p&gt;I began my coding endeavors in the fall of 2015. After 6 months of steady &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/11/random-findings/"&gt;coding practice and studying&lt;/a&gt;, I went from no knowledge to a basic hobbyist programmer capable of creating a website with the help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We move in cycles. Work, rest, re-energize, play, repeat. The rhythm of life.&lt;/p&gt;
&lt;p&gt;I began my coding endeavors in the fall of 2015. After 6 months of steady &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/11/random-findings/"&gt;coding practice and studying&lt;/a&gt;, I went from no knowledge to a basic hobbyist programmer capable of creating a website with the help of &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/03/starting-to-almost-kinda-think-about-creating-a-web-app/"&gt;a framework&lt;/a&gt;. I published a few of my own primitive apps. Then I relapsed. Coding and my full-time job wore me out. I stayed away from coding for about 6 months.&lt;/p&gt;
&lt;p&gt;My ultimate goal to learn to code was to be able to build my own websites and apps. I've done that now. I've found ways to do it more efficiently, which I will share in future posts.&lt;/p&gt;
&lt;p&gt;Two of my recent moonshot projects were&amp;nbsp;Social Queues, a social playlist builder for Spotify and Dropcycle, a bicycle on demand pick-up service. Neither went anywhere, or really were that good of ideas, but I was able to get to bare minimum viable product status, with little to no code. Sites like &lt;a class="reference external" href="http://carrd.co"&gt;carrd.co&lt;/a&gt; work well to build a quick landing page as proof of concept or landing page test. My favorite project might be my &lt;a class="reference external" href="http://tameimpala.pythonanywhere.com"&gt;Tame Impala website&lt;/a&gt;, which I used &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/29/getting-started-with-web2py/"&gt;web2py&lt;/a&gt;&amp;nbsp;to build the site and &lt;a class="reference external" href="http://pythonanywhere,com"&gt;pythonanywhere&lt;/a&gt; to host for free :)&lt;/p&gt;
&lt;p&gt;My aspirations have shifted. Instead of just building apps, I want to build apps that are useful to others and help me achieve financial freedom and the ability to own my time.&lt;/p&gt;
&lt;p&gt;I believe in cycles of learning. Similar to being in school: semester of study, then time off to rest, then semester of study, more rest, etc. The time away is as important as the time of study. Earlier this year, I returned to programming and web development. After a long time of not writing on this blog, I'm back at it. New cycle.&lt;/p&gt;
</content><category term="coding, programming, work"></category><category term="web apps"></category></entry><entry><title>Useful Links for web2py Beginners</title><link href="https://pythonmarketer.com/useful-links-for-web2py-beginners.html" rel="alternate"></link><published>2016-04-30T20:03:00-05:00</published><updated>2016-04-30T20:03:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-04-30:/useful-links-for-web2py-beginners.html</id><summary type="html">&lt;p&gt;As I've been grappling with&amp;nbsp;web2py, I've found&amp;nbsp;a lot of useful posts and sites that have helped me along the way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/IURWDAP2eTY"&gt;How to Deploy Your App to PythonAnywhere&lt;/a&gt;: So easy it's amazing. I've already deployed an app to see if I could.&lt;/li&gt;
&lt;li&gt;For CSS - I found &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/cFc5NPQmmhc"&gt;this&lt;/a&gt; and &lt;a class="reference external" href="http://stackoverflow.com/questions/7184489/web2py-linking-to-css"&gt;this …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;As I've been grappling with&amp;nbsp;web2py, I've found&amp;nbsp;a lot of useful posts and sites that have helped me along the way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/IURWDAP2eTY"&gt;How to Deploy Your App to PythonAnywhere&lt;/a&gt;: So easy it's amazing. I've already deployed an app to see if I could.&lt;/li&gt;
&lt;li&gt;For CSS - I found &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/cFc5NPQmmhc"&gt;this&lt;/a&gt; and &lt;a class="reference external" href="http://stackoverflow.com/questions/7184489/web2py-linking-to-css"&gt;this&lt;/a&gt;&amp;nbsp;useful. I've learned a tiny amount of CSS (&lt;a class="reference external" href="https://www.coursera.org/learn/introcss/"&gt;Thanks to Colleen van Lent!&lt;/a&gt;) but am now able to manipulate the layout of my apps.&lt;/li&gt;
&lt;li&gt;An Easy Way to &lt;a class="reference external" href="http://web2py.com/book/default/chapter/07#Custom-forms"&gt;Customize&amp;nbsp;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://web2py.com/examples/static/web2py_cheatsheet.pdf"&gt;web2py Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://joecodeswell.wordpress.com/2011/06/09/web2py-url-mapping/"&gt;URL Mapping Notes&lt;/a&gt; - I'm still understanding how the URL function works in web2py but it's very&amp;nbsp;powerful from what I have gathered.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://joecodeswell.wordpress.com/2011/05/25/web2py-dal-quick-reference/"&gt;DAL Quick Reference Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; consider using &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;, web2py's successor&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;py4web documentation: &lt;a class="reference external" href="https://py4web.com/_documentation/static/en/chapter-05.html"&gt;The database abstraction layer (DAL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;py4web documentation: &lt;a class="reference external" href="https://py4web.com/_documentation/static/en/chapter-01.html#"&gt;Installation and Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bonus: &lt;a class="reference external" href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp"&gt;How to Make Mistakes in Python&lt;/a&gt;&amp;nbsp;- Free for download.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/29/getting-started-with-web2py/"&gt;Getting Started With web2py&lt;/a&gt;&lt;/p&gt;
</content><category term="programming, python, web development, web2py"></category></entry><entry><title>On Learning New Things</title><link href="https://pythonmarketer.com/on-learning-new-things.html" rel="alternate"></link><published>2016-04-05T00:36:00-05:00</published><updated>2016-04-05T00:36:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-04-05:/on-learning-new-things.html</id><summary type="html">&lt;p&gt;Most&amp;nbsp;new skills&amp;nbsp;I've tried to learn seem to follow a similar trajectory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Stage One - Beginner's Thrill:&lt;/strong&gt; A rapid growth and learning pace at the beginning, because I'm&amp;nbsp;conquering a lot of small goals, diving into something new and there are rapid gains which feels great.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage Two - Amateur's Reality …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Most&amp;nbsp;new skills&amp;nbsp;I've tried to learn seem to follow a similar trajectory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Stage One - Beginner's Thrill:&lt;/strong&gt; A rapid growth and learning pace at the beginning, because I'm&amp;nbsp;conquering a lot of small goals, diving into something new and there are rapid gains which feels great.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage Two - Amateur's Reality:&lt;/strong&gt;&amp;nbsp;The pace of learning and accomplishment levels off.&amp;nbsp;I'm still&amp;nbsp;learning, but&amp;nbsp;the&amp;nbsp;leaps forward start following a plateau trajectory. This stage is not as rewarding as the first. The key is to push through and jump to the next plateau and keep improving.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage Three - Mastery:&lt;/strong&gt; This is the goal with most things I&amp;nbsp;want to learn, and if I&amp;nbsp;gain enough experience and skill, I'll have the ability to apply the&amp;nbsp;new things I've learned to accomplish my&amp;nbsp;goals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my own&amp;nbsp;way of paraphrasing what I've read a million times on the internet - put in the hours, stay focused and don't stop trying. Right now I'm somewhere around&amp;nbsp;stage one/two with Python. Gotta&amp;nbsp;keep pushing forward. (This blog is also serving as a pep talk to myself.)&lt;/p&gt;
</content><category term="life"></category></entry><entry><title>Getting Started With web2py</title><link href="https://pythonmarketer.com/getting-started-with-web2py.html" rel="alternate"></link><published>2016-03-29T03:02:00-05:00</published><updated>2016-03-29T03:02:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-03-29:/getting-started-with-web2py.html</id><summary type="html">&lt;p&gt;Feeling really good about my progress with web2py. The tutorial videos are comprehensive, yet easy to understand. For a beginner, the &amp;quot;batteries included&amp;quot; philosophy that web2py has embraced is a godsend. This means&amp;nbsp;everything you need to get creating comes stock. I &lt;a class="reference external" href="http://www.web2py.com/init/default/download"&gt;downloaded the web2py program&lt;/a&gt;, ran it, entered a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Feeling really good about my progress with web2py. The tutorial videos are comprehensive, yet easy to understand. For a beginner, the &amp;quot;batteries included&amp;quot; philosophy that web2py has embraced is a godsend. This means&amp;nbsp;everything you need to get creating comes stock. I &lt;a class="reference external" href="http://www.web2py.com/init/default/download"&gt;downloaded the web2py program&lt;/a&gt;, ran it, entered a password, and was immediately using&amp;nbsp;a functional development interface.&lt;/p&gt;
&lt;p&gt;web2py follows the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;Model - View - Controller software architecture&lt;/a&gt;&amp;nbsp;- which means it separates out the activities of programs into a few different layers (please forgive my oversimplified explanations):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Model - Stores data / used&amp;nbsp;in tutorial for database table creation (Written in Python)&lt;/li&gt;
&lt;li&gt;Controller - Used to define page functions (Python)&lt;/li&gt;
&lt;li&gt;Views - What the user sees (HTML/CSS/Javascript)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="en300" class="alignnone wp-image-479" src="https://pythonmarketer.files.wordpress.com/2016/03/en300.png" style="width: 460px; height: 307px;" /&gt;
&lt;p&gt;&lt;em&gt;(Image&amp;nbsp;from web2py Documentation)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're thinking about trying web2py&amp;nbsp;here's a few things that I've really liked so far:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I have minimal knowledge outside of&amp;nbsp;a few basic concepts of server operations. web2py provides a few simple lines of code that allows quick creation of a table (done in model) and corresponding form (done in controller/view) to add entries to the table and display form submissions elsewhere on your site.&lt;/li&gt;
&lt;li&gt;Right now, I'm enjoying learning&amp;nbsp;about the &lt;a class="reference external" href="https://py4web.com/_documentation/static/en/chapter-05.html"&gt;Database Abstraction Layer (DAL),&lt;/a&gt; which is pretty cool because you can rapidly run and test complex server queries within it.&lt;/li&gt;
&lt;li&gt;It's set up for multiple applications, so I can create and play with&amp;nbsp;several projects at once, whether simple applications or more complex websites.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are 30 videos total on the web2py documentation page, and I've only watched 11 of them but have already learned a ton. The style of the Massimo Di Pierro is great because you often pick up on some golden nuggets of coding wisdom and programming&amp;nbsp;tips while he walks you through the topic.&lt;/p&gt;
&lt;p&gt;It's pretty sweet&amp;nbsp;to be able to create and manipulate a website so quickly; still need to learn more, such as pick up CSS to really make it my own. But for now I'm happy for the many small accomplishments&amp;nbsp;that have been easier to reach thanks to web2py.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Update:&lt;/strong&gt; consider using &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;, web2py's successor&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/04/30/useful-links-for-web2py-beginners/"&gt;Useful Links for web2py Beginners&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python, web development, web2py"></category></entry><entry><title>Choosing a Web Development Path</title><link href="https://pythonmarketer.com/choosing-a-web-development-path.html" rel="alternate"></link><published>2016-03-22T03:45:00-05:00</published><updated>2016-03-22T03:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-03-22:/choosing-a-web-development-path.html</id><summary type="html">&lt;p&gt;I have recently finished this &lt;a class="reference external" href="https://www.coursera.org/learn/html"&gt;HTML course&lt;/a&gt;, which recommends using cPanel to configure websites. So I bought a domain and registered with cPanel.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What I thought would happen in trying to create a website/app:&lt;/strong&gt;&amp;nbsp;Buy a domain and use cPanel and Python in perfect sync to create a website …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I have recently finished this &lt;a class="reference external" href="https://www.coursera.org/learn/html"&gt;HTML course&lt;/a&gt;, which recommends using cPanel to configure websites. So I bought a domain and registered with cPanel.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What I thought would happen in trying to create a website/app:&lt;/strong&gt;&amp;nbsp;Buy a domain and use cPanel and Python in perfect sync to create a website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reality:&lt;/strong&gt;&amp;nbsp;cPanel is configured mostly for PHP. You can run Python scripts with it, but it doesn't seem to be the most effective route from what I've read.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I went back to the drawing board and I've simplified this down to&amp;nbsp;two basic paths:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;Languages&lt;/td&gt;
&lt;td&gt;Hosting&lt;/td&gt;
&lt;td&gt;Framework / IDE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Path 1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Build a website using Python + Python Web Frameworks and HTML&lt;/td&gt;
&lt;td&gt;PythonAnywhere or other Python friendly hosts&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://www.web2py.com/"&gt;web2py&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Path 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Use a combo of HTML, Javascript + Python, other languages&lt;/td&gt;
&lt;td&gt;cPanel, many other hosts&lt;/td&gt;
&lt;td&gt;None (AKA I'm not sure)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I'm going with Path 1 because the only language I know is Python. I hope to learn other&amp;nbsp;languages like Javascript and CSS but would like to get building as fast as possible.&lt;/p&gt;
&lt;p&gt;I found a free web hosting service called PythonAnywhere. There are other &lt;a class="reference external" href="https://wiki.python.org/moin/FreeHosts"&gt;free&lt;/a&gt; and &lt;a class="reference external" href="https://www.heroku.com/"&gt;paid&lt;/a&gt; Python-friendly hosts that allow you to use Python.&lt;/p&gt;
&lt;p&gt;Instead of the &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/03/starting-to-almost-kinda-think-about-creating-a-web-app/"&gt;previously mentioned web frameworks&lt;/a&gt;, I've chosen web2py as a starter because of its compatibility with PythonAnywhere,&amp;nbsp;its simplicity, easy to read documentation and relative ease of use for beginners.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A note on PythonAnywhere: they get 5 stars for the tutorial pictured below. It is very nice to see in the whirlwind of confusion of learning to deal with code and a new environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="PythonAnywhere Tutorial" class="alignnone size-full wp-image-286" src="https://pythonmarketer.files.wordpress.com/2016/03/pythonanywhere-tutorial.jpg" style="width: 1199px; height: 313px;" /&gt;
&lt;p&gt;++ Love this opening quote from &lt;a class="reference external" href="http://web2py.com/book"&gt;web2py Documentation&lt;/a&gt;: &amp;quot;I believe that the ability to easily build high quality web applications is of critical importance for the growth of a free and open society. This prevents the biggest players from monopolizing the flow of information.&amp;quot;&lt;/p&gt;
&lt;p&gt;+++ A note on web2py so far: &lt;a class="reference external" href="http://www.web2py.com/init/default/documentation"&gt;the videos from the creator&lt;/a&gt;, Massimo Di Pierro, are super useful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Update:&lt;/strong&gt; consider using &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;, web2py's successor&lt;/blockquote&gt;
</content><category term="coding, programming, python, web development, web2py"></category></entry><entry><title>Discoveries['Random']</title><link href="https://pythonmarketer.com/random-findings.html" rel="alternate"></link><published>2016-03-11T15:56:00-06:00</published><updated>2016-03-11T15:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-03-11:/random-findings.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Quote of Zen:&lt;/strong&gt; &amp;quot;Productivity isn’t about running faster or pushing yourself harder, but rather, about working smarter and paying a bit more attention to what is really going on.&amp;quot; - &lt;a class="reference external" href="http://well.blogs.nytimes.com/2016/03/10/how-asking-5-questions-allowed-me-to-eat-dinner-with-my-kids/?_r=0"&gt;New York Times Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Book I'm Reading Right Now:&lt;/strong&gt; &lt;a class="reference external" href="http://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent Discovery:&lt;/strong&gt; &lt;a class="reference external" href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments"&gt;Integrated Development Environments&lt;/a&gt; for Web Programming - another …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Quote of Zen:&lt;/strong&gt; &amp;quot;Productivity isn’t about running faster or pushing yourself harder, but rather, about working smarter and paying a bit more attention to what is really going on.&amp;quot; - &lt;a class="reference external" href="http://well.blogs.nytimes.com/2016/03/10/how-asking-5-questions-allowed-me-to-eat-dinner-with-my-kids/?_r=0"&gt;New York Times Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Book I'm Reading Right Now:&lt;/strong&gt; &lt;a class="reference external" href="http://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent Discovery:&lt;/strong&gt; &lt;a class="reference external" href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments"&gt;Integrated Development Environments&lt;/a&gt; for Web Programming - another piece of the web development puzzle; software that contains the front and back end elements for writing code, compiling and testing. This article from Stack Overflow clarifies &lt;a class="reference external" href="http://stackoverflow.com/questions/5255868/difference-between-ide-and-framework"&gt;the difference between an IDE and a web framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Wanted to also mention this &lt;a class="reference external" href="http://mashable.com/2010/10/06/ide-guide/#nIvAMfNr_uqx"&gt;counterpoint against IDEs for beginners&lt;/a&gt;: &amp;quot;Although many IDEs can handle more than one language, few do it well. Plus, it's likely overkill if you are just getting started.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Finally, if you're just beginning Python, let me put in a plug for simple editors: it's best for you to learn the language and its libraries well writing it all yourself, and &lt;em&gt;then&lt;/em&gt; if you think an IDE would speed your work along, use it. You'll find that you learn the language faster and more completely if you take this route.&amp;quot; - &lt;a class="reference external" href="http://pythoncentral.io/text-editors-vs-ides-for-python-development-selecting-the-right-tool/"&gt;Python Central&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ultimately your approach and tools used for any coding project depends on what you're trying to build, which language(s) used, and your own knowledge - and I'm still learning.&lt;/p&gt;
</content><category term="books, productivity, programming"></category></entry><entry><title>Starting to Almost Kinda Think About Creating a Web App</title><link href="https://pythonmarketer.com/starting-to-almost-kinda-think-about-creating-a-web-app.html" rel="alternate"></link><published>2016-03-03T03:56:00-06:00</published><updated>2016-03-03T03:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-03-03:/starting-to-almost-kinda-think-about-creating-a-web-app.html</id><summary type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to&amp;nbsp;learn about&amp;nbsp;web frameworks. A web framework consists of software designed to aid in web development. They make it easier to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to&amp;nbsp;learn about&amp;nbsp;web frameworks. A web framework consists of software designed to aid in web development. They make it easier to create a website or web app - if you know how to use them. Unfortunately, there is a learning curve to using the frameworks but thankfully there is plenty o' documentation to go around to help you.&lt;/p&gt;
&lt;p&gt;Here are the two&amp;nbsp;&lt;a class="reference external" href="https://www.airpair.com/python/posts/django-flask-pyramid"&gt;Python Frameworks&lt;/a&gt; I've chosen to investigate (there are many out here on the webs):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django - widely used, great community support, comes with just about everything built in. Can be used for smaller apps or multi-page/app websites.&lt;/li&gt;
&lt;li&gt;Flask - a &amp;quot;microframework&amp;quot; used for smaller apps. Possibly more manageable for someone beginning a smaller project (me!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as a beginnerish-level coder, I've chosen to start with Flask; I also found &lt;a class="reference external" href="http://opentechschool.github.io/python-flask/"&gt;this sweet guide&lt;/a&gt; that I think will help. Maybe someday I will graduate to Django, it sounds like a great framework.&amp;nbsp;I've also decided that first I need to &lt;a class="reference external" href="https://www.coursera.org/specializations/web-design"&gt;brush up on my HTML&lt;/a&gt; - And according to a lot of what I've read it doesn't hurt to know CSS/Javascript. So this whole &amp;quot;build a web app&amp;quot; idea will continue, albeit with some hurdles to clear first.&lt;/p&gt;
&lt;p&gt;Edit: I ended up choosing web2py, which I hadn't even considered when I wrote this originally! Here's a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/22/choosing-a-web-development-path/"&gt;post about why I chose it&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, programming, web development"></category><category term="django"></category><category term="flask"></category><category term="python"></category><category term="web apps"></category></entry><entry><title>Tkinter and Python Libraries</title><link href="https://pythonmarketer.com/tkinter-and-python-libraries.html" rel="alternate"></link><published>2016-02-29T01:11:00-06:00</published><updated>2016-02-29T01:11:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-02-29:/tkinter-and-python-libraries.html</id><summary type="html">&lt;p&gt;Python's set of libraries are&amp;nbsp;fun to explore. They allow Python to work with many types of other coding languages, allow you to do cool stuff, and seem&amp;nbsp;to require&amp;nbsp;a minimal knowledge of the actual code. You can read the complete list of standard libraries &lt;a class="reference external" href="https://docs.python.org/2/library/"&gt;here&lt;/a&gt;. There are also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python's set of libraries are&amp;nbsp;fun to explore. They allow Python to work with many types of other coding languages, allow you to do cool stuff, and seem&amp;nbsp;to require&amp;nbsp;a minimal knowledge of the actual code. You can read the complete list of standard libraries &lt;a class="reference external" href="https://docs.python.org/2/library/"&gt;here&lt;/a&gt;. There are also others available that you can download and install for unique challenges or software such as &lt;a class="reference external" href="https://wiki.python.org/moin/Android"&gt;Android&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Currently, my favorite library is &lt;a class="reference external" href="http://thinkingtkinter.sourceforge.net/"&gt;Tkinter&lt;/a&gt;. Tkinter is a module that replicates &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tcl"&gt;Tk/TCL&lt;/a&gt;&amp;nbsp;within Python and&amp;nbsp;allows you to create a quick Graphical User Interface (GUI) for your programs - great for trying to put together a prototype program with&amp;nbsp;basic aesthetic design control&amp;nbsp;for&amp;nbsp;things like buttons, entry boxes, text and other visual elements that make up the front end of a computer program.&lt;/p&gt;
&lt;p&gt;+Pro Tip: When you're trying to use a new module, you can read how to use it in the module's documentation. &lt;a class="reference external" href="https://docs.python.org/3.8/library/tkinter.html"&gt;Here's Tkinter's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;++ Today's find: Free guide called &amp;quot;&lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring stuff with Python&lt;/a&gt;&amp;quot;&lt;/p&gt;
</content><category term="coding, python, software"></category><category term="gui"></category><category term="programming"></category></entry><entry><title>Start Before You Are Ready</title><link href="https://pythonmarketer.com/start-before-you-are-ready.html" rel="alternate"></link><published>2016-02-25T13:55:00-06:00</published><updated>2016-02-25T13:55:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-02-25:/start-before-you-are-ready.html</id><content type="html">&lt;p&gt;Found &lt;a class="reference external" href="https://medium.com/life-learning/start-before-you-re-ready-ac7d5608c83d#.wzka2rmm1"&gt;this article&lt;/a&gt; today via &lt;a class="reference external" href="http://www.thedolectures.com/"&gt;The Do Lectures&lt;/a&gt; and think it's so true - whatever you want to do, just start. Because &amp;quot;Sucking is the first step to being sorta good at something.&amp;quot;&lt;/p&gt;
</content><category term="life"></category></entry><entry><title>15 Marketing Observations</title><link href="https://pythonmarketer.com/15-marketing-observations.html" rel="alternate"></link><published>2016-02-25T03:32:00-06:00</published><updated>2016-02-25T03:32:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-02-25:/15-marketing-observations.html</id><summary type="html">&lt;p&gt;Tonight, I made a list of 15 things I've observed&amp;nbsp;after&amp;nbsp;4 years of study at the University of Illinois and 4 years of professional experience in Marketing. So here they are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's easier to sell one thing than several different products.&lt;/li&gt;
&lt;li&gt;Distribution = Very Important (Duh!)&lt;/li&gt;
&lt;li&gt;Marketing depends a lot …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Tonight, I made a list of 15 things I've observed&amp;nbsp;after&amp;nbsp;4 years of study at the University of Illinois and 4 years of professional experience in Marketing. So here they are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's easier to sell one thing than several different products.&lt;/li&gt;
&lt;li&gt;Distribution = Very Important (Duh!)&lt;/li&gt;
&lt;li&gt;Marketing depends a lot on product quality - what can you do for the user/customer? What problems can you solve?&amp;nbsp;&lt;a class="reference external" href="http://sethgodin.typepad.com/seths_blog/2016/02/fit-and-finish.html"&gt;Seth Godin&lt;/a&gt;&amp;nbsp;talks about this quite often.&lt;/li&gt;
&lt;li&gt;Design matters - in product, communications, and everything else in this world.&lt;/li&gt;
&lt;li&gt;Sell benefits, not features.&lt;/li&gt;
&lt;li&gt;People are emotional buyers.&lt;/li&gt;
&lt;li&gt;The more you know about your customer, the better.&lt;/li&gt;
&lt;li&gt;Budget and resources matter.&lt;/li&gt;
&lt;li&gt;There can be an extremely wide variance from industry to industry - the key is to look for&amp;nbsp;parallels.&lt;/li&gt;
&lt;li&gt;Humanize your company as much as possible - &lt;a class="reference external" href="http://members.cdbaby.com/shipping-confirmation.aspx"&gt;This is a great example&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You're more likely to find success with talented people around you.&lt;/li&gt;
&lt;li&gt;Be aware of&amp;nbsp;the&amp;nbsp;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;Pareto Principle&lt;/a&gt; (The 80/20 Rule) - 80% of results often come from 20% of customers.&lt;/li&gt;
&lt;li&gt;Ads that annoy / shout about your product don't work; Ads&amp;nbsp;that&amp;nbsp;tell customers useful information or help them in some way do.&lt;/li&gt;
&lt;li&gt;There is such a thing as too many choices for the customer - it overwhelms them.&lt;/li&gt;
&lt;li&gt;Practice brevity. Whatever you've got to say,&amp;nbsp;do it in&amp;nbsp;fewer words.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agree? Disagree?&lt;/p&gt;
</content><category term="Marketing"></category></entry><entry><title>Python Koans</title><link href="https://pythonmarketer.com/dotd-python-koans.html" rel="alternate"></link><published>2016-02-23T14:10:00-06:00</published><updated>2016-02-23T14:10:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-02-23:/dotd-python-koans.html</id><summary type="html">&lt;p&gt;Today's discovery is &lt;a class="reference external" href="https://github.com/gregmalcolm/python_koans"&gt;Python Koans&lt;/a&gt;.&amp;nbsp;According to &lt;a class="reference external" href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;python-guide.org&lt;/a&gt;, Koans &amp;quot;uses a test-driven approach, q.v. TEST DRIVEN DESIGN SECTION to provide an interactive tutorial teaching basic Python concepts. By fixing assertion statements that fail in a test script, this provides sequential steps to learning Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;I was also curious …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today's discovery is &lt;a class="reference external" href="https://github.com/gregmalcolm/python_koans"&gt;Python Koans&lt;/a&gt;.&amp;nbsp;According to &lt;a class="reference external" href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;python-guide.org&lt;/a&gt;, Koans &amp;quot;uses a test-driven approach, q.v. TEST DRIVEN DESIGN SECTION to provide an interactive tutorial teaching basic Python concepts. By fixing assertion statements that fail in a test script, this provides sequential steps to learning Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;I was also curious what a &amp;quot;Koan&amp;quot; actually is: &amp;quot;a paradox to be meditated upon that is used to train Zen Buddhist monks to abandon ultimate dependence on reason and to force them into gaining sudden intuitive enlightenment&amp;quot; - Merriam-Webster&lt;/p&gt;
&lt;p&gt;Koans takes a little work to install. &lt;a class="reference external" href="https://github.com/OmkarPathak/pygorithm"&gt;Pygorithm&lt;/a&gt; is an similar package for learning advanced more algorithm theories with python, and can be more easily installed by &lt;a class="reference external" href="https://github.com/OmkarPathak/pygorithm"&gt;pip&lt;/a&gt;.&lt;/p&gt;
</content><category term="programming, python"></category></entry><entry><title>Marketer Slash Programmer</title><link href="https://pythonmarketer.com/marketer-slash-programmer.html" rel="alternate"></link><published>2016-02-22T01:41:00-06:00</published><updated>2016-02-22T01:41:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-02-22:/marketer-slash-programmer.html</id><summary type="html">&lt;p&gt;I have studied and currently work in Marketing*, with around 5 years of experience. I&amp;nbsp;would like to begin sharing my journey through&amp;nbsp;the coding world. I have chosen Python as my language to explore, to start. I began last fall by completing three&amp;nbsp;&lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;free online courses on Coursera&lt;/a&gt; - taught …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have studied and currently work in Marketing*, with around 5 years of experience. I&amp;nbsp;would like to begin sharing my journey through&amp;nbsp;the coding world. I have chosen Python as my language to explore, to start. I began last fall by completing three&amp;nbsp;&lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;free online courses on Coursera&lt;/a&gt; - taught by an amazing professor, Dr. Charles Severance from the University of Michigan. Check 'em out if you want an epic introduction to Python and coding in general.&lt;/p&gt;
&lt;p&gt;I previously had a little bit of HTML experience - nothing else - so I am very new to coding and enjoying learning a little more every day. I'm going to post my trials, problems, and things I figure out along the way and anything else I find interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why do I want to learn to program?&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Rapidly growing segments of our lives rely on computers and similar technologies. It seems unwise to remain ignorant of their internal processes.&lt;/li&gt;
&lt;li&gt;Web apps are cool, useful and make our lives better. I'd like to build them.&lt;/li&gt;
&lt;li&gt;To strengthen myself professionally.&lt;/li&gt;
&lt;li&gt;To CREATE - coding is actually a very great creative outlet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Why Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's a language that emphasizes readability, is very versatile and has a great community of users to help you solve problems. It can be used for everything from the front end - functionality, user interface, etc. to the back end - data storage, server use, etc.&lt;/p&gt;
&lt;p&gt;My goal is to get better every day, and eventually build some cool shit.&lt;/p&gt;
&lt;p&gt;Thank you for reading,&lt;/p&gt;
&lt;p&gt;Erick&lt;/p&gt;
&lt;p&gt;*At the time I wrote this, I worked in a non-techincal marketing role. I've since moved into a role where I use Python nearly every day. If you're wondering how, I use &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/05/12/pandas-pythons-excel-powerhouse/"&gt;Pandas&lt;/a&gt;, &lt;a class="reference external" href="https://2.python-requests.org/en/master/"&gt;Requests&lt;/a&gt; and Excel a lot at my current gig.&lt;/p&gt;
</content><category term="business, programming"></category></entry><entry><title>about</title><link href="https://pythonmarketer.com/contact.html" rel="alternate"></link><published>2016-02-21T19:18:00-06:00</published><updated>2016-02-21T19:18:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:pythonmarketer.com,2016-02-21:/contact.html</id><summary type="html">&lt;p&gt;Python developer who automates tasks, builds apps and writes about coding. Send me your project \ event \ questions. Collaborative inquiries welcome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;, an investing and stocks blog&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.positivethoughts.pythonanywhere.com/"&gt;positivipy&lt;/a&gt;, text generation flask + mysql app built with fuzzywuzzy, ftfy, language_tool_python, textblob and markovify libraries&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Ask&lt;/a&gt; &lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Tame Impala,&lt;/a&gt; web2py + MongoDB Tame Impala …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python developer who automates tasks, builds apps and writes about coding. Send me your project \ event \ questions. Collaborative inquiries welcome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;, an investing and stocks blog&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.positivethoughts.pythonanywhere.com/"&gt;positivipy&lt;/a&gt;, text generation flask + mysql app built with fuzzywuzzy, ftfy, language_tool_python, textblob and markovify libraries&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Ask&lt;/a&gt; &lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Tame Impala,&lt;/a&gt; web2py + MongoDB Tame Impala lyrics search app&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mastacos.pythonanywhere.com/"&gt;mas tacos&lt;/a&gt;, proof of concept app with a US taco restaurant dataset&lt;/p&gt;
&lt;p&gt;[contact-form][contact-field label=&amp;quot;Name&amp;quot; type=&amp;quot;name&amp;quot; required=&amp;quot;1&amp;quot;/][contact-field label=&amp;quot;Email&amp;quot; type=&amp;quot;email&amp;quot; required=&amp;quot;1&amp;quot;/][contact-field label=&amp;quot;Website&amp;quot; type=&amp;quot;url&amp;quot;/][contact-field label=&amp;quot;Comment&amp;quot; type=&amp;quot;textarea&amp;quot; required=&amp;quot;1&amp;quot;/][/contact-form]&lt;/p&gt;
</content><category term="blog"></category></entry></feed>