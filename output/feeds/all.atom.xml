<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/all.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2023-07-27T22:23:00-05:00</updated><entry><title>Analyzing Football AKA Soccer With Python</title><link href="https://lofipython.com/analyzing-football-aka-soccer-with-python.html" rel="alternate"></link><published>2023-07-27T22:23:00-05:00</published><updated>2023-07-27T22:23:00-05:00</updated><author><name>lofipython</name></author><id>tag:lofipython.com,2023-07-27:/analyzing-football-aka-soccer-with-python.html</id><summary type="html">&lt;p&gt;The world's game is fun to watch. It's obvious when a team is dominant against a weaker opponent. What gives one team an edge over another? Is it short, crisp and reliable passing resulting in a high conversion percentage? Or shots on goal? Clinicality in the final third is what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The world's game is fun to watch. It's obvious when a team is dominant against a weaker opponent. What gives one team an edge over another? Is it short, crisp and reliable passing resulting in a high conversion percentage? Or shots on goal? Clinicality in the final third is what separates the Champions from the rest. Making the most of your chances.&lt;/p&gt;
&lt;p&gt;We all have our theories to what makes a great player or team. But how do we assess football performance from an analytics perspective? It is difficult to predict how teams with varying styles will match up. Fortunately, data is integrating with the football world. Extensive analytics resources and tactics now available for free online.&lt;/p&gt;
&lt;p&gt;If you're interested in football analytics, there seems to be a few areas you can go. Do you need to collect data? If you can record a game correctly, it can be converted into data from which winning insights are extracted. If you are lucky enough to already have data, what does it say about player and team performance? Can you study open data from professional teams to explore your hypotheses?&lt;/p&gt;
&lt;p&gt;Searching the internet, FC Python was the first thing I saw. They have some &lt;a class="reference external" href="https://fcpython.com/free-football-data-analysis-tools"&gt;free tools&lt;/a&gt; available for collecting data from live games. I was impressed at the Python code for &lt;a class="reference external" href="https://fcpython.com/visualisation/football-heatmaps-seaborn"&gt;pitch heat maps&lt;/a&gt; to track Abby Wombach's passing. Their example uses &lt;a class="reference external" href="https://seaborn.pydata.org/"&gt;seaborn&lt;/a&gt; and &lt;a class="reference external" href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;
&lt;span class="normal"&gt;66&lt;/span&gt;
&lt;span class="normal"&gt;67&lt;/span&gt;
&lt;span class="normal"&gt;68&lt;/span&gt;
&lt;span class="normal"&gt;69&lt;/span&gt;
&lt;span class="normal"&gt;70&lt;/span&gt;
&lt;span class="normal"&gt;71&lt;/span&gt;
&lt;span class="normal"&gt;72&lt;/span&gt;
&lt;span class="normal"&gt;73&lt;/span&gt;
&lt;span class="normal"&gt;74&lt;/span&gt;
&lt;span class="normal"&gt;75&lt;/span&gt;
&lt;span class="normal"&gt;76&lt;/span&gt;
&lt;span class="normal"&gt;77&lt;/span&gt;
&lt;span class="normal"&gt;78&lt;/span&gt;
&lt;span class="normal"&gt;79&lt;/span&gt;
&lt;span class="normal"&gt;80&lt;/span&gt;
&lt;span class="normal"&gt;81&lt;/span&gt;
&lt;span class="normal"&gt;82&lt;/span&gt;
&lt;span class="normal"&gt;83&lt;/span&gt;
&lt;span class="normal"&gt;84&lt;/span&gt;
&lt;span class="normal"&gt;85&lt;/span&gt;
&lt;span class="normal"&gt;86&lt;/span&gt;
&lt;span class="normal"&gt;87&lt;/span&gt;
&lt;span class="normal"&gt;88&lt;/span&gt;
&lt;span class="normal"&gt;89&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.patches&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Arc&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Data/passes.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_size_inches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Plot One - distinct areas with few lines&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kdeplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Xstart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ystart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_levels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Plot Two - fade lines with more of them&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kdeplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Xstart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ystart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_levels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Create figure&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_size_inches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Pitch Outline &amp;amp; Centre Line&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Left Penalty Area&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;16.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;16.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;16.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;16.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Right Penalty Area&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;113.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;113.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;113.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;113.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Left 6-yard Box&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Right 6-yard Box&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;124.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;124.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;124.5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;124.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Prepare Circles&lt;/span&gt;
&lt;span class="n"&gt;centreCircle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;9.15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;centreSpot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;leftPenSpot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rightPenSpot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;119&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Draw Circles&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;centreCircle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;centreSpot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPenSpot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightPenSpot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Prepare Arcs&lt;/span&gt;
&lt;span class="n"&gt;leftArc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;18.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;18.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theta1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;310&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theta2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rightArc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;119&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;18.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;18.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theta1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theta2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Draw Arcs&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftArc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightArc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Tidy Axes&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kdeplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Xstart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ystart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;shade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_levels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Display Pitch&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;img alt="Analyzing football with Python" src="https://lofipython.com/blog/images/pitchheatmap.png" /&gt;
&lt;p&gt;This code is meant for a &lt;a class="reference external" href="https://jupyter.org/install"&gt;Jupyter notebook&lt;/a&gt;. However, I can't find the &amp;quot;passes.csv&amp;quot; data referenced online to test it out. Still, impressive use of matplotlib and seaborn!&lt;/p&gt;
&lt;p&gt;Of course, in analytics data is king. Without it, you're the jester. If you need some data to chew on, check out statsbomb. Its a free footy dataset that's on display in this &lt;a class="reference external" href="https://towardsdatascience.com/how-to-easily-get-football-data-with-a-python-package-without-web-scraping-c922e7ebfb41"&gt;Towards Data Science blog post&lt;/a&gt;. In another practical example of wrangling data, Tactics FC shows how to &lt;a class="reference external" href="https://medium.com/&amp;#64;TacticsFC/analyzing-football-data-with-python-7b4e89c7abd8"&gt;calculate goal conversion rate with pandas&lt;/a&gt;. I'm guessing basic statskeeping and video is collected in great quantities by analytics teams during games for professional teams. At half time, typically on TV they will show both teams' shots, passes and time of possession.&lt;/p&gt;
&lt;p&gt;Another intriguing tactic is extensive tracking of individual player position and simulation on the pitch. Google hosted a &lt;a class="reference external" href="https://www.kaggle.com/competitions/google-football/code"&gt;Kaggle competition with Manchester City&lt;/a&gt; 3 years ago, where the goal was to train AI agents to play football. Formal courses are available like the &lt;a class="reference external" href="https://www.uu.se/en/study/course?query=1RT001"&gt;Mathematical Modeling of Football course at Uppsala University&lt;/a&gt;. There's also the &lt;a class="reference external" href="https://github.com/topics/football-analytics"&gt;football analytics topic&lt;/a&gt; on Github that shows 100+ repos for those who want to dive into analytics tools.&lt;/p&gt;
&lt;p&gt;From that topic, I found &lt;a class="reference external" href="https://github.com/diegopastor/awesome-football-analytics"&gt;Awesome Football Analytics&lt;/a&gt;, which is a long list of resources to browse through. It seems wise to stop through Jan Van Haren's &lt;a class="reference external" href="https://github.com/JanVanHaaren/soccer-analytics-resources"&gt;soccer analytics resources&lt;/a&gt;. I'm really looking forward to checking out &lt;a class="reference external" href="https://github.com/Friends-of-Tracking-Data-FoTD/SoccermaticsForPython/"&gt;Soccermatics for Python&lt;/a&gt; also. There is a ton of stuff online about football analytics that is happening.&lt;/p&gt;
&lt;p&gt;I sense there is a passionate community pushing football analytics forward and innovating. There are many facets to consider from video optimization, data collection, drawing insights from established datasets, tracking game stats and codifying player movements.&lt;/p&gt;
&lt;p&gt;Watching football is so satisfying. Why not study it with Python? My prediction is that the beautiful game will progress and improve as teams develop a more sophisticated data strategy.&lt;/p&gt;
</content><category term="football, coding, programming, python, sports"></category><category term="python football analytics Python football heat map"></category><category term="football data analytics"></category><category term="Python soccer analytics"></category></entry><entry><title>There's a Linter for That! Python Linter and Formatter Libraries You Gotta Know</title><link href="https://lofipython.com/There's-a-Linter-for-That-Python-Linting-Libraries-You-Should-Know.html" rel="alternate"></link><published>2023-07-23T21:10:00-05:00</published><updated>2023-07-23T21:10:00-05:00</updated><author><name>lofipython</name></author><id>tag:lofipython.com,2023-07-23:/There's-a-Linter-for-That-Python-Linting-Libraries-You-Should-Know.html</id><summary type="html">&lt;p&gt;Linters exist for almost every kind of structured document. Python code, SQL, reStructuredText and many data formats can be improved with a linting library. Python's ecosystem has no shortage of formatters and linters.&lt;/p&gt;
&lt;p&gt;In this post, I'll highlight the typical players and some niche linters you might not have heard …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linters exist for almost every kind of structured document. Python code, SQL, reStructuredText and many data formats can be improved with a linting library. Python's ecosystem has no shortage of formatters and linters.&lt;/p&gt;
&lt;p&gt;In this post, I'll highlight the typical players and some niche linters you might not have heard of! The best quality of linters is their ability to find potential problems in your code by enforcing domain-specific rules. In return, you receive a list of hints for fixing anti-patterns, inconsistencies or unused code to remove. Many linters also offer document reformatting capabilities like the ubiquitous black library for Python code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Linters and Formatters You Gotta Know&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/astral-sh/ruff"&gt;ruff&lt;/a&gt;: the lean and fast linter library that's gotten a lot of people's attention. For good reason, it's the easiest and fastest Python code linter, running rust under the hood. In my experience, using ruff has made me a more efficient Python programmer. The ruff CLI's &lt;strong&gt;--fix&lt;/strong&gt;  argument is a nice touch for automatically fixing up your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Run ruff on your Python script for quick and easy linting.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install ruff
ruff do_stuff.py
# Find Python code errors and fix them with ruff.
ruff do_stuff.py --fix
&lt;/pre&gt;
&lt;img alt="sqlfluff SQL linting CLI tool" src="https://lofipython.com/blog/images/sqlfluffexample.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.sqlfluff.com/en/stable/index.html"&gt;sqlfluff&lt;/a&gt;: &amp;quot;The SQL linter for humans&amp;quot;, sqlfluff is a linter and code reformatting tool to tidy up your database queries. sqlfluff does the little things like uppercase your keywords, add whitespace where appropriate, check syntax and in general clean up your scripts. The CLI is configurable for nearly all dialects from DuckDB, T-SQL, Redshift, MySQL, to SQLlite and more. Check the &lt;a class="reference external" href="https://github.com/sqlfluff/sqlfluff"&gt;sqlfluff Github repo&lt;/a&gt; for all their supported SQL dialects or use the &lt;strong&gt;sqlfluff dialects&lt;/strong&gt; command to list them in your shell. This is the library I want to tell every Python programmer about right now, along with ruff. SQL is everywhere, we all use it. SQL linters are not something most people even know exist. Next time you need to fix a broken SQL script or clean up some legacy code, enter this into your shell:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pip install sqlfluff
# Lint your SQL code.
sqlfluff lint stuff.sql
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Fix your SQL file in the PostgreSQL dialect.
sqlfluff fix stuff.sql --dialect postgres
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Check available SQL dialects.
sqlfluff dialects
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/json.html#module-json.tool"&gt;json.tool&lt;/a&gt;: a Python standard library CLI tool with JSON validation abilities. If you're working with json, remember this stock Python tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Validate JSON with a built-in python CLI tool.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
echo '{1.2:3.4}' | python -m json.tool
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pylint/"&gt;pylint&lt;/a&gt;: commonly used static code analyser that enforces PEP-8 and other rules in your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use pylint to improve to improve your Python scripts.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install pylint
pylint do_stuff.py
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;: a must-mention, this Python code formatter with some linting-like qualities if your code has syntax errors. I now run it on every script I write.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Reformat your code with black.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install black
python -m black do_stuff.py
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/yamllint/"&gt;yamllint&lt;/a&gt;: YAML is unavoidable as a configration staple in tons of modern software. It gets heaps of praise for its readability. I appreciated yamllint's instrospective linter when trying to figure out why my YAML config was broken.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lint your YAML files.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install --user yamllint
yamllint config.yaml
&lt;/pre&gt;
&lt;img alt="yamllint YAML linting CLI tool" src="https://lofipython.com/blog/images/yamllintexample.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;rstfmt and restructuredtext-lint (&lt;a class="reference external" href="https://pypi.org/project/restructuredtext-lint/"&gt;read more&lt;/a&gt;): Both of these reStructuredText format linter libaries offer code reformatting and linting abilities for reStructuredText files (.rst). I favored restructuredtext-lint, due to its rst-lint CLI tool. I used it to fix and tested it on old posts from this blog. Beware that using a reformatter might surface buried errors found by linting the RST, which you'll need to resolve by reading somewhat cryptic RST error messages given by your linter like &amp;quot;hyperlink mismatch, 1 reference but 0 targets&amp;quot;. At least the line number is provided so you have a relative scope of where the error is coming from. rstfmt is another &lt;a class="reference external" href="https://pypi.org/project/rstfmt/"&gt;Python CLI tool&lt;/a&gt; in this space. One note of using these tools is to watch out for unwanted changes. One effect I saw was having code blocks auto-converted from Python formatting to regular code formatting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lint and reformat your .rst documents.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install restructuredtext-lint
rst-lint post.rst
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Pelican + .rst or .md&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
RST is one of two &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/importer.html"&gt;pelican-import command line tool&lt;/a&gt; conversion options by the &lt;a class="reference external" href="https://docs.getpelican.com/en/3.6.3/quickstart.html"&gt;Pelican&lt;/a&gt; static site generator library, along with Markdown (.md). RST is the format this blog is composed in. Pelican has linting-like functionality when you run its &lt;strong&gt;pelican content&lt;/strong&gt; command to compile your static site.&lt;/blockquote&gt;
&lt;p&gt;Although I haven't used them personally, it's worth mentioning popular libraries like &lt;a class="reference external" href="https://pypi.org/project/pyflakes/"&gt;pyflakes&lt;/a&gt; and &lt;a class="reference external" href="https://pypi.org/project/flake8/"&gt;flake8&lt;/a&gt; for linting Python code. ruff supports some of these libraries also. Check out &lt;a class="reference external" href="https://pypi.org/project/pymarkdownlnt/"&gt;pymarkdownlint&lt;/a&gt; for linting Markdown documents. While researching for this post, I even stumbled upon an HTML linting command line tool that exists. &lt;a class="reference external" href="https://pypi.org/project/html-linter/"&gt;html-linter&lt;/a&gt; applies linting to your HTML code. Starting to think that behind every seasoned Python programmer is a thick stack of linters! When it comes to fixing and refactoring old documents and code, linters and auto-formatters go hand in hand as invaluable tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lint your Markdown documents.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install pymarkdownlnt
pymarkdown scan example.md
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Lint your HTML documents.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pip install html-linter
html_lint.py filename.html
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading + Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://opensource.com/article/18/7/7-python-libraries-more-maintainable-code"&gt;7 Python libraries for more maintainable code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html"&gt;reStructuredText documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.sqlfluff.com/en/stable/cli.html"&gt;sqlfluff CLI documentation reference&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python, linting, tools"></category><category term="python linters"></category><category term="linting tools"></category><category term="python RST linting"></category><category term="SQL linting"></category><category term="code linting"></category><category term="HTML linter"></category><category term="Markdown linter"></category></entry><entry><title>15 Cloudflare Pages Free Plan Features</title><link href="https://lofipython.com/15-Cloudflare-Pages-Free-Plan-Features.html" rel="alternate"></link><published>2023-07-09T21:16:00-05:00</published><updated>2023-07-09T21:16:00-05:00</updated><author><name>lofipython</name></author><id>tag:lofipython.com,2023-07-09:/15-Cloudflare-Pages-Free-Plan-Features.html</id><summary type="html">&lt;p&gt;Recently, this blog switched to &lt;a class="reference external" href="https://pages.cloudflare.com/"&gt;Cloudflare Pages&lt;/a&gt; after years of hosting on WordPress. I'm now using the free plan and enjoying the various settings that allow you control aspects of security at a level not found in WordPress.&lt;/p&gt;
&lt;p&gt;For example, you can activate the &amp;quot;bot fight mode&amp;quot;, &amp;quot;browser integrity check …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, this blog switched to &lt;a class="reference external" href="https://pages.cloudflare.com/"&gt;Cloudflare Pages&lt;/a&gt; after years of hosting on WordPress. I'm now using the free plan and enjoying the various settings that allow you control aspects of security at a level not found in WordPress.&lt;/p&gt;
&lt;p&gt;For example, you can activate the &amp;quot;bot fight mode&amp;quot;, &amp;quot;browser integrity check&amp;quot; and &amp;quot;user agent blocking&amp;quot; settings to help you fend off bad actors.&lt;/p&gt;
&lt;img alt="enable bot fight mode" src="https://lofipython.com/blog/images/botfightmode.png" /&gt;
&lt;p&gt;Enable bot fight mode.&lt;/p&gt;
&lt;img alt="run a speed test on your blog" src="https://lofipython.com/blog/images/speedtest.png" /&gt;
&lt;p&gt;Run a speed test on your blog.&lt;/p&gt;
&lt;img alt="enable crawler hints" src="https://lofipython.com/blog/images/crawlerhints.png" /&gt;
&lt;p&gt;Turn on search engine hints.&lt;/p&gt;
&lt;img alt="see crawler traffic" src="https://lofipython.com/blog/images/topcrawlers.png" /&gt;
&lt;p&gt;See which search engines are crawling your blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here are my top Cloudflare Pages features:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Zone analytics: the primary analytics to view unique visitors count, requests, bandwidth and network error logging&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/cache/advanced-configuration/crawler-hints/"&gt;crawler hints&lt;/a&gt;: turn on hints to search engine crawlers and avoid wasteful compute&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/support/firewall/learn-more/understanding-cloudflare-tor-support-and-onion-routing/#onion-routing"&gt;bot fight mode&lt;/a&gt;: enabling this mode will stop malicious bots&lt;/li&gt;
&lt;li&gt;security center scan: validates your DNS configuration and tells you if anything needs fixed&lt;/li&gt;
&lt;li&gt;run a speed test: test your site's speed&lt;/li&gt;
&lt;li&gt;enable IP geolocation: includes the country code for each blog visitor&lt;/li&gt;
&lt;li&gt;GraphQL API: extensible analytics HTTP API&lt;/li&gt;
&lt;li&gt;AMP real url: ask Google to show your site's actual url in AMP&lt;/li&gt;
&lt;li&gt;notifications: set email alerts to monitor your website&lt;/li&gt;
&lt;li&gt;security events log: monitor managed challenges and bots&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/fundamentals/security/browser-integrity-check/"&gt;browser integrity check&lt;/a&gt;: looks for common http headers abused by spammers&lt;/li&gt;
&lt;li&gt;user agent blocking: blocks users with malicious user agent&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="0-RTTConnectionResumption"&gt;0-RTT Connection Resumption&lt;/a&gt;: enable &amp;quot;0-Round Trip Time&amp;quot;, optimized DNS for your blog&lt;/li&gt;
&lt;li&gt;DNS Analytics: see DNS traffic visualizations&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/support/firewall/learn-more/understanding-cloudflare-tor-support-and-onion-routing/#onion-routing"&gt;Onion Routing&lt;/a&gt;: serve your website's content in a tor-friendly way&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are all included in the free plan. Some are enabled out of the box and others need to be toggled on to activate. I'm really digging my two Cloudflare Pages blogs. It's taken some time to get used to writing in &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText format&lt;/a&gt;. Using pelican for static site generation is working well.&lt;/p&gt;
&lt;p&gt;One quirk of Cloudflare is that only the past 30 days of data is stored. It's not as convenient as Wordpress, which stores the entire analytics history of a blog's traffic. However, Cloudflare's GraphQL API is also an option for your data querying needs. Regardless, I'm very impressed at the level of configuration Cloudflare exposes out of the box!&lt;/p&gt;
</content><category term="coding, programming, blogging, web hosting"></category><category term="Cloudflare Pages blog"></category><category term="best Cloudflare website features"></category><category term="Cloudflare blog hosting features"></category></entry><entry><title>How to Fix Pip Install Site-Packages --user Error</title><link href="https://lofipython.com/fix-python-pip-user-install-error.html" rel="alternate"></link><published>2023-05-17T20:35:00-05:00</published><updated>2023-05-17T20:35:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-05-17:/fix-python-pip-user-install-error.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;While running Python version 3.8.10 today, out of the blue I saw this error attempting to pip install a package in my virtual environment:&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
ERROR: Cannot perform a '--user' install. User site-packages are not visible in this virtualenv.
&lt;/pre&gt;
&lt;p&gt;I found a &lt;a class="reference external" href="https://github.com/microsoft/vscode-python/issues/14327"&gt;Github thread&lt;/a&gt; that fixed the problem! You …&lt;/p&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;While running Python version 3.8.10 today, out of the blue I saw this error attempting to pip install a package in my virtual environment:&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
ERROR: Cannot perform a '--user' install. User site-packages are not visible in this virtualenv.
&lt;/pre&gt;
&lt;p&gt;I found a &lt;a class="reference external" href="https://github.com/microsoft/vscode-python/issues/14327"&gt;Github thread&lt;/a&gt; that fixed the problem! You need to update your pyvenv.cfg in order to resolve this conflict.&lt;/p&gt;
&lt;p&gt;Here is how to fix your Python environment from Github user &lt;a class="reference external" href="https://github.com/microsoft/vscode-python/issues/14327#issuecomment-757408341"&gt;jawalahe&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to the pyvenv.cfg file in the virtual environment folder.&lt;/li&gt;
&lt;li&gt;Set include-system-site-packages to true and save the change.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After completing this, my pip installs worked again and no longer returned the error.&lt;/p&gt;
</content><category term="coding, python"></category><category term="pip"></category><category term="python install"></category><category term="troubleshooting error"></category></entry><entry><title>Wordpress to Pelican Blog Migration Complete</title><link href="https://lofipython.com/wordpress-to-pelican-blog-migration-complete.html" rel="alternate"></link><published>2023-05-15T17:45:00-05:00</published><updated>2023-05-15T17:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-05-15:/wordpress-to-pelican-blog-migration-complete.html</id><summary type="html">&lt;p&gt;This blog is formerly known as &amp;quot;Python Marketer&amp;quot; from 2016 to 2023. In
May 2023, I've begun the migration from Wordpress's &amp;quot;Personal&amp;quot; plan to a
free, Pythonic &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt; static site. 100 posts are now hosted here exclusively on lofipython.com.
I will be posting my projects, Python explorations and technical …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog is formerly known as &amp;quot;Python Marketer&amp;quot; from 2016 to 2023. In
May 2023, I've begun the migration from Wordpress's &amp;quot;Personal&amp;quot; plan to a
free, Pythonic &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt; static site. 100 posts are now hosted here exclusively on lofipython.com.
I will be posting my projects, Python explorations and technical notes
here going forward. Thank you for reading and I hope you
enjoy these Python musings. If you want to keep up with my writing, I
recommend using an RSS reader to follow the RSS or Atom feeds.&lt;/p&gt;
&lt;p&gt;I’ve decided to continue blogging under a new Python moniker
which is more fitting of who I am as a Pythonista in 2023. WordPress
gave me my start as a blogger before I had the capabilities to make my
own. Now, I’ve switched from their “Personal” plan to a Pelican +
Cloudlare Pages free plan blog stack. It’s going great so far and will
save me $48 per year vs. WordPress. Not to mention, I have a hard backup
of all my content and host it on Github! I’m no longer dependent on a
paid blogging platform to serve my blog. Huge win all around. Here’s to
whatever Python projects are next!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Next Chapter: Lo-Fi Python&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
Lo-fi (also typeset as lofi or low-fi; short for low fidelity) is a
music or production quality in which elements usually regarded as
imperfections in the context of a recording or performance are present,
sometimes as a deliberate choice. &lt;em&gt;Wikipedia&lt;/em&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Spirit of Low Fidelity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lo-Fi Python aims to find the &amp;quot;lo-fi&amp;quot; spirit of Python. Doing more with
less. Favoring the standard library. Lowest possible time to MVP
(minimum viable product). Learning new libraries. Exploring the
ecosystem with playful curiosity. Embrace helping others by helping
yourself. This is the way.&lt;/p&gt;
</content><category term="coding, python, writing, meta"></category><category term="wordpress pelican migration"></category><category term="pelican blog"></category><category term="python static site"></category></entry><entry><title>Using Bing + GPT-4 to Write a Python Script for Windows Computer Maintenance</title><link href="https://lofipython.com/using-bing-chatgpt-to-write-a-python-script-for-windows-computer-maintenance.html" rel="alternate"></link><published>2023-02-26T22:05:00-06:00</published><updated>2023-02-26T22:05:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-02-26:/using-bing-chatgpt-to-write-a-python-script-for-windows-computer-maintenance.html</id><summary type="html">&lt;p&gt;Today, I was granted access to Bing's large language model, the next generation GPT-4. Bing's chat is the &amp;quot;more powerful&amp;quot; successor to &lt;a class="reference external" href="https://openai.com/"&gt;OpenAI&lt;/a&gt;'s groundbreaking chat service that's generating heaps of hype in addition to its AI text generation abilities. I gained the new chat functionality a few weeks after …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I was granted access to Bing's large language model, the next generation GPT-4. Bing's chat is the &amp;quot;more powerful&amp;quot; successor to &lt;a class="reference external" href="https://openai.com/"&gt;OpenAI&lt;/a&gt;'s groundbreaking chat service that's generating heaps of hype in addition to its AI text generation abilities. I gained the new chat functionality a few weeks after joining the Bing waitlist.&lt;/p&gt;
&lt;div class="wp-image-7521 figure"&gt;
&lt;img alt="chatting with Bing" src="https://pythonmarketer.files.wordpress.com/2023/02/screenshot_20230301-225703-397.png?w=704" /&gt;
&lt;/div&gt;
&lt;p&gt;A guilty pleasure of mine is fixing up old Windows machines by installing updates and running command prompt tools like SFC and chkdsk. There's also GUI based tools like disk cleanup and the disk defragmenter.&lt;/p&gt;
&lt;p&gt;My HP computer on Windows 10 is running slow and steady. It's an old model, so I want to improve performance wherever possible and hopefully speed it up. Enter Bing.&amp;nbsp;It did what I wanted and more, but I needed to rephrase my first question to get better results.&lt;/p&gt;
&lt;p&gt;First, I asked how to improve performance on a Windows computer. Bing offered generic windows maintenance tips, then followed up to ask my operating system version, which is Windows 10. When I informed Bing it offered more targeted advice after I rephrased my question to focus on command line commands.&lt;/p&gt;
&lt;div class="wp-image-7473 figure"&gt;
&lt;img alt="Bing chat response" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image-214678727-1677463333126.png?w=618" /&gt;
&lt;/div&gt;
&lt;div class="wp-image-7500 figure"&gt;
&lt;img alt="Bing chat suggestions" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image845498026-1677473969816.png?w=884" /&gt;
&lt;/div&gt;
&lt;p&gt;I then asked a new question in a fresh chat session. This time I included my OS and asked more specifically for Windows command prompt commands for improving performance. Bing listed a few options and gave a little context of what they do. Then I was presented options to show how to use powercfg or msconfig.&lt;/p&gt;
&lt;div class="wp-image-7480 figure"&gt;
&lt;img alt="msconfig examples" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image1028440375-1677466609760.png?w=588" /&gt;
&lt;/div&gt;
&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;How to use powercfg according to Bing:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-image-7479 figure"&gt;
&lt;img alt="how to use powercfg" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image885862200-1677466557121.png?w=584" /&gt;
&lt;/div&gt;
&lt;/figure&gt;&lt;p&gt;Bing chat helped me find and remember the &lt;strong&gt;SFC /scannow&lt;/strong&gt; command. It caches copies of files, fixes corrupted files and may speed up your machine.&lt;/p&gt;
&lt;p&gt;You can even prompt Bing for detailed examples of how to use specific windows commands. To get this kind of result from a search engine is incredible. It's like Bing is your own personal tutor. As someone who is constantly googling how to do computer and programming related things, this feels impressive. This was my first time using this service and it has raised the bar for searching the web. I then prompted Bing for a Python script capable of running the SFC command and had my first &amp;quot;wow&amp;quot; moment.&lt;/p&gt;
&lt;div class="wp-image-7467 figure"&gt;
&lt;img alt="Bing writing a Python script" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image885068823-1677461283407.png?w=559" /&gt;
&lt;/div&gt;
&lt;div class="wp-image-7468 figure"&gt;
&lt;img alt="Bing writes a Python script" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image774027644-1677461889456.png?w=849" /&gt;
&lt;/div&gt;
&lt;p&gt;Then it asks if I want the Python code explained. I'm so chuffed at this point. It tapped the &lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html"&gt;subprocess module&lt;/a&gt; to write the script and capture its output. Simply stunning.&lt;/p&gt;
&lt;p&gt;SFC requires an administrator command prompt. You can start an admin command prompt from the start menu. I ran &amp;quot;python run_sfc.py&amp;quot; containing the below script on version Python 3.11. The command finished running approximately 20 minutes later. Additionally, if you get the error 'utf-8' bytes can't be decoded, you'll need to pass an encoding argument to decode(). Ok, here's &lt;strong&gt;the Python script&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Import the subprocess module&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="c1"&gt;# Define the SFC command as a list of arguments&lt;/span&gt;
&lt;span class="n"&gt;sfc_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sfc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/scannow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Run the SFC command using subprocess.run and capture the output&lt;/span&gt;
&lt;span class="n"&gt;sfc_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfc_command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capture_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Print the output of the SFC command&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfc_output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7493 figure"&gt;
&lt;img alt="Bing Chat coding" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image63547969-1677469517174.png?w=911" /&gt;
&lt;/div&gt;
&lt;div class="wp-image-7491 figure"&gt;
&lt;img alt="Bing chat explains code" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image-324660109-1677469443109.png?w=527" /&gt;
&lt;/div&gt;
&lt;div class="wp-image-7517 figure"&gt;
&lt;img alt="Bing chat explains code" src="https://pythonmarketer.files.wordpress.com/2023/02/wp-1677631583420.png" /&gt;
&lt;/div&gt;
&lt;p&gt;If your text is using a non-English character encoding, I found you may need to pass a different encoding besides the default utf-8. For example, I found this to work if your command prompt characters are in Spanish:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# en español&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfc_output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latin-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7475 figure"&gt;
&lt;img alt="Python encoding traceback" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image1620635696-1677463544366.png?w=632" /&gt;
&lt;/div&gt;
&lt;p&gt;You could also use a Windows batch file of course:&lt;/p&gt;
&lt;div class="wp-image-7524 figure"&gt;
&lt;img alt="Windows batch file instructions from Bing" src="https://pythonmarketer.files.wordpress.com/2023/02/screenshot_20230301-231228-130.png?w=494" /&gt;
&lt;/div&gt;
</content><category term="automation, coding, command prompt, performance, productivity, programming, python, Scripts, software"></category><category term="AI chat"></category><category term="Bing ChatGPT Review"></category><category term="Python code Bing and ChatGPT"></category><category term="Windows 10 Command Line"></category><category term="Windows Maintenance"></category></entry><entry><title>40 Open Source Libraries and Tools for the Modern Developer</title><link href="https://lofipython.com/40-open-source-libraries-and-tools-for-the-modern-developer.html" rel="alternate"></link><published>2023-02-25T16:21:00-06:00</published><updated>2023-02-25T16:21:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-02-25:/40-open-source-libraries-and-tools-for-the-modern-developer.html</id><summary type="html">&lt;p&gt;I usually find a lot of these tools from viewing GitHub's &lt;a class="reference external" href="https://github.com/trending"&gt;trending repositories&lt;/a&gt;. When I find a novel repo, I'll &lt;a class="reference external" href="https://github.com/erickbytes?tab=stars"&gt;star&lt;/a&gt; it to remember for later. This is a list of free, open source software spanning security, AI, cloud, HTTP, JSON, monitoring, dev ops and more.&lt;/p&gt;
&lt;p&gt;I enjoy finding and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I usually find a lot of these tools from viewing GitHub's &lt;a class="reference external" href="https://github.com/trending"&gt;trending repositories&lt;/a&gt;. When I find a novel repo, I'll &lt;a class="reference external" href="https://github.com/erickbytes?tab=stars"&gt;star&lt;/a&gt; it to remember for later. This is a list of free, open source software spanning security, AI, cloud, HTTP, JSON, monitoring, dev ops and more.&lt;/p&gt;
&lt;p&gt;I enjoy finding and cataloging new packages as much as using them sometimes. Some of these I'll never use. By filing them away, I can recall in it the future if I am faced with a problem that they can solve. Enjoy!&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/NVIDIA/NeMo"&gt;NeMo&lt;/a&gt;: a LLM (large language model) toolkit for conversational AI from Nvidia&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/microsoft/LMOps"&gt;LMOps&lt;/a&gt;: general technology for enabling LLMs from Microsoft&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/prometheus/prometheus"&gt;Prometheus&lt;/a&gt;: open source monitoring tool, built on top of Go&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aws/aws-cli"&gt;aws-cli&lt;/a&gt;: universal command line AWS interface&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://httptoolkit.com/"&gt;httptoolkit&lt;/a&gt;: &amp;quot;HTTP Toolkit is a beautiful &amp;amp; open-source tool for debugging, testing and building with HTTP(S) on Windows, Linux &amp;amp; Mac&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/curl/curl"&gt;curl&lt;/a&gt;: ubiquitous command line tool for transferring data with URL syntax&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lwthiker/curl-impersonate"&gt;curl-impersonate&lt;/a&gt;: a special build of curl that can impersonate Chrome and Firefox browsers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;: touted JSON processor command line tool&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kellyjonbrazil/jc"&gt;jc&lt;/a&gt;: CLI tool and Python library that converts out of popular command line tools to other formats&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/jsonview/gmegofmjomhknnokphhckolhcffdaihd"&gt;JSONView&lt;/a&gt;: a Chrome web extension that applies syntax highlighting and folding to JSON in your browser, written in Typescript&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/buffer/thug"&gt;thug&lt;/a&gt;: a Python based &amp;quot;honey client&amp;quot;, used to mimic user behavior in a web browser in order to detect and emulate malicious content&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://opentelemetry.io/docs/concepts/what-is-opentelemetry/"&gt;OpenTelemetry&lt;/a&gt;: open source tracing and monitoring app&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nocodb/nocodb"&gt;nocodb&lt;/a&gt;: an open source airtable alternative&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pwnesia/dnstake"&gt;dnstake&lt;/a&gt;: a fast tool to check for &lt;a class="reference external" href="https://www.cloudflare.com/learning/dns/what-is-dns/"&gt;DNS&lt;/a&gt; vulnerabilities&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/schollz/croc"&gt;croc&lt;/a&gt;: easily and securely send things from one computer to another&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jarun/buku"&gt;buku&lt;/a&gt;: inter-browser bookmark transfer tool&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/backstage/backstage"&gt;backstage&lt;/a&gt;: an open platform for building developer portals, written in Typescript&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getsentry/sentry"&gt;sentry&lt;/a&gt;: a &amp;quot;developer first&amp;quot; error tracking and performance monitoring platform&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/runsidekick/sidekick"&gt;sidekick&lt;/a&gt;: free and open source live action debugging platform, like chrome dev tools for your backend&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/prowler-cloud/prowler"&gt;Prowler&lt;/a&gt;: an open source security tool to perform cloud best practices&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.earthly.dev/basics/part-1-a-simple-earthfile"&gt;Earthly&lt;/a&gt;: create a CI/CD continuous developer system&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/metabase/metabase"&gt;metabase&lt;/a&gt;: the easy, open source way for everyone in your company to ask questions and learn from data&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/zulip/zulip"&gt;Zulip&lt;/a&gt;: open source team chat&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/laurent22/joplin"&gt;Joplin&lt;/a&gt;: an open source note taking and to do list application&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/visual-layer/fastdup"&gt;fastup&lt;/a&gt;: a tool for gaining insights from large image collections and detecting anomalies&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/upptime/upptime"&gt;Upptime&lt;/a&gt;: an open source uptime monitor and status page connected to Github&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/danielgatis/rembg"&gt;Rembg&lt;/a&gt;: tool to remove the background from images&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/erickbytes?after=Y3Vyc29yOnYyOpK5MjAyMi0wNy0wNFQyMTowNzozMy0wNTowMM4UjkSj&amp;amp;tab=stars"&gt;dyna-cli&lt;/a&gt;: convert Python functions to Linux shell commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/penpot/penpot"&gt;Penpot&lt;/a&gt;: the open source design &amp;amp; prototyping platform&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/levkk/pgcat"&gt;pgcat&lt;/a&gt;: postgresQL pooler with sharding, load balancing and fail over support&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/spotify/pedalboard"&gt;pedalboard&lt;/a&gt;: a Python library for working with audio from Spotify&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/open-rpa/openrpa"&gt;OpenRPA&lt;/a&gt;: free open source enterprise grade robot process automation software. See also: &lt;a class="reference external" href="https://lofipython.com/how-to-open-firefox-with-webbrowser-on-ubuntu-linux/"&gt;more free RPA tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rednafi/hook-slinger"&gt;hook-slinger&lt;/a&gt;: manage webhooks with Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ozmartian/vidcutter"&gt;vidcutter&lt;/a&gt;: a modern video editing tool&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/s0md3v/XSStrike"&gt;XSSstrike&lt;/a&gt;: most advanced Cross Site Scripting detector&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wifiphisher/wifiphisher"&gt;wifiPhisher&lt;/a&gt;: wifi security testing tool with Python extensions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt;: an &amp;quot;any infrastructure&amp;quot; automation tool built on Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/locustio/locust"&gt;Locust&lt;/a&gt;: a scalable load testing Python library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt;: simple, Pythonic remote execution and deployment via ssh&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ShareX/ShareX"&gt;ShareX&lt;/a&gt;: free and open source program that lets you capture and record your screen, written in C#&lt;/li&gt;
&lt;/ol&gt;
</content><category term="apps, coding, command prompt, data, HTTP, json, productivity, programming, python, software"></category><category term="free software"></category><category term="free tools for developers"></category><category term="open source tools"></category><category term="opens source software"></category></entry><entry><title>"Shutdown" a Windows Computer by Double-clicking a Batch File</title><link href="https://lofipython.com/shutdown-windows-in-a-batch-file.html" rel="alternate"></link><published>2023-02-21T18:28:00-06:00</published><updated>2023-02-21T18:28:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-02-21:/shutdown-windows-in-a-batch-file.html</id><summary type="html">&lt;p&gt;Here is a quick and easy way to automate turning off your computer. This saves me about 15 seconds to manually click the start menu and restart buttons. It worked for me on an old, laggy HP computer running the Windows 10 operating system. Now, I can double-click a batch …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a quick and easy way to automate turning off your computer. This saves me about 15 seconds to manually click the start menu and restart buttons. It worked for me on an old, laggy HP computer running the Windows 10 operating system. Now, I can double-click a batch file on my Desktop and walk away while it struggles.&lt;/p&gt;
&lt;p&gt;Batch files are executable via:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;double-clicking them&lt;/li&gt;
&lt;li&gt;right-clicking and selecting &amp;quot;Run&amp;quot;&lt;/li&gt;
&lt;li&gt;entering the batch file name in command prompt, ex: &amp;quot;shut down CPU.bat&amp;quot; if the current working directory is in the same folder as the batch file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open a blank Notepad document and save as &lt;strong&gt;shut down CPU.bat&lt;/strong&gt; with this text:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /c shutdown -s
&lt;/pre&gt;
&lt;div class="wp-image-7432 figure"&gt;
&lt;img alt="Source: `Microsoft shutdown documentation &amp;lt;https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2023/02/screenshot_20230221-225405-494.png?w=681" /&gt;
&lt;p class="caption"&gt;Source: &lt;a class="reference external" href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown"&gt;Microsoft shutdown documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When this batch file runs, it will trigger a pop-up window warning that your computer is about to shut down. For my slow, slogging computer it shut off about 20 seconds later. This may also trigger queued automatic updates to install, which happened when I used the above command.&lt;/p&gt;
&lt;div class="wp-image-7423 figure"&gt;
&lt;img alt="`Source: Stack Overflow &amp;lt;https://stackoverflow.com/questions/162304/how-do-i-shutdown-restart-or-log-off-windows-via-a-bat-file&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image1037058739-1677025419090.png?w=687" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/162304/how-do-i-shutdown-restart-or-log-off-windows-via-a-bat-file"&gt;Source: Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="automation, coding, Windows"></category><category term="windows automation"></category><category term="windows batch files"></category></entry><entry><title>App Review: Why You Should Use Pocket to Save Your Reads</title><link href="https://lofipython.com/app-review-why-you-should-use-pocket-to-save-your-reads.html" rel="alternate"></link><published>2023-02-20T12:38:00-06:00</published><updated>2023-02-20T12:38:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-02-20:/app-review-why-you-should-use-pocket-to-save-your-reads.html</id><summary type="html">&lt;p&gt;I'm really enjoying using &lt;a class="reference external" href="https://help.getpocket.com/"&gt;Pocket&lt;/a&gt; as my primary reading app on my cell phone. My top need is to download articles I find on the internet for offline viewing. This app does that and more in a smooth interface. This review reflects the perspective of using the &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro"&gt;Pocket Android version …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm really enjoying using &lt;a class="reference external" href="https://help.getpocket.com/"&gt;Pocket&lt;/a&gt; as my primary reading app on my cell phone. My top need is to download articles I find on the internet for offline viewing. This app does that and more in a smooth interface. This review reflects the perspective of using the &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro"&gt;Pocket Android version&lt;/a&gt; 8.1.1.0, pictured here:&lt;/p&gt;
&lt;div class="wp-image-7409 figure"&gt;
&lt;img alt="dark theme with saved articles" src="https://pythonmarketer.files.wordpress.com/2023/02/screenshot_20230220-104934.png?w=446" /&gt;
&lt;p class="caption"&gt;dark theme with saved articles&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Key Features and Benefits&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;download articles &amp;amp; blogs to read offline&lt;/li&gt;
&lt;li&gt;quickly share a webpage to the Pocket app in 2 taps from your browser&lt;/li&gt;
&lt;li&gt;dark or light themes available&lt;/li&gt;
&lt;li&gt;free app, downloadable on your &lt;a class="reference external" href="https://help.getpocket.com/category/845-category"&gt;Android&lt;/a&gt; or &lt;a class="reference external" href="https://help.getpocket.com/category/842-category"&gt;iOS&lt;/a&gt; device&lt;/li&gt;
&lt;li&gt;converts and stores articles as podcast style listenable audio&lt;/li&gt;
&lt;li&gt;ability to archive or delete old articles&lt;/li&gt;
&lt;li&gt;includes tags to categorize your reads&lt;/li&gt;
&lt;li&gt;filter by length of the read, &amp;quot;short reads&amp;quot; or &amp;quot;long reads&amp;quot; and read or unread&lt;/li&gt;
&lt;li&gt;the length of the article is displayed in minutes it takes to read it&lt;/li&gt;
&lt;li&gt;chooses the best format to present the website, as &amp;quot;article view&amp;quot; or &amp;quot;web view&amp;quot;&lt;/li&gt;
&lt;li&gt;auto-bookmarking, aka you can close out of an article and it will remember where you were the next time you open it&lt;/li&gt;
&lt;li&gt;discover new stuff to read within the Pocket app&lt;/li&gt;
&lt;li&gt;highlight key points in a text to remember and save for later&lt;/li&gt;
&lt;li&gt;For developers, there is a &lt;a class="reference external" href="https://getpocket.com/developer/docs/overview"&gt;Pocket API&lt;/a&gt;. &lt;a class="reference external" href="https://help.getpocket.com/category/858-category"&gt;Apps and integrations&lt;/a&gt; are available for other products like Zapier, Evernote, Amazon Alexa and Slack.&lt;/li&gt;
&lt;li&gt;created by Mozilla, a privacy friendly company that also created the Firefox web browser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-7407 figure"&gt;
&lt;img alt="saving is quick and easy" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image-864396039-1676910572447.png?w=958" /&gt;
&lt;p class="caption"&gt;saving is quick and easy&lt;/p&gt;
&lt;/div&gt;
&lt;div class="wp-image-7408 figure"&gt;
&lt;img alt="filter saved articles by length" src="https://pythonmarketer.files.wordpress.com/2023/02/image_editor_output_image-977770758-1676912977434.png?w=530" /&gt;
&lt;p class="caption"&gt;filter saved articles by length&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Pocket app is an overall great product and I felt compelled to endorse it here for the satisfaction it has brought me a in a short amount of time. It has increased my reading throughput. It's perfect for when you find yourself without an internet connection, in sparsely populated areas, on an airplane or while traveling in foreign countries.&lt;/p&gt;
&lt;p&gt;I recommend this app to anyone who compulsively reads blogs and articles. It will help you keep up with the neverending stream of text also known as the internet. Might I suggest saving a few posts from this blog also?&lt;/p&gt;
</content><category term="apps, internet, productivity"></category><category term="Pocket app review"></category><category term="Pocket reading app benefits"></category><category term="reading articles online"></category></entry><entry><title>Getting People to Use Software is Hard</title><link href="https://lofipython.com/getting-people-to-use-software-is-hard.html" rel="alternate"></link><published>2023-02-15T22:23:00-06:00</published><updated>2023-02-15T22:23:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-02-15:/getting-people-to-use-software-is-hard.html</id><summary type="html">&lt;p&gt;You're sure you've created a stellar solution to a problem at hand. You took the time to think an idea out and execute. You iterated tirelessly, making tweaks and creating a tool that will sell itself to potential human users. Everyone loves their own creation. Others will realize the tool's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You're sure you've created a stellar solution to a problem at hand. You took the time to think an idea out and execute. You iterated tirelessly, making tweaks and creating a tool that will sell itself to potential human users. Everyone loves their own creation. Others will realize the tool's value too!&lt;/p&gt;
&lt;p&gt;There's only one problem. People's default setting is to not want to use your software. Whether it's low code, no code, Excel, PHP or Python driven, people are resistant to software. They don't want to use it unless it's so obvious and easy that the value is immediately visible.&lt;/p&gt;
&lt;div class="wp-image-7404 figure"&gt;
&lt;img alt="`Image Source &amp;lt;https://community.spiceworks.com/topic/2181519-what-s-the-deal-with-open-source-software&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2023/02/open_source.png?w=331" /&gt;
&lt;/div&gt;
&lt;p class="center"&gt;&lt;a class="reference external" href="https://community.spiceworks.com/topic/2181519-what-s-the-deal-with-open-source-software"&gt;Image Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Getting humans to put in the time and effort to learn how to use your tools is really tough. It has to be excellent. The bar is high. You have to understand your users' needs and perceptions intimately. And even then, you'll probably still fail. Regardless, we keep trying because we are obsessed with solving a problem or simply paid to keep trying to solve the problem.&lt;/p&gt;
&lt;p&gt;Building a solution is easy. Automating a task to maintain application state is also sometimes. In my experience, making something that other humans will actually trust and use is not. Keep trying. /rant&lt;/p&gt;
</content><category term="APIs, apps, coding, product development, programming, software, Uncategorized"></category><category term="building apps"></category><category term="making software"></category><category term="solving problems"></category></entry><entry><title>6 of the Hottest Python Libraries in 2023</title><link href="https://lofipython.com/6-of-the-hottest-python-libraries-in-2023.html" rel="alternate"></link><published>2023-01-22T14:56:00-06:00</published><updated>2023-01-22T14:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-01-22:/6-of-the-hottest-python-libraries-in-2023.html</id><summary type="html">&lt;p&gt;Here's a short list of Python packages making a splash this year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyscript.net/"&gt;pyscript&lt;/a&gt;: execute Python code in your web browser&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/charliermarsh/ruff"&gt;ruff&lt;/a&gt;: code linting package built with Rust and Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;: a rapidly adopted web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pola.rs/"&gt;polars&lt;/a&gt;: high performance pandas drop in replacement, also built with Rust and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here's a short list of Python packages making a splash this year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyscript.net/"&gt;pyscript&lt;/a&gt;: execute Python code in your web browser&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/charliermarsh/ruff"&gt;ruff&lt;/a&gt;: code linting package built with Rust and Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;: a rapidly adopted web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pola.rs/"&gt;polars&lt;/a&gt;: high performance pandas drop in replacement, also built with Rust and Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/chidiwilliams/buzz"&gt;buzz&lt;/a&gt;: Python package that accesses the Whisper API's text transcription of audio&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/tomllib.html"&gt;tomllib&lt;/a&gt;: new in the Python 3.11 standard library. It's quietly picking up steam amongst Python developers. Tom's Obvious Minimal Language, TOML, &amp;quot;&lt;a class="reference external" href="https://toml.io/en/"&gt;a config file format for humans&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-7389 figure"&gt;
&lt;img alt="Python + Rust logos" src="https://pythonmarketer.files.wordpress.com/2023/01/wp-1674420268721.png?w=780" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python + Rust = High Performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A common theme I've noticed is the emergence of Rust as a performance complement to Python code. It seems we can expect modularity between the two languages to strengthen their collective abilities.&lt;/p&gt;
&lt;div class="wp-image-7391 figure"&gt;
&lt;img alt="example polars dataframe code" src="https://pythonmarketer.files.wordpress.com/2023/01/wp-1674420570685.png?w=1020" /&gt;
&lt;p class="caption"&gt;example polars dataframe code&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python is still growing and evolving&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It's great to see. Including the ability to parse TOML config files in the standard library is a vote of confidence by the Python community. I will now seek to use TOML in my own projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web frameworks and web browsers are king.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FastAPI is the new option in a space dominated by Flask and Django. Web frameworks allow developers to quickly create websites.&lt;/p&gt;
&lt;p&gt;Running Python in a browser has been a movement in recent years. First Pyodide, WASM euphoria, and now a Python library that takes Python in a browser to new levels. Excited to see where these projects go and what new buzzy libraries will emerge this year!&lt;/p&gt;
&lt;div class="wp-image-7386 figure"&gt;
&lt;img alt="pyscript landing page" src="https://pythonmarketer.files.wordpress.com/2023/01/wp-1674420015498.png?w=967" /&gt;
&lt;/div&gt;
</content><category term="APIs, coding, pandas, programming, python, Rust"></category><category term="advanced python modules"></category><category term="popular Python packages"></category><category term="Python Libraries in 2023"></category><category term="useful python libraries"></category><category term="web frameworks."></category></entry><entry><title>pymarketer: an HTTP + Spreadsheet Wrangling Python package</title><link href="https://lofipython.com/pymarketer-http-spreadsheet-operations-python-package.html" rel="alternate"></link><published>2023-01-08T19:52:00-06:00</published><updated>2023-01-08T19:52:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2023-01-08:/pymarketer-http-spreadsheet-operations-python-package.html</id><summary type="html">&lt;p&gt;Typically, this blog reviews the other Python libraries in its vast ecosystem. This time, it's my own package I made for fun, pymarketer. This was created in a single day and can be installed from the &lt;a class="reference external" href="https://github.com/erickbytes/pymarketer"&gt;Github repo&lt;/a&gt;. Have a go at &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;my most read post&lt;/a&gt; if you need help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Typically, this blog reviews the other Python libraries in its vast ecosystem. This time, it's my own package I made for fun, pymarketer. This was created in a single day and can be installed from the &lt;a class="reference external" href="https://github.com/erickbytes/pymarketer"&gt;Github repo&lt;/a&gt;. Have a go at &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;my most read post&lt;/a&gt; if you need help with pip.&lt;/p&gt;
&lt;p&gt;Install with pip from the source &lt;a class="reference external" href="https://github.com/erickbytes/pymarketer"&gt;Github repo&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;erickbytes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymarketer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The pymarketer package helps you do things like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;merging all the tabs of an Excel file into one CSV&lt;/li&gt;
&lt;li&gt;generate HTTP code&lt;/li&gt;
&lt;li&gt;make a word cloud image&lt;/li&gt;
&lt;li&gt;splitting a CSV&lt;/li&gt;
&lt;li&gt;merging CSVs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generating a Word Cloud with the pymarketer Package**
via &lt;a class="reference external" href="http://amueller.github.io/word_cloud/index.html"&gt;wordcloud&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymarketer&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="n"&gt;xl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chicago Breweries.xlsx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Make a wordcloud from a pandas dataframe.&lt;/span&gt;
&lt;span class="n"&gt;wordcloud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word_cloud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;wordcloud&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Text Word Cloud Visualization.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7362 figure"&gt;
&lt;img alt="Python wordcloud example" src="https://pythonmarketer.files.wordpress.com/2023/01/text-word-cloud-visualization.jpg?w=400" style="width: 400px; height: 200px;" /&gt;
&lt;/div&gt;
&lt;p&gt;This package relied on several Python libraries to complete:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;chardet&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://numpy.org/doc/stable/reference/generated/numpy.array_split.html"&gt;numpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wordcloud&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/"&gt;ftfy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll likely expand on this in the future. Anyone who wrangles data might be able to apply this package to good profit. At minimum, you might find it interesting to take a look at the project's &lt;a class="reference external" href="https://github.com/erickbytes/pymarketer/blob/main/pymarketer/__init__.py"&gt;__init__.py&lt;/a&gt; to see how some of the functions are implemented.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://changhsinlee.com/python-package/"&gt;How to Make an Internal Python Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/erickbytes/pymarketer/blob/main/pymarketer_examples.py"&gt;pymarketer Github Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="coding, excel, HTTP"></category><category term="problem solving"></category><category term="programming"></category><category term="python"></category><category term="software"></category></entry><entry><title>An Example Pelican + Git Blog Post Workflow</title><link href="https://lofipython.com/an-example-pelican-git-blog-post-workflow.html" rel="alternate"></link><published>2022-12-04T12:17:00-06:00</published><updated>2022-12-04T12:17:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-12-04:/an-example-pelican-git-blog-post-workflow.html</id><summary type="html">&lt;p&gt;On my Windows subsystem for Linux environment, I am now publishing new blog posts following this &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html"&gt;Pelican&lt;/a&gt;-based workflow:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1. Activate the Python environment: cd Your_Env/bin &amp;amp; source activate
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
2. Go to the project folder: cd /home/username/my_project
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
3. Run Python script to create new markdown file from a …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;On my Windows subsystem for Linux environment, I am now publishing new blog posts following this &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html"&gt;Pelican&lt;/a&gt;-based workflow:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1. Activate the Python environment: cd Your_Env/bin &amp;amp; source activate
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
2. Go to the project folder: cd /home/username/my_project
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
3. Run Python script to create new markdown file from a template:
python new_post.py
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
4. After writing the new post, update the Pelican content:
pelican content

(Optional) preview the new post at local host http://127.0.0.1:8000/
pelican -l
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
5. Use git to stage, commit and push the files to a Github repo:
git add .
git commit -m &amp;quot;new post edits and fixes&amp;quot;
git push -u origin main
&lt;/pre&gt;
&lt;p&gt;The new blog post is now live! This is my own workflow for my Pelican blog, &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;, which is hosted for free with &lt;a class="reference external" href="https://pages.cloudflare.com/"&gt;Cloudflare Pages&lt;/a&gt;. You can read more about connecting Pelican and Cloudflare in &lt;a class="reference external" href="https://lofipython.com/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages/"&gt;this past post I wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will need to &lt;a class="reference external" href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh"&gt;create a SSH key and connect it to your Github account&lt;/a&gt; to get this completely working, as it's required by Github now. Make sure you write down your passphrase! I was able to create an ssh key with this command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh-keygen -t ed25519 -C &amp;quot;youname&amp;#64;example.com&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Below is the short Python script I wrote for generating the markdown file for a new post. I've enjoyed working this out on my new blog and now can fire off posts rapidly with this command line based workflow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Ask for the new post&amp;#39;s name.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter the new post&amp;#39;s title:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return str, post draft&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Title: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Date: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 4:20 &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Category: Essay&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_draft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Save new post draft to content folder.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/erickbytes/divbull/divbull.com/content&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.md&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;


&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;save_draft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</content><category term="automation, git, pelican, programming, python, writing"></category><category term="pelican blog"></category><category term="pelican workflow"></category><category term="pelican writing example"></category></entry><entry><title>How to Find and Open a Public Wi-Fi Login Page</title><link href="https://lofipython.com/how-to-find-and-open-a-public-wi-fi-login-page.html" rel="alternate"></link><published>2022-10-18T12:38:00-05:00</published><updated>2022-10-18T12:38:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-10-18:/how-to-find-and-open-a-public-wi-fi-login-page.html</id><summary type="html">&lt;p&gt;Sometimes, we find ourselves on a public Wi-Fi connection that is &amp;quot;connected&amp;quot;, but unable to get to the login page. While the login page is triggered automatically on most mobile devices, computers may not connect so easily. As usual, I turned to Google to find a way to get to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes, we find ourselves on a public Wi-Fi connection that is &amp;quot;connected&amp;quot;, but unable to get to the login page. While the login page is triggered automatically on most mobile devices, computers may not connect so easily. As usual, I turned to Google to find a way to get to a public Wi-Fi login page.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://zapier.com/blog/open-wifi-login-page/#:~:text=An%20easy%20trick%20is%20to,you're%20at%20home)."&gt;This helpful Zapier blog post&lt;/a&gt; outlines a few different approaches you can take. My solution below is one of the IP addresses they suggested trying. Decide if you need to edit your computer's network settings. Alternatively, you may just need to find the public login page. I was able to load my public Wi-Fi login page with this IP address in my web browser:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
192.168.1.11
&lt;/pre&gt;
&lt;div class="wp-image-7279 figure"&gt;
&lt;img alt="web browser navigation bar" src="https://pythonmarketer.files.wordpress.com/2022/10/image-6.png?w=727" /&gt;
&lt;/div&gt;
&lt;p&gt;This is a fun little trick to keep in mind if you're having difficulty connecting to public Wi-Fi. Problem solved!&lt;/p&gt;
</content><category term="internet, network, productivity"></category><category term="find public wi-fi login page"></category><category term="open wi-fi login"></category><category term="wifi hack"></category></entry><entry><title>How to Check Github Repo Star Counts With Python</title><link href="https://lofipython.com/how-to-check-github-repo-star-counts-with-python.html" rel="alternate"></link><published>2022-10-10T00:08:00-05:00</published><updated>2022-10-10T00:08:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-10-10:/how-to-check-github-repo-star-counts-with-python.html</id><summary type="html">&lt;p&gt;Snooping through my package list, I noticed the &lt;a class="reference external" href="https://github.com/PyGithub/PyGithub"&gt;PyGithub library&lt;/a&gt; was installed. Its repo boasts &amp;quot;Typed interactions with the GitHub API v3&amp;quot;. I googled the package, wanting to check in on the repos I profiled in an &lt;a class="reference external" href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators/"&gt;earlier post about static site generators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I drafted the code below after noticing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Snooping through my package list, I noticed the &lt;a class="reference external" href="https://github.com/PyGithub/PyGithub"&gt;PyGithub library&lt;/a&gt; was installed. Its repo boasts &amp;quot;Typed interactions with the GitHub API v3&amp;quot;. I googled the package, wanting to check in on the repos I profiled in an &lt;a class="reference external" href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators/"&gt;earlier post about static site generators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I drafted the code below after noticing the &lt;a class="reference external" href="https://pygithub.readthedocs.io/en/latest/examples/Repository.html#get-count-of-stars"&gt;repo.stargazer_count&lt;/a&gt; function in its documentation. This is neat to have if you want to keep tabs on a batch of repos, instead of tediously checking the Github web interface! If you're new to Github, the &lt;a class="reference external" href="https://github.com/trending"&gt;trending page&lt;/a&gt; is an easy way to find new, interesting repos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You'll need to create a personal access token for your Github account. See the Github docs, &lt;a class="reference external" href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;&amp;quot;Creating a personal access token&amp;quot;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/PyGithub/"&gt;Install PyGithub&lt;/a&gt; and &lt;a class="reference external" href="https://pandas.pydata.org/docs/getting_started/index.html"&gt;pandas&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
pip install PyGithub
pip install pandas
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Run the below code as a Python script.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
python github_stars.py
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Retrieve github repo star count.&lt;/span&gt;
&lt;span class="sd"&gt;    Accepts: str, repo &amp;quot;username/repo name&amp;quot;,ex: &amp;quot;getpelican/pelican&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns: int, github repo stargazers number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_repo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stargazers_count&lt;/span&gt;


&lt;span class="c1"&gt;# static site repos: http://lofipython.com/a-brief-summary-of-promising-python-static-site-generators/&lt;/span&gt;
&lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/getpelican/pelican&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/lektor/lektor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/eudicots/Cactus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/getnikola/nikola&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/sunainapai/makesite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/hyde/hyde&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/Anomareh/mynt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://github.com/staticjinja/staticjinja&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stars_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;repo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;stars_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stars.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;On Linux, I was able to check the results of the CSV with the cat command:&lt;/p&gt;
&lt;div class="wp-image-7254 figure"&gt;
&lt;img alt="View repo github stars with Python" src="https://pythonmarketer.files.wordpress.com/2022/10/check-pelican.png?w=409" /&gt;
&lt;/div&gt;
&lt;p&gt;I confirmed the API was accurate against the web interface in &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;pelican's repo&lt;/a&gt;!&lt;/p&gt;
&lt;div class="wp-image-7251 figure"&gt;
&lt;img alt="Github browser UX" src="https://pythonmarketer.files.wordpress.com/2022/10/pelican-stars.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.stargazers_count"&gt;Github Repo Stargazer API Reference&lt;/a&gt;&lt;/p&gt;
</content><category term="APIs, coding, programming, python"></category><category term="github api"></category><category term="github stars python"></category><category term="repo star counts"></category></entry><entry><title>Pelican Fix for "No valid files found in content"...</title><link href="https://lofipython.com/pelican-fix-for-no-valid-files-found-in-content.html" rel="alternate"></link><published>2022-10-08T13:43:00-05:00</published><updated>2022-10-08T13:43:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-10-08:/pelican-fix-for-no-valid-files-found-in-content.html</id><summary type="html">&lt;p&gt;Pelican is a popular &lt;a class="reference external" href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators/"&gt;static site generator library&lt;/a&gt; in Python. I didn't know why my pelican blog was not working. I've used the &amp;quot;pelican content&amp;quot; command many times for my blog. This time, when attempting to write a new post on a new computer, I was getting this error where …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican is a popular &lt;a class="reference external" href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators/"&gt;static site generator library&lt;/a&gt; in Python. I didn't know why my pelican blog was not working. I've used the &amp;quot;pelican content&amp;quot; command many times for my blog. This time, when attempting to write a new post on a new computer, I was getting this error where none of my posts were visible to Pelican:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;  &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;         &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;
         &lt;span class="n"&gt;readers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BaseReader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;HTMLReader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;RstReader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7221 figure"&gt;
&lt;img alt="no valid files found in pelican content" src="https://pythonmarketer.files.wordpress.com/2022/10/image.png?w=665" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Install the markdown library, which is stated in the &lt;a class="reference external" href="https://docs.getpelican.com/en/3.6.3/install.html#optional-packages"&gt;pelican docs&lt;/a&gt;. This &lt;a class="reference external" href="https://github.com/getpelican/pelican/issues/1868"&gt;Github issue&lt;/a&gt; also provides some background on this warning.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install markdown
&lt;/pre&gt;
&lt;div class="wp-image-7224 figure"&gt;
&lt;img alt="python pip installing markdown" src="https://pythonmarketer.files.wordpress.com/2022/10/image-1.png?w=672" /&gt;
&lt;/div&gt;
&lt;p&gt;Now my &amp;quot;pelican content&amp;quot; command works!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican content
&lt;/pre&gt;
&lt;div class="wp-image-7226 figure"&gt;
&lt;img alt="successful pelican content build" src="https://pythonmarketer.files.wordpress.com/2022/10/image-2.png?w=679" /&gt;
&lt;/div&gt;
</content><category term="coding, python, writing"></category><category term="markdown library"></category><category term="pelican blog"></category><category term="python fix"></category></entry><entry><title>Retrieve Random Numbers Via Python's random Module + range() Built-in</title><link href="https://lofipython.com/fetch-a-random-number-or-random-n-length-list-of-numbers-in-python-with-the-random-module.html" rel="alternate"></link><published>2022-09-15T23:09:00-05:00</published><updated>2022-09-15T23:09:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-09-15:/fetch-a-random-number-or-random-n-length-list-of-numbers-in-python-with-the-random-module.html</id><summary type="html">&lt;p&gt;There are usually many ways to do most things in Python. I've retrieved
random numbers a few different ways at various times within the random
module, often after reading a Stack Overflow post. This time in my most
recent search for random digits, I discovered in the Python docs the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are usually many ways to do most things in Python. I've retrieved
random numbers a few different ways at various times within the random
module, often after reading a Stack Overflow post. This time in my most
recent search for random digits, I discovered in the Python docs the
&lt;a class="reference external" href="https://docs.python.org/3/library/random.html#random.sample"&gt;random.sample()&lt;/a&gt;
function with its k parameter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Return a &lt;em&gt;k&lt;/em&gt; length list of unique elements chosen from the
population sequence or set. Used for random sampling without
replacement.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/random.html#random.sample"&gt;https://docs.python.org/3/library/random.html#random.sample&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When combined with the &lt;a class="reference external" href="https://docs.python.org/3.3/library/stdtypes.html?highlight=range#range"&gt;range() built-in&lt;/a&gt;,
it makes doing this easy. Being able to specify a length and return a
list of random numbers is mighty convenient. This function seems a
Pythonic way to randomize to me. Have a look!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="c1"&gt;# Returns a list of 5 random numbers.&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Returns a single random number.&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7196 figure"&gt;
&lt;img alt="Python Random Number Code" src="https://pythonmarketer.files.wordpress.com/2022/09/image-2.png?w=552" /&gt;
&lt;/div&gt;
&lt;p&gt;To choose a sample from a range of integers, use a&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#range"&gt;range()&lt;/a&gt;object as an
argument.&lt;/p&gt;
&lt;p&gt;This is especially fast and space efficient for sampling from a large
population:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/random.html#random.sample"&gt;https://docs.python.org/3/library/random.html#random.sample&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python"></category><category term="python random numbers list"></category><category term="random module"></category><category term="random numbers python"></category></entry><entry><title>Beyond the Standard Library, An External Python Modules Starter Pack</title><link href="https://lofipython.com/30-external-python-libraries-starter-pack.html" rel="alternate"></link><published>2022-09-07T23:46:00-05:00</published><updated>2022-09-07T23:46:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-09-07:/30-external-python-libraries-starter-pack.html</id><summary type="html">&lt;p&gt;Here is a list of external Python modules you can install with &lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. These are not included with your Python version and need to be installed separately. In some cases, other options may be suitable. To keep the list shorter, I picked libraries that were chosen based on having at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a list of external Python modules you can install with &lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. These are not included with your Python version and need to be installed separately. In some cases, other options may be suitable. To keep the list shorter, I picked libraries that were chosen based on having at least one of these qualities:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most obvious library for its category&lt;/li&gt;
&lt;li&gt;a library I have experience using effectively&lt;/li&gt;
&lt;li&gt;provide a niche, useful functionality or tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In alphabetical order:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-block-columns docutils container"&gt;
&lt;/p&gt;&lt;div class="wp-block-column docutils container"&gt;
&lt;/p&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;: code formatting&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/chardet/"&gt;chardet&lt;/a&gt;: detect file encoding (useful for reading CSVs)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/diagrams/"&gt;diagrams&lt;/a&gt;: make cloud architecture diagrams&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/Django/"&gt;Django&lt;/a&gt;: web framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/#installation"&gt;fastapi&lt;/a&gt;: web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/ffn/"&gt;ffn&lt;/a&gt;: financial function library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/Flask/"&gt;Flask:&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pygame/"&gt;ftfy&lt;/a&gt;: fix mojibake in text&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/fuzzywuzzy/"&gt;fuzzywuzzy&lt;/a&gt;: fuzzy matching library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/matplotlib/"&gt;matplotlib&lt;/a&gt;: data visualization&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/numpy/"&gt;numpy&lt;/a&gt;: array operations&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/openpyxl/"&gt;openpyxl&lt;/a&gt;: foundational Excel library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pandas/"&gt;pandas&lt;/a&gt;: working with tabular data&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pelican/"&gt;pelican&lt;/a&gt;: static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/INSTALL.rst"&gt;psutil&lt;/a&gt;: process and system utilities&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pygame/"&gt;pygame&lt;/a&gt;: video game creation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pyodbc/"&gt;pyodbc&lt;/a&gt;: Open Database Connection client&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;: sampling profiler to visualize your program&lt;/li&gt;
&lt;li&gt;pyheat: visualize code bottlenecks&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest/"&gt;pytest&lt;/a&gt;: testing framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytrends/"&gt;pytrends&lt;/a&gt;: research trends in the Google Trends API&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytube3/"&gt;pytube3&lt;/a&gt;: YouTube video downloading library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pywin32/"&gt;pywin32&lt;/a&gt;: Python for Win32 Extensions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt;: HTTP requests&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/scikit-learn/"&gt;scikit-learn&lt;/a&gt;: machine learning&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/soltrack/"&gt;soltrack&lt;/a&gt;: calculate the location of the sun&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/sqlfluff/"&gt;sqlfluff&lt;/a&gt;: SQL linter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/streamlit/streamlit"&gt;streamlit&lt;/a&gt;: build data apps&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/tqdm/"&gt;tqdm&lt;/a&gt;: add a progress bar to loops&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wxpython.org/pages/downloads/index.html"&gt;wxPython&lt;/a&gt;: Graphical User Interface&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/xlrd/"&gt;xlrd&lt;/a&gt;: supplementary Excel library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/xmltodict/"&gt;xmltodict&lt;/a&gt;: convert XML to nested Python dicts&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;Python Documentation: Installing Python Modules&lt;/a&gt;&lt;/p&gt;
&lt;div class="wp-image-7164 figure"&gt;
&lt;img alt="python pip install shell" src="https://pythonmarketer.files.wordpress.com/2022/09/image.png?w=672" /&gt;
&lt;/div&gt;
</content><category term="programming, python"></category><category term="advanced python modules"></category><category term="coding"></category><category term="useful python libraries"></category></entry><entry><title>Recycling Old Electronics in Chicago</title><link href="https://lofipython.com/recycling-old-electronics-in-chicago.html" rel="alternate"></link><published>2022-08-14T14:02:00-05:00</published><updated>2022-08-14T14:02:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-08-14:/recycling-old-electronics-in-chicago.html</id><summary type="html">&lt;p&gt;Though we feel powerless at times, our individual choices can have ripple effects which can help us preserve Earth's precious materials. Here is how to recycle your old electronics in Chicago. Definitely check out if your city has a similar program for recycling electronics.&lt;/p&gt;
&lt;p&gt;Look up the schedule for any …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Though we feel powerless at times, our individual choices can have ripple effects which can help us preserve Earth's precious materials. Here is how to recycle your old electronics in Chicago. Definitely check out if your city has a similar program for recycling electronics.&lt;/p&gt;
&lt;p&gt;Look up the schedule for any Chicago address here: &lt;a class="reference external" href="https://www.recyclebycity.com/chicago/schedule"&gt;https://www.recyclebycity.com/chicago/schedule&lt;/a&gt;&lt;/p&gt;
&lt;div class="wp-image-7143 figure"&gt;
&lt;img alt="Chicago Recycling Schedule Website" src="https://pythonmarketer.files.wordpress.com/2022/08/screenshot-2022-08-14-1.32.53-pm.png?w=931" /&gt;
&lt;/div&gt;
&lt;p&gt;I was able to look up my address, see the recycling pickup schedule for my street, and see collection events for old electronics and waste. I scheduled an email reminder for the day before an upcoming event near me. I have a graveyard of broken phones and a busted Macbook to dispose of.&lt;/p&gt;
&lt;div class="wp-image-7149 figure"&gt;
&lt;img alt="Sign up for a reminder to recycle." src="https://pythonmarketer.files.wordpress.com/2022/08/send-reminder-recycling.png?w=928" /&gt;
&lt;/div&gt;
&lt;p&gt;Our recycling program also accepts nail polish, chemicals, paints, auto fluids, pharmaceuticals and &amp;quot;Misc. Hazardous Waste&amp;quot;. I learned today that the city says alkaline batteries are ok to throw away in the trash since they no longer contain Mercury like they did in the '90s.&lt;/p&gt;
&lt;p&gt;The website also has an option for Spanish language speakers. You can sign up for email updates on the city's recycling program at the bottom of their website. Overall, I give the city's recycling service an A+ for its accessibility. Happy to see a wealth of resources available to re-purpose our planet's resources. If we all choose to care in our day to day lives, we can make a better future for generations to come.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Here's what to take:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;•   All computer-related equipment (monitors, mice, hard drives, CPU’s, computer cables, keyboards, laptops, etc.)&lt;/div&gt;
&lt;div class="line"&gt;•   Cell phones&lt;/div&gt;
&lt;div class="line"&gt;•   Fax machines&lt;/div&gt;
&lt;div class="line"&gt;•   Scanners&lt;/div&gt;
&lt;div class="line"&gt;•   Printers/copiers&lt;/div&gt;
&lt;div class="line"&gt;•   Televisions&lt;/div&gt;
&lt;div class="line"&gt;•   DVD players&lt;/div&gt;
&lt;div class="line"&gt;•   VHS players&lt;/div&gt;
&lt;div class="line"&gt;•   MP3/digital music players&lt;/div&gt;
&lt;div class="line"&gt;•   PDAs&lt;/div&gt;
&lt;div class="line"&gt;•   Video game consoles&lt;/div&gt;
&lt;div class="line"&gt;•   Zip drive&lt;/div&gt;
&lt;div class="line"&gt;•   Computer cables&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.recyclebycity.com/chicago/brief/household-chemicals-computer-recycling-facility"&gt;https://www.recyclebycity.com/chicago/brief/household-chemicals-computer-recycling-facility&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Additional Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.recyclebycity.com/chicago/brief/recycling-in-chicago-apartments-and-condos"&gt;Getting Started with recycling at a new building guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.recyclebycity.com/chicago/brief/new-residential-electronics-recycling-program"&gt;Chicago electronics recycling events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.recyclebycity.com/chicago/quiz"&gt;Recycling quiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Chicago, electronics"></category><category term="recycling"></category><category term="resources"></category><category term="smartphones"></category></entry><entry><title>Launching a Live Static Site Blog via Pelican, Github and Cloudflare Pages</title><link href="https://lofipython.com/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages.html" rel="alternate"></link><published>2022-07-08T01:20:00-05:00</published><updated>2022-07-08T01:20:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-07-08:/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages.html</id><summary type="html">&lt;p&gt;Proud to announce my newest side project blog, Diversified Bullish, is live at &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;. It is made with &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html#"&gt;Pelican&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin/tree/311a5208c030ea62d85bbca952e31b6775a50c2c"&gt;Blue Penguin theme&lt;/a&gt;. I'm planning to write about stocks and investing there moving forward in addition to this blog which focuses on Python programming.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/erickbytes/divbull/tree/main/divbull.com"&gt;divbull.com Github …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Proud to announce my newest side project blog, Diversified Bullish, is live at &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;. It is made with &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html#"&gt;Pelican&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin/tree/311a5208c030ea62d85bbca952e31b6775a50c2c"&gt;Blue Penguin theme&lt;/a&gt;. I'm planning to write about stocks and investing there moving forward in addition to this blog which focuses on Python programming.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/erickbytes/divbull/tree/main/divbull.com"&gt;divbull.com Github repo&lt;/a&gt; serves the static files generated by Pelican via &lt;a class="reference external" href="https://pages.cloudflare.com/"&gt;Cloudflare pages&lt;/a&gt;. It's free, unless you purchase a domain. I purchased my .com domain with &lt;a class="reference external" href="https://www.namecheap.com/support/knowledgebase/article.aspx/9607/2210/how-to-set-up-dns-records-for-your-domain-in-cloudflare-account/"&gt;Namecheap&lt;/a&gt; before I learned about Cloudflare pages. I followed &lt;a class="reference external" href="https://developers.cloudflare.com/pages/get-started/"&gt;these instructions&lt;/a&gt; to set up my new financial blog. If you're interested, you can subscribe to an &lt;a class="reference external" href="https://divbull.com/feeds/all.atom.xml"&gt;RSS feed here&lt;/a&gt; to follow when I post something new.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The dashboard provides a number of framework-specific presets. These presets provide the default build command and build output directory values for the selected framework. If you are unsure what the correct values are for this section, refer to &lt;a class="reference external" href="https://developers.cloudflare.com/pages/platform/build-configuration/"&gt;Build configuration&lt;/a&gt;. &lt;strong&gt;If you do not need a build step, leave the Build command field blank.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/pages/get-started/"&gt;https://developers.cloudflare.com/pages/get-started/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="wp-image-7113 figure"&gt;
&lt;img alt="Cloudflare pages deployment details" src="https://pythonmarketer.files.wordpress.com/2022/07/cloudflare-deployment-details-1.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;Working in the Cloudflare pages build dashboard is sweet. It took me about 5 failed Pelican &lt;a class="reference external" href="https://developers.cloudflare.com/pages/platform/build-configuration/"&gt;build commands&lt;/a&gt; to get the site to deploy. Finally, I was able to get the site build to complete by leaving the build command blank. Cloudflare was able to scoop up my Pelican &amp;quot;output&amp;quot; folder contents and render the blog. How cool. I feel like I've done the impossible, launching a passable quality blog with top shelf tools this quickly for under $10!&lt;/p&gt;
&lt;p&gt;Initially, I spent a few hours getting to know Pelican. Once I correctly installed a theme I liked, I banged out a few philosophical financial musings to give the blog some posts. Then I had the static files generated but no clue how to serve them. Enter Cloudflare pages, a free option to host a blog.&lt;/p&gt;
&lt;p&gt;Connecting the repo to Cloudflare pages, adding the files to the repo and finding the correct build command added a few more hours. In total, it took me about 1-2 days to make a live site since I did not know about Pelican or Cloudflare pages when I began playing with a Pelican blog in April. This was my first static site launch!&lt;/p&gt;
&lt;div class="wp-image-7115 figure"&gt;
&lt;img alt="Cloudflare build settings" src="https://pythonmarketer.files.wordpress.com/2022/07/cloudflare-build-settings.png?w=528" /&gt;
&lt;p class="caption"&gt;Generating a Blue Penguin themed Pelican blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="wp-image-7086 figure"&gt;
&lt;img alt="showing Pelican blog workflow" src="https://pythonmarketer.files.wordpress.com/2022/07/pelican-blog-dev.png?w=1024" /&gt;
&lt;p class="caption"&gt;Head over to &lt;a class="reference external" href="https://divbull.com"&gt;divbull.com&lt;/a&gt; to see this Pelican, Github and Cloudflare pages stack in action.&lt;/p&gt;
&lt;div class="legend"&gt;
Like static site generators? Check out &lt;a class="reference external" href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators/"&gt;this post about static site generator libraries in Python&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
</content><category term="internet, investing, personal finance, programming, writing"></category><category term="blog"></category><category term="cloudflare pages"></category><category term="pelican"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>The Things They Don't Tell You About Ampersands and XML</title><link href="https://lofipython.com/the-things-they-dont-tell-you-about-ampersands-and-xml.html" rel="alternate"></link><published>2022-07-06T12:49:00-05:00</published><updated>2022-07-06T12:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-07-06:/the-things-they-dont-tell-you-about-ampersands-and-xml.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script that works at first. Hallelujah!&lt;/p&gt;
&lt;p&gt;Later on, I realize it doesn't work as well as I believed. It turns out, if I want a server to accept my XML document, &lt;a class="reference external" href="https://www.ibm.com/docs/en/was-liberty/base?topic=manually-xml-escape-characters"&gt;escaping certain characters&lt;/a&gt; might be required. The documentation didn't mention this. It was my first time using XML, how would I know?&lt;/p&gt;
&lt;p&gt;I noticed a script only worked for a handful of requests. It failed for most, returning a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"&gt;400 status code&lt;/a&gt;. Suspecting the issue was likely in my payload, I studied the data of the request bodies that failed compared to the others that succeeded. All of the payload bodies that failed contained text with an ampersand.&lt;/p&gt;
&lt;p&gt;Suspecting it might be an XML + ampersand related issue, I google &lt;a class="reference external" href="https://stackoverflow.com/questions/1328538/how-do-i-escape-ampersands-in-xml-so-they-are-rendered-as-entities-in-html"&gt;this Stack Overflow post&lt;/a&gt; which explains the ampersand escaping situation. There are a handful of characters that must be escaped. Otherwise, you might not be able to connect to the server.&lt;/p&gt;
&lt;p&gt;These are the things they often don't tell you. Those little details you must sometimes realize for yourself, unless someone bothers to mention it or write it down. Now you know something that cost me an hour or two of tinkering to realize!&lt;/p&gt;
&lt;div class="wp-image-7060 figure"&gt;
&lt;img alt="`Image Source &amp;lt;https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2022/07/xml-example-2.png?w=453" style="width: 453px; height: 521px;" /&gt;
&lt;/div&gt;
&lt;p class="center"&gt;&lt;a class="reference external" href="https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml"&gt;Image Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wanna read more on HTTP? Check out my guide on &lt;a class="reference external" href="https://pythonmarketer.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;making HTTP requests with Python&lt;/a&gt; to read more about HTTP requests.&lt;/p&gt;
</content><category term="APIs, coding, Google, programming"></category><category term="data"></category><category term="learning"></category><category term="problem solving"></category><category term="XML"></category></entry><entry><title>Hammock-Driven Development Notes</title><link href="https://lofipython.com/hammock-driven-development-talk-notes.html" rel="alternate"></link><published>2022-06-24T11:39:00-05:00</published><updated>2022-06-24T11:39:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-06-24:/hammock-driven-development-talk-notes.html</id><summary type="html">&lt;p&gt;Occasionally you will find a video or talk that connects or resonates with you in a great way. Rich Hickey's &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;&amp;quot;Hammock Driven Development&amp;quot;&lt;/a&gt;, a self-described &amp;quot;rant&amp;quot; is packed with wisdom. I keep coming back to re-watch and today, I have written down some key points from this amazing rant!&lt;/p&gt;
&lt;div class="section" id="key-ideas"&gt;
&lt;h2&gt;Key …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Occasionally you will find a video or talk that connects or resonates with you in a great way. Rich Hickey's &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;&amp;quot;Hammock Driven Development&amp;quot;&lt;/a&gt;, a self-described &amp;quot;rant&amp;quot; is packed with wisdom. I keep coming back to re-watch and today, I have written down some key points from this amazing rant!&lt;/p&gt;
&lt;div class="section" id="key-ideas"&gt;
&lt;h2&gt;Key Ideas&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Take more time to think through your problem.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When was the last time you...&lt;/p&gt;
&lt;p&gt;thought about some for a whole day?&lt;/p&gt;
&lt;p&gt;thought about something for a whole month or year?&lt;/p&gt;
&lt;p&gt;Hammock Driven Development, &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;https://www.youtube.com/watch?v=f84n5oFoZBc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;On Bugs&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bugs are cheaper to fix in development.&lt;/li&gt;
&lt;li&gt;Least expensive to avoid in design&lt;/li&gt;
&lt;li&gt;Most expensive in to fix in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis &amp;amp; Design, Simplified&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identify problem trying to solve.&lt;/li&gt;
&lt;li&gt;Assess whether it solves that problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Problem Solving&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-image-7029 figure"&gt;
&lt;img alt="solving problems by Rich Hickey" src="https://pythonmarketer.files.wordpress.com/2022/06/solve-problems-1.png?w=730" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Problem Solving (cont.)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State the problem out loud.&lt;/li&gt;
&lt;li&gt;Understand the problem's facts, context and constraints.&lt;/li&gt;
&lt;li&gt;What don't you know?&lt;/li&gt;
&lt;li&gt;Find problems in your solution.&lt;/li&gt;
&lt;li&gt;Write it all down.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;More Input, Better Output&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read in and around your space.&lt;/li&gt;
&lt;li&gt;Look critically at other solutions.&lt;/li&gt;
&lt;li&gt;You can't connect things you don't know about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Focus&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On the hammock, no one knows if you're sleeping and they don't bother you because of this.&lt;/li&gt;
&lt;li&gt;Computers are distracting.&lt;/li&gt;
&lt;li&gt;Let loved ones know you are going to be &amp;quot;gone&amp;quot;, focusing deeply for some time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Waking Mind vs Background Mind&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The waking mind is good at critical thinking.&lt;/li&gt;
&lt;li&gt;Use waking time to assign tasks to background mind.&lt;/li&gt;
&lt;li&gt;The background mind is good at making connections and good at strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sleep According to Scientific American:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The brain processes info learned while sleeping.&lt;/li&gt;
&lt;li&gt;Sleep makes memories stonger and weeds out irrelevant details.&lt;/li&gt;
&lt;li&gt;Our brain finds hidden relations among memories to solve waking problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Closing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write the proposed solution down. Hammock time is important &amp;quot;mind's eye time&amp;quot;. We switch from &amp;quot;input mode&amp;quot; to &amp;quot;recall mode&amp;quot; during hammock time. Wait overnight, or sometimes months, to think about your problem, sleep sober for best results! Eventually coding is required, and your feedback loop is important, but &amp;quot;don't lean on it too much&amp;quot;. You will be wrong, facts and requirements will change. Mistakes happen. That's fine, do not be afraid of being wrong. /rant&lt;/p&gt;
&lt;p&gt;The notes in this blog post are paraphrased from &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;this rant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, talks"></category><category term="learning"></category><category term="problem solving"></category><category term="software"></category></entry><entry><title>A Quick Windows Command Line Tab Key Shortcut</title><link href="https://lofipython.com/a-quick-windows-command-line-tab-key-shortcut.html" rel="alternate"></link><published>2022-06-11T12:58:00-05:00</published><updated>2022-06-11T12:58:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-06-11:/a-quick-windows-command-line-tab-key-shortcut.html</id><summary type="html">&lt;p&gt;You might know you can use the tab key to view the files in a folder one at a time on the command line. However, I recently stumbled into another way to help navigate folders with a lot of files in the command line. Let's say you're looking for a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You might know you can use the tab key to view the files in a folder one at a time on the command line. However, I recently stumbled into another way to help navigate folders with a lot of files in the command line. Let's say you're looking for a file named &amp;quot;stuff.txt&amp;quot;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type &amp;quot;s&amp;quot;.&lt;/li&gt;
&lt;li&gt;Hit the tab key.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You just jumped right to the files that start with &amp;quot;s&amp;quot;. If there are not many files, you might go straight to &amp;quot;stuff.txt&amp;quot;. The point is that you can jump straight to the letter of your file rather than scrolling through a mountain of files by hitting the tab key 50 times. Once you get to the relative place in the alphabet of your target file, you can scroll forward in the file list with the &lt;strong&gt;tab key&lt;/strong&gt; or move backward by pressing &lt;strong&gt;shift + tab&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Multi-Letter Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Type &amp;quot;st&amp;quot; + tab to target more precise multi-letter sequences.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I felt a productive zen when I accidentally realized this little command line quirk can save a lot of time. Especially when you have a folder with 50 or hundreds of files. Of course, you can always type in the file name directly. Using the tab key is very handy to browse if you don't know the exact file name. This is a nice little trick to add to your bag of Windows command line skills!&lt;/p&gt;
&lt;div class="wp-image-7002 figure"&gt;
&lt;img alt="command prompt typing example" src="https://pythonmarketer.files.wordpress.com/2022/06/commandprompt.webp?w=1024" /&gt;
&lt;/div&gt;
</content><category term="coding, command prompt, productivity, Windows"></category><category term="command line"></category><category term="file system"></category><category term="shortcuts"></category></entry><entry><title>An Ode to Code</title><link href="https://lofipython.com/an-ode-to-code.html" rel="alternate"></link><published>2022-05-09T21:13:00-05:00</published><updated>2022-05-09T21:13:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-05-09:/an-ode-to-code.html</id><summary type="html">&lt;p&gt;Making time to code can be done every day. Carve out those little moments where you can automate tedious tasks or study up on that &lt;a class="reference external" href="https://github.com/tqdm/tqdm"&gt;hot new Python library&lt;/a&gt; that takes your quality to another level.&lt;/p&gt;
&lt;p&gt;Take time to reorganize and refactor in &lt;a class="reference external" href="https://atom.io/"&gt;your favorite text editor&lt;/a&gt;. Break your script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Making time to code can be done every day. Carve out those little moments where you can automate tedious tasks or study up on that &lt;a class="reference external" href="https://github.com/tqdm/tqdm"&gt;hot new Python library&lt;/a&gt; that takes your quality to another level.&lt;/p&gt;
&lt;p&gt;Take time to reorganize and refactor in &lt;a class="reference external" href="https://atom.io/"&gt;your favorite text editor&lt;/a&gt;. Break your script, then break it again. Break it until it works. Absorb your new abilities as a machine literate human and build skills on top of skills. Make a breakthrough. The code is great. It makes sense. Another tweak here, another tweak there. Run &lt;a class="reference external" href="https://github.com/psf/black"&gt;black&lt;/a&gt; on it and then have a go at &lt;a class="reference external" href="https://peps.python.org/pep-0008/"&gt;PEP-8&lt;/a&gt; to brush up on your style. More tweaks, and need to add some &lt;a class="reference external" href="https://peps.python.org/pep-0257/"&gt;docstrings&lt;/a&gt; for more clarity.&lt;/p&gt;
&lt;p&gt;Another one bites the dust. Who knows where your skills could grow. Following the code is a delightful road. Some days it's hard. Some days it's easy. But it's fulfilling if you treat it like a locksmith does keys. Knowledge is flowing. The craft is built in each moment. Challenges overcome. Battles won. New innovations to munge.&lt;/p&gt;
&lt;p&gt;Code is the medium to communicate with machines and leverage their efficiency for convenient means. Tighter the web we weave with transistors and screens, the more we'll need dignified intermediaries of man and machine. Here's to the good code and the bad code we all will write. May we never let something stop our logical flights to code a better dream.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="growth"></category><category term="python"></category></entry><entry><title>Documentation is the Gateway to Delegation</title><link href="https://lofipython.com/documentation-is-the-gateway-to-delegation.html" rel="alternate"></link><published>2022-03-31T23:07:00-05:00</published><updated>2022-03-31T23:07:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-03-31:/documentation-is-the-gateway-to-delegation.html</id><summary type="html">&lt;p&gt;The first step to offloading a task is writing down how to complete it. Once the process is typed into a lean text file or wiki page, it can be learned by another human. This helps your team, but what's in it for you?&lt;/p&gt;
&lt;div class="wp-image-6962 figure"&gt;
&lt;img alt="The definition of delegation" src="https://pythonmarketer.files.wordpress.com/2022/03/image_editor_output_image-551860623-1648785644967.jpg?w=720" /&gt;
&lt;/div&gt;
&lt;p&gt;The most selfish programmers probably want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first step to offloading a task is writing down how to complete it. Once the process is typed into a lean text file or wiki page, it can be learned by another human. This helps your team, but what's in it for you?&lt;/p&gt;
&lt;div class="wp-image-6962 figure"&gt;
&lt;img alt="The definition of delegation" src="https://pythonmarketer.files.wordpress.com/2022/03/image_editor_output_image-551860623-1648785644967.jpg?w=720" /&gt;
&lt;/div&gt;
&lt;p&gt;The most selfish programmers probably want to free up their time to focus on more interesting work instead of repetitive processes and maintenance. Therefore, the most selfish programmers should love writing documentation. These types of tasks are somewhat unavoidable, so committing to writing documentation will help you push it over to your teammates.&lt;/p&gt;
&lt;p&gt;Write to free yourself of your laundry list of recurring tasks. It's the first step to someone else to be able to step in for you or to delegate to someone else completely. On the plus side, you'll be less reliant on your meaty human brain to remember how to do it. Be selfish, take time to write down how to do your work!&lt;/p&gt;
</content><category term="productivity, programming, writing"></category><category term="delegation"></category><category term="documentation"></category><category term="technical writing"></category></entry><entry><title>6 Must-read Python Enhancement Proposals (PEPs)</title><link href="https://lofipython.com/six-must-read-python-enhancement-proposals.html" rel="alternate"></link><published>2022-02-23T17:15:00-06:00</published><updated>2022-02-23T17:15:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-02-23:/six-must-read-python-enhancement-proposals.html</id><summary type="html">&lt;p&gt;These are a few of my favorite PEPs, or Python Enhancements Proposals I've encountered recently. PEP 0, PEP 8 and PEP 20 are great reads for those aspiring to hone their Python skills. The &lt;a class="reference external" href="https://docs.python.org/3/"&gt;documentation&lt;/a&gt; sometimes references specific PEPs directly also. They document Python's evolution over time and the rationale …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These are a few of my favorite PEPs, or Python Enhancements Proposals I've encountered recently. PEP 0, PEP 8 and PEP 20 are great reads for those aspiring to hone their Python skills. The &lt;a class="reference external" href="https://docs.python.org/3/"&gt;documentation&lt;/a&gt; sometimes references specific PEPs directly also. They document Python's evolution over time and the rationale behind it. Here are some good ones to remember!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/"&gt;PEP 0&lt;/a&gt; -- Index of Python Enhancement Proposals&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; -- Style Guide for Python Code&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt; -- The Zen of Python&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/#paramstyle"&gt;PEP 249&lt;/a&gt; -- Python Database API Specification v2.0&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3131/"&gt;PEP 3131&lt;/a&gt; -- Supporting Non-ASCII Identifiers&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP 3333&lt;/a&gt; -- Python Web Server Gateway Interface v1.0.1&lt;/p&gt;
</content><category term="APIs, ODBC, programming, python"></category><category term="best PEPs Python"></category><category term="PEP 8"></category><category term="WSGI"></category></entry><entry><title>How to Convert a Python Dictionary to and from a pandas DataFrame</title><link href="https://lofipython.com/how-to-convert-a-python-dictionary-to-and-from-a-pandas-dataframe.html" rel="alternate"></link><published>2022-02-09T23:16:00-06:00</published><updated>2022-02-09T23:16:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-02-09:/how-to-convert-a-python-dictionary-to-and-from-a-pandas-dataframe.html</id><summary type="html">&lt;p&gt;This is an example of how to cast a Python dict into a dataframe and vice versa. I picked up the df to dict part from this &lt;a class="reference external" href="https://cmdlinetips.com/2021/04/convert-two-column-values-from-pandas-dataframe-to-a-dictionary/#:~:text=Another%20approach%20to%20convert%20two,all%20columns%20in%20the%20dataframe."&gt;Python and R tips post&lt;/a&gt; and the dict to df part from a &lt;a class="reference external" href="https://stackoverflow.com/questions/18837262/convert-python-dict-into-a-dataframe"&gt;Stack Overflow post&lt;/a&gt;. The below adaptation begins by converting an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an example of how to cast a Python dict into a dataframe and vice versa. I picked up the df to dict part from this &lt;a class="reference external" href="https://cmdlinetips.com/2021/04/convert-two-column-values-from-pandas-dataframe-to-a-dictionary/#:~:text=Another%20approach%20to%20convert%20two,all%20columns%20in%20the%20dataframe."&gt;Python and R tips post&lt;/a&gt; and the dict to df part from a &lt;a class="reference external" href="https://stackoverflow.com/questions/18837262/convert-python-dict-into-a-dataframe"&gt;Stack Overflow post&lt;/a&gt;. The below adaptation begins by converting an &amp;quot;NFL quarterbacks&amp;quot; Python dictionary into a dataframe and then back into a dict.&lt;/p&gt;
&lt;p&gt;Sometimes a dictionary is adequate to solve a problem with handy methods like get() and &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques"&gt;items()&lt;/a&gt;. You can also do a ton with a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0274/"&gt;dict comprehension&lt;/a&gt;. When more complex tabular data operations are needed, the pandas pd.DataFrame class is well equipped for the job. Dictionaries and dataframes are delightfully interoperable, like Tom Brady and any football team on the planet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;qbs_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Matthew Stafford&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Los Angeles Rams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Joe Burrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cincinnati Bengals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Tom Brady&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tampa Bay Buccaneers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Pat Mahomes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Kansas City Chiefs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Tony Romo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dallas Cowboys&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;qbs_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qbs_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;team&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qbs_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;qbs_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qbs_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;team&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;qbs_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qbs_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_dicts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qbs_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tom Brady&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Name not found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Terminal Output&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
RangeIndex: 5 entries, 0 to 4
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   name    5 non-null      object
 1   team    5 non-null      object
dtypes: object(2)
memory usage: 208.0+ bytes
None

{'Joe Burrow': 'Cincinnati Bengals',
 'Matthew Stafford': 'Los Angeles Rams',
 'Pat Mahomes': 'Kansas City Chiefs',
 'Tom Brady': 'Tampa Bay Buccaneers',
 'Tony Romo': 'Dallas Cowboys'}

Tampa Bay Buccaneers
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Did you notice that pprint sorts dicts by default?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here the printed dict is reordered alphabetically on the QB's names. Per the pprint docs, you can alter this behavior if desired via a keyword argument new in Python version 3.8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qbs_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_dicts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;pandas&lt;/strong&gt; &lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/getting_started/install.html"&gt;pandas installation documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"&gt;pandas.DataFrame&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html"&gt;pandas.Series&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_dict.html"&gt;pandas.DataFrame.to_dict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.info.html"&gt;pandas.DataFrame.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Standard Library Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/pprint.html#pprint.pprint"&gt;pprint.pprint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#mapping-types-dict"&gt;dict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#dict.get"&gt;dict.get&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, pandas, programming, python"></category><category term="pandas df to Python dict"></category><category term="Python data structure conversion"></category><category term="Python dict to pandas df"></category></entry><entry><title>Fix Spelling and Grammar with language_tool_python and textblob</title><link href="https://lofipython.com/fix-spelling-and-grammar-with-language_tool_python-and-textblob.html" rel="alternate"></link><published>2022-01-30T16:28:00-06:00</published><updated>2022-01-30T16:28:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-30:/fix-spelling-and-grammar-with-language_tool_python-and-textblob.html</id><summary type="html">&lt;p&gt;Below are two practical Python libraries for text processing. This function uses &lt;a class="reference external" href="https://textblob.readthedocs.io/en/dev/api_reference.html?highlight=correct#textblob.blob.TextBlob.correct"&gt;textblob's spelling correction&lt;/a&gt; along with &lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python&lt;/a&gt;, which applies grammatical corrections via the &lt;a class="reference external" href="https://languagetool.org/http-api/swagger-ui/#!/default/post_check"&gt;Language Tool API&lt;/a&gt;. I added these text processing transformations into my &lt;a class="reference external" href="https://positivethoughts.pythonanywhere.com/"&gt;concept text generation app&lt;/a&gt;. These are free, public APIs up to around 20 requests per …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Below are two practical Python libraries for text processing. This function uses &lt;a class="reference external" href="https://textblob.readthedocs.io/en/dev/api_reference.html?highlight=correct#textblob.blob.TextBlob.correct"&gt;textblob's spelling correction&lt;/a&gt; along with &lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python&lt;/a&gt;, which applies grammatical corrections via the &lt;a class="reference external" href="https://languagetool.org/http-api/swagger-ui/#!/default/post_check"&gt;Language Tool API&lt;/a&gt;. I added these text processing transformations into my &lt;a class="reference external" href="https://positivethoughts.pythonanywhere.com/"&gt;concept text generation app&lt;/a&gt;. These are free, public APIs up to around 20 requests per second. You can send both text and receive back an improved version of your text, ideally altering and improving your writing.&lt;/p&gt;
&lt;p&gt;I found 2 errors when I piped the text of this post into the below code: the proper noun &amp;quot;textblob&amp;quot; corrected to &amp;quot;text blow's&amp;quot; and the word &amp;quot;app&amp;quot; corrected to &amp;quot;pp&amp;quot;. Be sure to proof your results. Regardless, I like having these two Python tools in my bag!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://textblob.readthedocs.io/en/dev/install.html"&gt;textblob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;help with pip&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install language-tool-python
pip install -U textblob
python -m textblob.download_corpora
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;language_tool_python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textblob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_spelling_and_grammar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns str: text transformed by language tool and text blob&lt;/span&gt;
&lt;span class="sd"&gt;    1) Apply language tool API correction&lt;/span&gt;
&lt;span class="sd"&gt;    Language Tool Public API: https://dev.languagetool.org/public-http-api&lt;/span&gt;
&lt;span class="sd"&gt;    https://languagetool.org/http-api/swagger-ui/#!/default/post_check&lt;/span&gt;
&lt;span class="sd"&gt;    python library: https://pypi.org/project/language-tool-python/&lt;/span&gt;

&lt;span class="sd"&gt;    2) Apply textblob&amp;#39;s spell check to the text&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# use the public API, language English&lt;/span&gt;
        &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;language_tool_python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LanguageToolPublicAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en-US&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;tool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Language is incredble. Fascinatng how hoomans have so many.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;transformed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fix_spelling_and_grammar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformed_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Result: Language is incredible. Fascinating how humans have so many.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</content><category term="APIs, data, programming, writing"></category><category term="language"></category><category term="language tool"></category><category term="python"></category><category term="text"></category><category term="textblob"></category></entry><entry><title>How to Upgrade Requests in the Bash Console</title><link href="https://lofipython.com/how-to-upgrade-requests-in-the-pythonanywhere-bash-console.html" rel="alternate"></link><published>2022-01-23T14:41:00-06:00</published><updated>2022-01-23T14:41:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-23:/how-to-upgrade-requests-in-the-pythonanywhere-bash-console.html</id><summary type="html">&lt;p&gt;This command can be used to upgrade your Python &lt;a class="reference external" href="https://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt; with &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;, Python's package manager. It is tailored for a PythonAnywhere environment. I suppose this command works on any &lt;a class="reference external" href="https://www.gnu.org/software/bash/"&gt;Bash console&lt;/a&gt;, but if you're running your app with pythonanywhere, you can find the bash console here:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.pythonanywhere.com/user/your_username/consoles/"&gt;https://www.pythonanywhere …&lt;/a&gt;&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;This command can be used to upgrade your Python &lt;a class="reference external" href="https://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt; with &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;, Python's package manager. It is tailored for a PythonAnywhere environment. I suppose this command works on any &lt;a class="reference external" href="https://www.gnu.org/software/bash/"&gt;Bash console&lt;/a&gt;, but if you're running your app with pythonanywhere, you can find the bash console here:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.pythonanywhere.com/user/your_username/consoles/"&gt;https://www.pythonanywhere.com/user/your_username/consoles/&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="wp-image-6771 figure"&gt;
&lt;img alt="bash console python install" src="https://pythonmarketer.files.wordpress.com/2022/01/python-anywhere-bash-highlight-2.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Install requests with this command:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3.8 -m pip install requests --upgrade --user
&lt;/pre&gt;
&lt;p&gt;Substitute in whatever your Python version is. This command upgrades the requests library on a PythonAnywhere app. If any libraries depend on a specific version of requests, a warning appears like this one I saw for the &lt;a class="reference external" href="https://github.com/yakupadakli/python-unsplash"&gt;python-unsplash&lt;/a&gt; library.&lt;/p&gt;
&lt;blockquote&gt;
ERROR: python-unsplash 1.1.0 has requirement requests==2.20.0, but you'll have requests 2.27.1 which is incompatible.&lt;/blockquote&gt;
&lt;div class="wp-image-6777 figure"&gt;
&lt;img alt="Requests upgrade python library" src="https://pythonmarketer.files.wordpress.com/2022/01/requests-upgrade-full-install.png?w=1024" /&gt;
&lt;/div&gt;
</content><category term="coding, python"></category><category term="bash"></category><category term="pip"></category><category term="python install"></category><category term="pythonanywhere"></category></entry><entry><title>Analyzing Messi vs. Ronaldo with the FIFA API + jq + curl</title><link href="https://lofipython.com/pretty-print-the-ea-sports-fifa-ultimate-team-json-with-jq-curl.html" rel="alternate"></link><published>2022-01-10T23:15:00-06:00</published><updated>2022-01-10T23:15:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-10:/pretty-print-the-ea-sports-fifa-ultimate-team-json-with-jq-curl.html</id><summary type="html">&lt;p&gt;Who is the world's greatest footballer, Messi or Ronaldo? EA Sports surely has calculated the answer to this question in their player ratings. They rate peak Crisitiano Ronaldo, Lionel Messi and Luka Modrić at 99 overall, with Neymar and Lewandowski at 98. Anecdotally, Messi has won 7 &lt;a class="reference external" href="https://www.topendsports.com/sport/soccer/list-player-of-the-year-ballondor.htm"&gt;Ballon d'Or&lt;/a&gt;, the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Who is the world's greatest footballer, Messi or Ronaldo? EA Sports surely has calculated the answer to this question in their player ratings. They rate peak Crisitiano Ronaldo, Lionel Messi and Luka Modrić at 99 overall, with Neymar and Lewandowski at 98. Anecdotally, Messi has won 7 &lt;a class="reference external" href="https://www.topendsports.com/sport/soccer/list-player-of-the-year-ballondor.htm"&gt;Ballon d'Or&lt;/a&gt;, the highest individual football honor one can achieve each year. Ronaldo has won 5 B'allon d'Or. Modrić has won 1 Ballon d'Or. Lewandowski was runner up this year, but has never won the honor. Neymar has never won a Ballon d'Or.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://www.ea.com/games/fifa/fifa-22"&gt;FIFA&lt;/a&gt;, a player's video game representation is modeled intricately in a series of traits and specialties characterizing each player. The &lt;a class="reference external" href="https://www.easports.com/fifa/ultimate-team/api/fut/item"&gt;&amp;quot;Ultimate Team&amp;quot; EA Sports API&lt;/a&gt; is viewable as a plain json page or more cheekily with one line of &lt;a class="reference external" href="https://curl.se/"&gt;curl&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/stedolan/jq"&gt;jq, a &amp;quot;command line json processor&amp;quot;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl 'https://www.easports.com/fifa/ultimate-team/api/fut/item' | jq '.'
&lt;/pre&gt;
&lt;p&gt;Enter this in a &lt;a class="reference external" href="https://missing.csail.mit.edu/2020/shell-tools/"&gt;shell&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/jlevy/the-art-of-command-line"&gt;command line&lt;/a&gt;. The result is beautiful, readable, pretty printed json!&lt;/p&gt;
&lt;div class="section" id="messi-top-vs-ronaldo-bottom-fifa-player-ratings"&gt;
&lt;span id="messi-left-vs-ronaldo-right-fifa-player-ratings"&gt;&lt;/span&gt;&lt;h2&gt;Messi (Top) Vs. Ronaldo (Bottom) FIFA Player Ratings&lt;/h2&gt;
&lt;div class="tiled-gallery-gallery docutils container"&gt;
&lt;div class="tiled-gallery-row docutils container"&gt;
&lt;div class="tiled-gallery-col docutils container"&gt;
&lt;div class="figure"&gt;
&lt;img alt="Messi FIFA skill attributes" src="https://pythonmarketer.files.wordpress.com/2022/01/messi-fifa-attributes-cropped.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="tiled-gallery-col docutils container"&gt;
&lt;div class="figure"&gt;
&lt;img alt="Ronaldo FIFA skill attributes" src="https://pythonmarketer.files.wordpress.com/2022/01/ronaldo-attributes-fifa.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These ratings represent the players at their peak of their careers. Messi is a better dribbler, while Ronaldo has more power and strength. Messi has the edge in free kicks, curve in his shot and &amp;quot;longshots&amp;quot; 99 to 98 over Cristiano. They are tied at &amp;quot;finishing&amp;quot;, each with 99. Ronaldo has the &amp;quot;Power Free-Kick&amp;quot; trait, whereas Messi has &amp;quot;Chip Shot&amp;quot;, &amp;quot;Finesse Shot&amp;quot; and &amp;quot;Playmaker&amp;quot; traits giving him an edge.&lt;/p&gt;
&lt;p&gt;EA's ratings suggest that both are prominent goal scorers, with a slight edge to Messi in finesse and shooting from distance. However, there's something to be said for kicking the ball really damn hard. Ronaldo has superior raw shot power and a lethal combo of more powerful jump and stronger headers. All this combined with an &amp;quot;Aerial Threat&amp;quot; specialty enables Ronaldo to vault above and around defenders to smash in golazos off the volley. Ronaldo sizes up to 6' 2&amp;quot; (187 cm) vs. Messi's 5' 7&amp;quot; (170 cm) frame. This Portugese man definitely has an advantage in getting higher in the air. But the Argentinian is &lt;a class="reference external" href="ttps://www.instagram.com/p/Cc59jtvjk_0/"&gt;quite darty&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Messi has incredible accuracy from distance. He's also a better passer all around and has perfect &amp;quot;vision&amp;quot;, great qualities for winning football games. Only in crossing does he have a lower passing rating. Ronaldo is also 10 points better at &amp;quot;penalties&amp;quot; or penalty kicks. The closer he gets to the goal, the more dangerous he is. Messi is more dangerous with the ball while dribbling, passing or shooting except when taking a PK.&lt;/p&gt;
&lt;p&gt;Advantages can be gained in many different aspects of soccer. EA has developed a fun dataset to model these all time greats across several football skill dimensions. In &lt;a class="reference external" href="https://www.ea.com/en-gb/games/fifa/fifa-22/ratings/ratings-database"&gt;2022's version of the game&lt;/a&gt;, Messi is rated a 93, with Cristiano 91. Clearly these two are worthy of top honors. Don't forget Robert Lewandowski, with a 92 rating, who consistently lights up the Champions League and Bundesliga.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jq ftw&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had never used jq before this. Really enjoyed the quick, stylish and practical view of some json. This cool terminal display and syntax highlighting was on my Chromebook shell. It's neat how easily you can pretty print json with jq. I rate it a 99 for json pretty processing and pretty printing on the FIFA scale. Read more in the &lt;a class="reference external" href="https://stedolan.github.io/jq/tutorial/"&gt;jq documentation&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content><category term="command prompt, productivity"></category><category term="command line"></category><category term="data"></category><category term="fifa"></category><category term="football"></category><category term="jq"></category><category term="json"></category></entry><entry><title>Experiencing Flow While Coding</title><link href="https://lofipython.com/experiencing-flow-while-coding.html" rel="alternate"></link><published>2022-01-08T15:29:00-06:00</published><updated>2022-01-08T15:29:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-08:/experiencing-flow-while-coding.html</id><summary type="html">&lt;p&gt;Yesterday, I experienced a flow state where I became manically obsessed
with perfecting a script I was working on. I think it's beautiful code,
about 100 lines long without &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt;. It solves a real need
and it felt great to write it. Some scripts feel terrible to write and
you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, I experienced a flow state where I became manically obsessed
with perfecting a script I was working on. I think it's beautiful code,
about 100 lines long without &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt;. It solves a real need
and it felt great to write it. Some scripts feel terrible to write and
you know they're bad. However, this one felt like one of the best I've
ever written.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;Flow&lt;/a&gt; seems like a
mythical, unattainable state these days as portrayed in media, but we
can all agree... we love it. When you're in flow, you know it and you
feel a grace in improving your work. For coders, maybe it's by wrapping
up a few lines here and there into functions. &lt;a class="reference external" href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;, reordering,
handling loose ends or edge cases, writing docstrings with supporting
documentation and clarifying that you really understand what's
happening... these things are all mundane at times but critical to
writing reliable code.&lt;/p&gt;
&lt;p&gt;While doing these typical tasks, you're attaining skill and mastery, one
of the highest dopamine hits humans can register legally in all 50
states. You know how much better this iteration of code is than when you
first learned to write software. You take bits and pieces from past
projects and fit them all together into a cohesive, purposeful program.
For example, I was tickled to use Python's &lt;a class="reference external" href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files"&gt;readlines() file reading
function&lt;/a&gt;
to get the last line of a text file. I learned about this function in my
first ever free &lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;Python course on Coursera&lt;/a&gt;, 7 years ago. Thanks again
Dr. Chuck!&lt;/p&gt;
&lt;p&gt;This time, I realized my flow when researching &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601 time format
strings&lt;/a&gt; and guiding them
into an HTTP request with the &lt;a class="reference external" href="https://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt;. A new solution
emerged, regurgitated from a prior project and mashed up into a more
refined form to satisfy the project's requirements. I combined old and
new ideas into a better solution than I had ever thought, a fitting
complement for the &lt;a class="reference external" href="https://lofipython.com/how-to-make-json-requests-with-python/"&gt;API&lt;/a&gt; at
hand. Time will tell if the solution will actually work as well as I
hope.&lt;/p&gt;
&lt;p&gt;Flow is real. You can find work that puts you in a flow state, and it
doesn't have to be super interesting work to get there. The learning
process pays rewards in competency when exposure to different domains
combine. Einstein knew a form of this as &lt;a class="reference external" href="https://evernote.com/blog/einsteins-unique-approach-to-thinking/#:~:text=He%20viewed%20taking%20music%20breaks,come%20up%20with%20new%20ideas."&gt;combinatory play&lt;/a&gt;.
Repetition enhances this effect and solidifies your foundation. Flow
makes it fun! Only rarely do I feel the highest level of engrossment in
my work. I sensed I was flowing on this recent project. You can find
these types of challenges too. Keep searching for your flow!&lt;/p&gt;
</content><category term="APIs, coding, HTTP, productivity, programming"></category><category term="flow state"></category><category term="python"></category><category term="skills"></category></entry><entry><title>Create a Column of Values in Pandas with df.assign()</title><link href="https://lofipython.com/create-a-column-of-values-in-pandas-with-df-assign.html" rel="alternate"></link><published>2022-01-07T13:12:00-06:00</published><updated>2022-01-07T13:12:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-07:/create-a-column-of-values-in-pandas-with-df-assign.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/"&gt;Pandas&lt;/a&gt; is amazing, what else is there to say? Learning the nuances of its API have yielded tons of times where it helped me get stuff done.&lt;/p&gt;
&lt;p&gt;I recently picked up the &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.assign.html"&gt;pandas dataframe's &amp;quot;assign&amp;quot; function&lt;/a&gt; for creating a new column of values. This is an elegant way to set …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/"&gt;Pandas&lt;/a&gt; is amazing, what else is there to say? Learning the nuances of its API have yielded tons of times where it helped me get stuff done.&lt;/p&gt;
&lt;p&gt;I recently picked up the &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.assign.html"&gt;pandas dataframe's &amp;quot;assign&amp;quot; function&lt;/a&gt; for creating a new column of values. This is an elegant way to set a column of values in tabular data with the pandas library. Below you'll see two ways to set a column of values in pandas. In the first way, I am chaining two assign functions together to create 2 new columns, &amp;quot;sound&amp;quot; and &amp;quot;type&amp;quot;. I prefer using assign because it looks better and it does not result in any warnings from pandas. Highly recommend getting familiar with pandas functions like assign and API nuances like &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/series.html?highlight=str%20accessors#accessors"&gt;Series accessors&lt;/a&gt; to up your tabular data game.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;cats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Garfield&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Meowth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cats&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# best way&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Meow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cartoon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# alternative way that also works, but with warnings from pandas&lt;/span&gt;
&lt;span class="c1"&gt;# df[&amp;quot;sound&amp;quot;] = &amp;quot;Meow&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;DataFrame.assign : Can evaluate an expression or function to create new values for a column.
pandas source code: &lt;a class="reference external" href="https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/core/frame.py#L4421-L4487"&gt;https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/core/frame.py#L4421-L4487&lt;/a&gt;&lt;/p&gt;
</content><category term="pandas, programming, python"></category><category term="cats"></category><category term="data"></category></entry><entry><title>ftfy, The Wonky Text Fixing Python Library</title><link href="https://lofipython.com/ftfy-the-wonky-text-fixing-python-library.html" rel="alternate"></link><published>2022-01-06T11:44:00-06:00</published><updated>2022-01-06T11:44:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-06:/ftfy-the-wonky-text-fixing-python-library.html</id><summary type="html">&lt;p&gt;Every Python programmer has undoubtedly come across some crazy characters. The &lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/"&gt;ftfy library &amp;quot;Fixes Text For You&amp;quot;&lt;/a&gt; and acts like a swiss army knife when you've got questionable characters breaking your script. In my case, an HTTP request was failing because of weird cryptic letters hiding in the data when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every Python programmer has undoubtedly come across some crazy characters. The &lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/"&gt;ftfy library &amp;quot;Fixes Text For You&amp;quot;&lt;/a&gt; and acts like a swiss army knife when you've got questionable characters breaking your script. In my case, an HTTP request was failing because of weird cryptic letters hiding in the data when it was only supposed to be an apostrophe. This library fixed my text and made it appear flawless. I really like ftfy because it solves a common problem, fixing &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mojibake#:~:text=Mojibake%20(%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%3B%20IPA%3A,from%20a%20different%20writing%20system."&gt;mojibake&lt;/a&gt;&amp;quot; or mangled characters. It's a good tool to have when you see these types of issues!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/ftfy/"&gt;Install with pip&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install ftfy
&lt;/pre&gt;
&lt;div class="wp-image-6448 figure"&gt;
&lt;img alt="source: `ftfy documentation &amp;lt;https://ftfy.readthedocs.io/en/latest/avoid.html&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2022/01/ftfy-example-1.png?w=819" /&gt;
&lt;p class="caption"&gt;source: &lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/avoid.html"&gt;ftfy documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://docs.python.org/3/howto/unicode.html"&gt;Python Unicode How To&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming"></category><category term="ftfy"></category><category term="python"></category><category term="text cleaning"></category></entry><entry><title>How to Track Python Script Completion</title><link href="https://lofipython.com/how-to-track-python-script-completion.html" rel="alternate"></link><published>2022-01-05T11:49:00-06:00</published><updated>2022-01-05T11:49:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-05:/how-to-track-python-script-completion.html</id><summary type="html">&lt;p&gt;Did your script run to completion? Sure, you might log some tracebacks along the way or terminate the program early with &lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys.exit"&gt;sys.exit()&lt;/a&gt;. But did your script actually run completely to the end? I have yet to use the &lt;a class="reference external" href="https://docs.python.org/3/library/trace.html"&gt;Trace module&lt;/a&gt; but it seems worth checking out also. Visualization tools …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Did your script run to completion? Sure, you might log some tracebacks along the way or terminate the program early with &lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys.exit"&gt;sys.exit()&lt;/a&gt;. But did your script actually run completely to the end? I have yet to use the &lt;a class="reference external" href="https://docs.python.org/3/library/trace.html"&gt;Trace module&lt;/a&gt; but it seems worth checking out also. Visualization tools like &lt;a class="reference external" href="https://github.com/alexmojaki/heartrate"&gt;heartrate&lt;/a&gt; are worth mentioning too depending on how you are running your scripts. Task runners typically have run status tracking as well. I like having a visual confirmation by logging some sort of information when a script finishes as intended. It's nice to know when your scripts finished or not. Use logging and Trace to up your reliability of your scripts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An easy way to track this is with the logging module:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;improvise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Improv Tutorial: https://www.youtube.com/watch?v=C6wY9OwqJ2A&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boom! Detective Michael Scarn, I&amp;#39;m with the FBI!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error occurred during improv.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(clientip)-15s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(user)-8s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;improvise.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;improvise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Improvisation finished!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</content><category term="coding, programming, python, Scripts"></category><category term="logging"></category><category term="python scripts"></category><category term="reliability"></category><category term="tracking"></category></entry><entry><title>Phone Number Cleaning Regex + pandas Series Example</title><link href="https://lofipython.com/phone-number-cleaning-regex-pandas-series-example.html" rel="alternate"></link><published>2021-12-31T14:19:00-06:00</published><updated>2021-12-31T14:19:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-12-31:/phone-number-cleaning-regex-pandas-series-example.html</id><summary type="html">&lt;p&gt;This is a solution I worked out recently to strip phone numbers into a uniform format. To install &lt;a class="reference external" href="https://pandas.pydata.org/docs/getting_started/install.html"&gt;pandas with pip&lt;/a&gt;, enter in command prompt:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The pandas library has regex built in and it's pretty neat! Behold the power of pandas and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expression …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a solution I worked out recently to strip phone numbers into a uniform format. To install &lt;a class="reference external" href="https://pandas.pydata.org/docs/getting_started/install.html"&gt;pandas with pip&lt;/a&gt;, enter in command prompt:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The pandas library has regex built in and it's pretty neat! Behold the power of pandas and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expression&lt;/a&gt; to do trivial telephone tidying:&lt;/p&gt;
&lt;div class="wp-image-6382 figure"&gt;
&lt;img alt="strip phone formatting with Python" src="https://pythonmarketer.files.wordpress.com/2021/12/pandas-example-7-3.41.12-pm.png?w=561" style="width: 767px; height: 150px;" /&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(010) 001-1010&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Phone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;str&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# remove parentheses, hyphens and spaces with pandas + regex&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\(|\)|-| &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# resulting number: &amp;quot;0100011010&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Regex is cool.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Grasping the intricacies of what this code is doing feels elegant when you connect the dots.. or pipes. The replace is done via a pandas &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/series.html#api-series-str"&gt;str accessor&lt;/a&gt;. In the pat string, the parentheses are escaped with slashes and separated by pipes &amp;quot;|&amp;quot;. They act as an &lt;a class="reference external" href="https://realpython.com/python-or-operator/"&gt;or operator&lt;/a&gt;, succinctly chaining multiple characters together for matching and in this case replacing them with nothing. Pretty nifty. If you read the &lt;a class="reference external" href="https://pandas.pydata.org/docs/"&gt;pandas docs&lt;/a&gt;, you'll find regex is accessible in different parts of the API. Dive in, it's some of my favorite documentation to snoop. There is so much you can do with pandas. This example demonstrates how its flexible functions get the job done efficiently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further Reading:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html"&gt;pandas.Series documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.Series.str.replace.html"&gt;pandas str.replace documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://regex.info/blog/2006-09-15/247"&gt;Source of the famous “Now you have two problems” quote&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, pandas, programming, python"></category><category term="data cleaning"></category><category term="regex"></category></entry><entry><title>Memory Monitoring Python Libraries + Tools</title><link href="https://lofipython.com/tools-tips-to-beat-memoryerror-in-your-python-scripts.html" rel="alternate"></link><published>2021-12-19T11:57:00-06:00</published><updated>2021-12-19T11:57:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-12-19:/tools-tips-to-beat-memoryerror-in-your-python-scripts.html</id><summary type="html">&lt;p&gt;If you write Python code, there's probably been a time or two when you saw the dreaded &lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#MemoryError"&gt;&amp;quot;MemoryError&amp;quot;&lt;/a&gt;. This happens after one of your Python scripts stops because your computer has no spare &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; to execute it. I recently experienced this frustration whilst trying to write hundreds of thousands of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you write Python code, there's probably been a time or two when you saw the dreaded &lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#MemoryError"&gt;&amp;quot;MemoryError&amp;quot;&lt;/a&gt;. This happens after one of your Python scripts stops because your computer has no spare &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; to execute it. I recently experienced this frustration whilst trying to write hundreds of thousands of csv files. However, this time I grasped for tools that support smarter memory management. Now, I can watch my computer's memory bounce around with the Windows Resource Monitor. Python has quite a few memory profiling libraries for monitoring memory too!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Libraries and Guides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/c-api/memory.html"&gt;Memory Management Overview&lt;/a&gt;, Python documentation&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pythonprofilers/memory_profiler"&gt;Memory Profiler&lt;/a&gt;: &amp;quot;monitor memory usage of Python code&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt;: &amp;quot;Cross-platform lib for process and system monitoring in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;: &amp;quot;Sampling profiler for Python programs&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/joerick/pyinstrument"&gt;pyinstrument&lt;/a&gt;: &amp;quot;🚴 Call stack profiler for Python. Shows you why your code is slow!&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/plasma-umass/scalene"&gt;Scalene&lt;/a&gt;: &amp;quot;a high-performance, high-precision CPU, GPU, and memory profiler for Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;G&lt;/a&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;lances&lt;/a&gt;: &amp;quot;Glances an Eye on your system. A top/htop alternative for GNU/Linux, BSD, Mac OS and Windows operating systems.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sumerc/yappi"&gt;Yappi&lt;/a&gt;: &amp;quot;Yet Another Python Profiler, but this time thread&amp;amp;coroutine&amp;amp;greenlet aware.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pythonspeed/filprofiler"&gt;Fil&lt;/a&gt;: &amp;quot;A Python memory profiler for data processing and scientific computing applications&amp;quot; (&lt;a class="reference external" href="https://www.youtube.com/watch?v=2nKvzVIUjLE&amp;amp;ab_channel=PyninsulaOfficial"&gt;Video&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pyutils/line_profiler"&gt;line_profiler&lt;/a&gt;: &amp;quot;Line-by-line profiling for Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/vpelletier/pprofile"&gt;pprofile&lt;/a&gt;: &amp;quot;Line-granularity, thread-aware deterministic and statistic pure-python profiler&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/zhuyifei1999/guppy3/"&gt;Guppy 3&lt;/a&gt;: &amp;quot;Python programming environment and heap analysis toolset&amp;quot;&lt;/p&gt;
&lt;p&gt;S&lt;em&gt;ee also:&lt;/em&gt; &lt;a class="reference external" href="https://docs.python.org/3/library/profile.html"&gt;The Python Profilers&lt;/a&gt;, Python documentation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPython standard distribution comes with three deterministic profilers.&amp;nbsp;&lt;tt class="docutils literal"&gt;cProfile&lt;/tt&gt;,&amp;nbsp;&lt;tt class="docutils literal"&gt;Profile&lt;/tt&gt;&amp;nbsp;and&amp;nbsp;&lt;tt class="docutils literal"&gt;hotshot&lt;/tt&gt;.&amp;nbsp;&lt;tt class="docutils literal"&gt;cProfile&lt;/tt&gt;&amp;nbsp;is implemented as a C module based on&amp;nbsp;&lt;tt class="docutils literal"&gt;lsprof&lt;/tt&gt;,&amp;nbsp;&lt;tt class="docutils literal"&gt;Profile&lt;/tt&gt;&amp;nbsp;is in pure Python and&amp;nbsp;&lt;tt class="docutils literal"&gt;hotshot&lt;/tt&gt;&amp;nbsp;can be seen as a small subset of a cProfile.&lt;/p&gt;
&lt;p&gt;Yappi Github, &lt;a class="reference external" href="https://github.com/sumerc/yappi"&gt;https://github.com/sumerc/yappi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; &lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Windows_Task_Manager#:~:text=The%20program%20can%20be%20started,typing%20taskmgr%20in%20the%20File"&gt;Task Manager&lt;/a&gt;: Windows process management tool with some memory analytics&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.tableau.com/current/server/en-us/perf_collect_perfmon.htm"&gt;Collect Data in Windows with Performance Monitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Resource_Monitor"&gt;Resource Monitor&lt;/a&gt;: Windows tool with Memory, CPU, Disk and Network monitoring tabs&lt;/p&gt;
&lt;div class="wp-image-6300 figure"&gt;
&lt;img alt="Resource Monitor can stop processes from running and view in use, standby (Cached) and free memory. This shows 7 Python scripts running and 49% of total memory is being consumed. Looks like we are running steady and safely below &amp;quot;MemoryError&amp;quot; overflow. We might be able to add a few more scripts with 51% of RAM available!" src="https://pythonmarketer.files.wordpress.com/2021/12/resource-monitor-labels-full.jpg?w=796" /&gt;
&lt;p class="caption"&gt;Resource Monitor can stop processes from running and view in use, standby (Cached) and free memory. This shows 7 Python scripts running and 49% of total memory is being consumed. Looks like we are running steady and safely below &amp;quot;MemoryError&amp;quot; overflow. We might be able to add a few more scripts with 51% of RAM available!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Memory Tips and Guides&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9"&gt;Memory Management in Python&lt;/a&gt;, Towards Data Science: this article shows some memory efficient ways to write your code.&lt;/li&gt;
&lt;li&gt;Use only the data you need. Any data you read in and aren't using is held in memory. The &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"&gt;usecols argument&lt;/a&gt; in pandas is a great way to read a csv and only use the columns you need.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonspeed.com/articles/chunking-pandas/"&gt;Reading data in chunks&lt;/a&gt; with the &lt;a class="reference external" href="https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/io/parsers/readers.py#L491-L586"&gt;chunksize argument&lt;/a&gt; is another way to reduce memory usage for large datasets.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonspeed.com/articles/pandas-dataframe-series-memory-usage/"&gt;Measuring the memory usage of a Pandas dataframe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some tools are line oriented, others are function oriented. If your code contains large functions, you might favor a line based profiling tool.&lt;/li&gt;
&lt;li&gt;Be aware of the overhead some memory tools may incur. memory_profile was clocked with a whopping 270x slowdown per the Scalene PyCon talk below. The talk shows an awesome comparison of these Python profiling libraries:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-6330 figure"&gt;
&lt;img alt="Scalene Pycon US 2021 Talk" src="https://pythonmarketer.files.wordpress.com/2021/12/scalene-pycon-us-2021-memory-library-comparison.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Recommended Reading&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/64"&gt;Profiling and Analyzing Performance of Python Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pymotw.com/2/profile/"&gt;profile, cProfile, and pstats – Performance analysis of Python programs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/64"&gt;Profiling and Analyzing Performance of Python Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.tecmint.com/command-line-tools-to-monitor-linux-performance/"&gt;20 Linux Memory Management Command Line Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;Random-access Memory (RAM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://computersciencewiki.org/index.php/Cache_memory"&gt;Cache Memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you'll see &amp;quot;MemoryError&amp;quot; depends on your computer's hardware, the size of your dataset and what operations you need to script out. Generally speaking, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Input/output"&gt;I/O&lt;/a&gt; or file reads and writes are more expensive operations.&lt;/p&gt;
&lt;p&gt;The tools in this post will help you anticipate how much computing power you have available, monitor your memory consumption more closely and avoid pushing your computer past its limits. You can do things like reading data in chunks and only using the columns you need to reduce your memory consumption. Realizing these tools and strategies can make getting things done with Python a smoother ride.&lt;/p&gt;
</content><category term="coding, computing, pandas, performance, programming"></category><category term="memory profiling"></category><category term="monitoring"></category><category term="python"></category><category term="RAM"></category><category term="Windows"></category></entry><entry><title>In Praise of Resource Scoping</title><link href="https://lofipython.com/in-praise-of-resource-scoping.html" rel="alternate"></link><published>2021-12-18T11:09:00-06:00</published><updated>2021-12-18T11:09:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-12-18:/in-praise-of-resource-scoping.html</id><summary type="html">&lt;p&gt;When assessing your environment, problem or your goal, meticulously scout the tools at your disposal. When you're learning a new job, a new project or a programming language's tools for example, it pays to have a grasp of your options. Researching what documentation, guides, tools or libraries are at your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When assessing your environment, problem or your goal, meticulously scout the tools at your disposal. When you're learning a new job, a new project or a programming language's tools for example, it pays to have a grasp of your options. Researching what documentation, guides, tools or libraries are at your disposal will help you accomplish your goal. That sounds obvious but here's what I mean.&lt;/p&gt;
&lt;p&gt;Seek out resources. Bookmark links and support info in an Excel spreadsheet with a handful of columns, for example. Soon, you'll amass a collection tools and guides to get things done. Most companies or products have &amp;quot;resource centers&amp;quot;, mountains of internal documentation, tools and blogs. At many organizations, people have likely made tools for something they needed in the past then moved on. Often these tools can be leveraged for anyone who cares enough to seek out, read about and learn how to use them. Dig for these tools too. Find resources by googling products you use. Subscribe to their &lt;a class="reference external" href="https://status.box.com/"&gt;status pages&lt;/a&gt;. Look for other tools that may help you in a pinch like &lt;a class="reference external" href="https://support.goto.com/webinar/system-check-attendee"&gt;GoToWebinar's system check&lt;/a&gt; to help someone figure out what's wrong with their browser. I love these types of browser-based troubleshooting software. These are ways to gain a better understanding of technologies that might affect or improve your productivity or day to day goals.&lt;/p&gt;
&lt;p&gt;I think of &amp;quot;resource scoping&amp;quot; as crawling these types of resources for every tool, guide and support contact that might good to know. The effort you put in to scope available resources is worth the time spent. Check out the &amp;quot;resource scoping&amp;quot; I did in &lt;a class="reference external" href="https://pythonmarketer.com/2021/05/29/python-libraries-tools-resources-for-creative-and-academic-writers/"&gt;this post I wrote focused on tools for writers&lt;/a&gt;!&lt;/p&gt;
&lt;div class="wp-image-6282 figure"&gt;
&lt;img alt="cartoon media types" src="https://pythonmarketer.files.wordpress.com/2021/12/pixel-cells-gce7fcdb43_640.png?w=640" /&gt;
&lt;/div&gt;
</content><category term="productivity, work"></category><category term="documentation"></category><category term="research"></category><category term="tools"></category></entry><entry><title>What is Your Circle of the Internet?</title><link href="https://lofipython.com/what-is-your-circle-of-the-internet.html" rel="alternate"></link><published>2021-11-06T11:29:00-05:00</published><updated>2021-11-06T11:29:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-11-06:/what-is-your-circle-of-the-internet.html</id><summary type="html">&lt;p&gt;This morning I'm meditating on my usual apps or websites I visit through the course of a typical day. I wonder how limited or expansive it could be in the span of all that's waiting to be consumed on the internet. I like reading online or physical books too and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This morning I'm meditating on my usual apps or websites I visit through the course of a typical day. I wonder how limited or expansive it could be in the span of all that's waiting to be consumed on the internet. I like reading online or physical books too and writing. Consider your own circle of the internet. What sites do you frequent? What do you consume? This is more rhetorical. It's good to pose the question and consider what you might be missing. I recently downloaded a bunch of nature and hiking apps. Maybe that means I want more of that in my life. &lt;a class="reference external" href="https://www.youtube.com/watch?v=hgw_yprN_-w&amp;amp;ab_channel=LiliDVLima"&gt;Happy trails&lt;/a&gt;.&lt;/p&gt;
</content><category term="apps, internet, life"></category><category term="introspection"></category><category term="web browsing"></category></entry><entry><title>WordPress Ad Campaign Results from a Typical Blog</title><link href="https://lofipython.com/meta-blog-mediocre-september-ad-campaign-results.html" rel="alternate"></link><published>2021-10-30T19:32:00-05:00</published><updated>2021-10-30T19:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-10-30:/meta-blog-mediocre-september-ad-campaign-results.html</id><summary type="html">&lt;p&gt;In September 2021, I tested out the recommended ads runner, &lt;a class="reference external" href="https://wordads.co/"&gt;WordAds&lt;/a&gt;, on this WordPress blog. 6,182 ads were served over the course of a month, earning $0.86 from impressions and clicks. My average CPM or cost per thousand impressions was $0.14. My blog averages about 1,600 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In September 2021, I tested out the recommended ads runner, &lt;a class="reference external" href="https://wordads.co/"&gt;WordAds&lt;/a&gt;, on this WordPress blog. 6,182 ads were served over the course of a month, earning $0.86 from impressions and clicks. My average CPM or cost per thousand impressions was $0.14. My blog averages about 1,600 views a month at the moment, mostly fueled by various search engines. Here's an example of one ad that ran:&lt;/p&gt;
&lt;div class="wp-image-6185 figure"&gt;
&lt;img alt="**Example Ad Run on This Site Shown Above**" src="https://pythonmarketer.files.wordpress.com/2021/10/wordads-ad-1.png?w=877" /&gt;
&lt;p class="caption"&gt;&lt;strong&gt;Example Ad Run on This Site Shown Above&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In my WordPress account, I upgraded to the business plan. This gave me access to WordPress plug-ins. I enabled the &lt;a class="reference external" href="https://yoast.com/wordpress/plugins/seo/"&gt;Yoast SEO plug-in&lt;/a&gt; and activated its site optimization. I also enabled the maximum ads possible in my settings. In spite of these efforts, the results were sparse. Maybe there's more that I could have done. But this blog is passive and more like a hobby at the moment. I'm ok with a blog that makes $0.86 per month. Maybe someday it will be worth more. But I enjoy writing so it's all good. My skills grow and maybe I share something with someone across the world. That's what keeps me coming back.&lt;/p&gt;
&lt;p&gt;I concluded I will not be running ads anytime soon. I wanted to get a baseline of what I was leaving on the table by not running ads. Now I can project when I might tap into the blog's potential traffic revenue, if ever. It seems I would need much higher views per month before ads makes sense with my level of traffic, 65 blog followers and minor social media clout.&lt;/p&gt;
&lt;p&gt;There's also the added benefit of not serving up people's data to ad companies. Ads seem to be a generally accepted way to earn from your internet labors. But right now, they're not for this blog. Good luck monetizing your blog. Or just writing for the hell of it!&lt;/p&gt;
&lt;div class="wp-image-6182 figure"&gt;
&lt;img alt="Wordpress Ad Campaign Analytics" src="https://pythonmarketer.files.wordpress.com/2021/10/sept-2021-ad-campaign-results.png?w=1024" /&gt;
&lt;/div&gt;
</content><category term="Marketing, meta, writing"></category><category term="ad campaign"></category><category term="SEO"></category></entry><entry><title>What I Learned from Black, Python's "Uncompromising" Code Formatter</title><link href="https://lofipython.com/a-learning-use-case-for-black-python-code-formatter.html" rel="alternate"></link><published>2021-09-23T10:12:00-05:00</published><updated>2021-09-23T10:12:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-09-23:/a-learning-use-case-for-black-python-code-formatter.html</id><summary type="html">&lt;p&gt;Black is a code formatting tool that I have been testing out recently to see what the hype is about. It is the defacto &amp;quot;uncompromising code formatter in Python&amp;quot;. I normally do not use any code formatters since I'm not required to use them. This short post aims to convince …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Black is a code formatting tool that I have been testing out recently to see what the hype is about. It is the defacto &amp;quot;uncompromising code formatter in Python&amp;quot;. I normally do not use any code formatters since I'm not required to use them. This short post aims to convince you that Black is an insightful way to see the parts of your code that are dangerously unreadable.&lt;/p&gt;
&lt;p&gt;I have found it interesting to see what black does with my gnarliest code. It has taught me what is considered &amp;quot;good formatting&amp;quot; by some Pythonistas. The areas where I see the most improvement is how it enforces &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP-8&lt;/a&gt;'s characters per line limit. Often before, I didn't know how to break my code into several lines. My scripts tended to have one-liners trailing off the edge of my text editor. Black teaches you new ways to organize your code and makes it easier to understand. Now I write my code like Black the first time instead of letting it trail off the screen.&lt;/p&gt;
&lt;p&gt;Initially I was hesitant to try Black because I didn't want to sabotage my own code style. But since running Black on a few of my scripts, it has taught me new ways to write code. Give Black a chance and you will learn how to write more readable Python.&lt;/p&gt;
&lt;p&gt;Here's the project on GitHub: &lt;a class="reference external" href="https://github.com/psf/black"&gt;https://github.com/psf/black&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python"></category><category term="Black Python"></category><category term="PEP-8"></category><category term="writing code"></category></entry><entry><title>Write More Code, Write Less Code</title><link href="https://lofipython.com/write-more-code-write-less-code.html" rel="alternate"></link><published>2021-09-09T17:11:00-05:00</published><updated>2021-09-09T17:11:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-09-09:/write-more-code-write-less-code.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Write More Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write code everyday. Code fast and break things. Cherish your tracebacks. Keep going back, no matter how hopeless it may seem. Code habitually. Learn how to code. Get better at code. Love code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write Less Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use as few lines as possible. Nothing looks better than a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Write More Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write code everyday. Code fast and break things. Cherish your tracebacks. Keep going back, no matter how hopeless it may seem. Code habitually. Learn how to code. Get better at code. Love code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write Less Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use as few lines as possible. Nothing looks better than a program shorter than 50 or 100 lines! Avoid aggressively gnarly one-liners. Use sensible one-liners or [&lt;em&gt;gasp&lt;/em&gt;] for loops. Read other people's code.&lt;/p&gt;
&lt;p&gt;Write more code, write less code.&lt;/p&gt;
</content><category term="coding"></category><category term="code"></category><category term="coding practice"></category><category term="how to code"></category></entry><entry><title>Yoast SEO API Python Example With requests + pandas</title><link href="https://lofipython.com/yoast-api-python-example-with-requests-pandas.html" rel="alternate"></link><published>2021-09-06T14:12:00-05:00</published><updated>2021-09-06T14:12:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-09-06:/yoast-api-python-example-with-requests-pandas.html</id><summary type="html">&lt;p&gt;Lately I've been checking out the &lt;a class="reference external" href="https://yoast.com/wordpress/plugins/seo/"&gt;Yoast SEO plug-in&lt;/a&gt; and their &lt;a class="reference external" href="https://developer.yoast.com/customization/apis/rest-api"&gt;REST API&lt;/a&gt;. The API returns all of the SEO metadata, meta tags, schema.org data, etc. for your Wordpress blog posts. Here's a Yoast API Python example script to fetch post metadata via requests and pandas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Lately I've been checking out the &lt;a class="reference external" href="https://yoast.com/wordpress/plugins/seo/"&gt;Yoast SEO plug-in&lt;/a&gt; and their &lt;a class="reference external" href="https://developer.yoast.com/customization/apis/rest-api"&gt;REST API&lt;/a&gt;. The API returns all of the SEO metadata, meta tags, schema.org data, etc. for your Wordpress blog posts. Here's a Yoast API Python example script to fetch post metadata via requests and pandas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the Yoast API response as pandas dataframe.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://atomic-temporary-107329037.wpcomstaging.com/wp-json/yoast/v1/get_head?url=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;metadata_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;metadata_df&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/erickbytes/Python-Marketer-Reader-Analytics/blob/master/dataset/2020_pythonmarketer.com_post_views.xlsx?raw=true.xlsx&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# update url domain with pandas .str accessor&lt;/span&gt;
&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.wordpress&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;metadata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch_metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;metadata_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;metadata_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wordpress Blog Post Yoast API Metadata.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;What this script is doing:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Read a list of my blog posts from Github into a &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"&gt;pandas dataframe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html"&gt;pandas .apply&lt;/a&gt; to fetch the metadata for each post url.&lt;/li&gt;
&lt;li&gt;Deserialize + normalize the JSON response.&lt;/li&gt;
&lt;li&gt;Convert to a pandas dataframe and store in a pandas Series named 'metadata'.&lt;/li&gt;
&lt;li&gt;Merge the series and write the metadata to a csv file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The Payoff&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;You'll end up with blobs of JSON formatted metadata to sift through or wrangle to your liking! Check out the &lt;a class="reference external" href="https://developer.yoast.com/"&gt;Yoast documentation&lt;/a&gt; if you're interested in finding out more about their APIs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New to APIs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's ok if so, we all were once. Check out my &lt;a class="reference external" href="https://lofipython.com/how-to-make-json-requests-with-python/"&gt;guide to making HTTP requests with Python&lt;/a&gt; if you want to see more API examples.&lt;/p&gt;
&lt;div class="wp-image-5922 figure"&gt;
&lt;img alt="SEO Overview" src="https://pythonmarketer.files.wordpress.com/2021/10/e5f7c-image.png" style="width: 640px; height: 451px;" /&gt;
&lt;/div&gt;
</content><category term="APIs, coding, HTTP, programming, python"></category><category term="Python Wordpress Blog SEO"></category><category term="SEO"></category><category term="Yoast API"></category></entry><entry><title>Opening Firefox Via the webbrowser Module + RPA Tools</title><link href="https://lofipython.com/how-to-open-firefox-with-webbrowser-on-ubuntu-linux.html" rel="alternate"></link><published>2021-08-15T23:13:00-05:00</published><updated>2021-08-15T23:13:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-08-15:/how-to-open-firefox-with-webbrowser-on-ubuntu-linux.html</id><summary type="html">&lt;p&gt;webbrowser is a convenient Python standard library module. It opened my
Firefox browser on my Ubuntu Linux operating system running on a
Chromebook. This code is adapted from a &lt;a class="reference external" href="https://pythonexamples.org/python-open-url-in-firefox-browser/"&gt;Python Examples blog post&lt;/a&gt;.
Below is a list of other browsers you can open with webbrowser. At the
bottom of this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;webbrowser is a convenient Python standard library module. It opened my
Firefox browser on my Ubuntu Linux operating system running on a
Chromebook. This code is adapted from a &lt;a class="reference external" href="https://pythonexamples.org/python-open-url-in-firefox-browser/"&gt;Python Examples blog post&lt;/a&gt;.
Below is a list of other browsers you can open with webbrowser. At the
bottom of this post, you'll find more tools to interact with browsers
and GUIs programmatically.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;firefox_sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/firefox/firefox.sh&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BackgroundBrowser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firefox_sh&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://lofipython.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_new_tab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_browsers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;figure class="wp-block-table is-style-regular"&gt;&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="39%" /&gt;
&lt;col width="61%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Type Name&lt;/th&gt;
&lt;th class="head"&gt;Class Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'mozilla'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Mozilla('mozilla')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'firefox'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Mozilla('mozilla')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'netscape'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Mozilla('netscape')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'galeon'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Galeon('galeon')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'epiphany'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Galeon('epiphany')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'skipstone'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;BackgroundBrowser('skipstone')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'kfmclient'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;Konqueror()&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'konqueror'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;Konqueror()&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'kfm'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;Konqueror()&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'mosaic'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;BackgroundBrowser('mosaic')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'opera'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;Opera()&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'grail'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;Grail()&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'links'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;GenericBrowser('links')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'elinks'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Elinks('elinks')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'lynx'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;GenericBrowser('lynx')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'w3m'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;GenericBrowser('w3m')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'windows-default'&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;WindowsDefault&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'macosx'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;MacOSX('default')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'safari'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;MacOSX('safari')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'google-chrome'&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Chrome('google-chrome')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'chrome'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Chrome('chrome')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;'chromium'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Chromium('chromium')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'chromium-browser'&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Chromium('chromium-browser')&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/webbrowser.html#webbrowser.get"&gt;webbrowser docs&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Check out these other browsergui automation tools:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyautogui.readthedocs.io/en/latest/"&gt;pyautogui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.selenium.dev/selenium/docs/api/py/"&gt;Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tebelorg/RPA-Python"&gt;RPA for Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/robotframework/robotframework"&gt;robotframework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kelaberetiv/TagUI"&gt;TagUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/RaiMan/SikuliX1"&gt;Sikuli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/open-rpa/openrpa"&gt;Open RPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://flow.microsoft.com/en-us/blog/automate-tasks-with-power-automate-desktop-for-windows-10-no-additional-cost/"&gt;Power Automate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.casperjs.org/"&gt;CasperJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ariya/phantomjs"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slimerjs.org/"&gt;SlimerJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;see also:&lt;/em&gt;
| &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Robotic_process_automation"&gt;Robot Process Automation&lt;/a&gt;
| &lt;a class="reference external" href="https://github.com/luruke/browser-2020"&gt;Things You Can Do With a Browser in 2020&lt;/a&gt;&lt;/p&gt;
</content><category term="automation, coding, gui, programming, python"></category><category term="Firefox"></category><category term="RPA"></category></entry><entry><title>8 Promising Python Static Site Generators</title><link href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators.html" rel="alternate"></link><published>2021-07-28T23:31:00-05:00</published><updated>2021-07-28T23:31:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-07-28:/a-brief-summary-of-promising-python-static-site-generators.html</id><summary type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for this Wordpress blog. Or maybe I'll spin up a new one!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Why Statics?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most &amp;quot;modern&amp;quot; websites are &lt;em&gt;dynamic&lt;/em&gt; in the sense that the contents of the site live in a database, and are converted into presentation-ready HTML only when a user wants to see the page. That's great. However, it presents some minor issues that static site generators try to solve.&lt;/p&gt;
&lt;p&gt;In a static site, the whole site, every page, &lt;em&gt;everything&lt;/em&gt;, is created before the first user even sees it and uploaded to the server as a simple folder full of HTML files (and images, CSS, etc).&lt;/p&gt;
&lt;p&gt;The Nikola Handbook - &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;https://getnikola.com/handbook.html#why-static&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="static-site-generator-python-libraries"&gt;
&lt;h2&gt;Static Site Generator Python Libraries&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;listed in largest to smallest order by # of Github project stars&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Github - 11K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seems to be the front running static site generator in Python's ecosystem. It contains a convenient pelican-importer tool to import existing content from WordPress, Dotclear, or RSS feeds. Enjoying the modular nature of the &lt;a class="reference external" href="https://github.com/pelican-plugins"&gt;pelican-plugins&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lektor&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/lektor/lektor"&gt;Github - 3.5K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intriguing CMS project touting a &amp;quot;Python API&amp;quot;, &lt;a class="reference external" href="https://www.getlektor.com/plugins/"&gt;plugins for tools like Webpack&lt;/a&gt; and talented maintainers including the author of Flask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cactus&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/eudicots/Cactus"&gt;Github - 3.5K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Simple but powerful &lt;a class="reference external" href="http://mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html"&gt;static website generator&lt;/a&gt; using Python and the &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/templates/"&gt;Django template system&lt;/a&gt;... typical users would be designers that are tech-savvy, want to use templates, but don't like to mess with setting up django or S3.&amp;quot; (Mac OS) &lt;a class="reference external" href="https://vimeo.com/46999791"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nikola&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getnikola/nikola"&gt;Github - 2.2K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Viable option to host your site with the informative &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;Nikola Handbook&lt;/a&gt; walking you through each step. &lt;a class="reference external" href="https://plugins.getnikola.com/"&gt;Plugins&lt;/a&gt; for &lt;a class="reference external" href="https://plugins.getnikola.com/v7/notebook_shortcode/"&gt;Jupyter Notebooks&lt;/a&gt;, &lt;a class="reference external" href="https://getnikola.com/handbook.html#post-processing-filters"&gt;post processing filters&lt;/a&gt;, a &lt;a class="reference external" href="https://getnikola.com/handbook.html#importing-your-wordpress-site-into-nikola"&gt;Wordpress importer&lt;/a&gt; command line tool and about &lt;a class="reference external" href="https://themes.getnikola.com/"&gt;40 ready to go themes&lt;/a&gt; to find the perfect style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Makesite&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/sunainapai/makesite"&gt;Github - 1.6K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offers less configuration, using only a single makesite.py file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hyde&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/hyde/hyde"&gt;Github - 1.6K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Port from &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, a &lt;a class="reference external" href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; static site generator. It has since formed its own &amp;quot;evil twin&amp;quot; identity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mynt&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/Anomareh/mynt"&gt;Github - 400 stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Designed to give you all the features of a CMS with none of the often rigid implementations of those features.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Staticjinja&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/staticjinja/staticjinja"&gt;Github - 250 Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Minimalist Python library for building static websites with Jinja.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://PyLadies.com"&gt;PyLadies.com&lt;/a&gt;, &lt;a class="reference external" href="https://pyladies.com/"&gt;created with Mynt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FullStackPython.com, &lt;a class="reference external" href="https://github.com/mattmakai/fullstackpython.com"&gt;created with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GetLektor.com, &lt;a class="reference external" href="https://github.com/lektor/lektor-website"&gt;created with Lektor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gohugoio/hugo"&gt;Hugo&lt;/a&gt;, a Go static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website.html"&gt;How to Build a Low-tech&amp;nbsp;Website?&lt;/a&gt; (featuring Pelican)&lt;/li&gt;
&lt;li&gt;One convenient way to serve your static files up on the web is with a &lt;a class="reference external" href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/#:~:text=A%20content%20delivery%20network%20(CDN,stylesheets%2C%20images%2C%20and%20videos."&gt;CDN&lt;/a&gt; like &lt;a class="reference external" href="https://developers.cloudflare.com/pages/framework-guides/deploy-anything/"&gt;Cloudflare Pages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can research more projects on &lt;a class="reference external" href="https://jamstack.org/generators/"&gt;Jamstack&lt;/a&gt;, a site I found helpful for finding these libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;! I launched a Pelican blog about investing with Cloudflare pages. It's my first live static blog. Read more about it &lt;a class="reference external" href="https://lofipython.com/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, web development"></category><category term="creating your own blog"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>Python Requests SSLCertVerificationError Solution for Windows</title><link href="https://lofipython.com/how-to-fix-your-python-certificates-on-windows.html" rel="alternate"></link><published>2021-06-10T11:59:00-05:00</published><updated>2021-06-10T11:59:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-06-10:/how-to-fix-your-python-certificates-on-windows.html</id><summary type="html">&lt;p&gt;I initially installed my Python version from the &lt;a class="reference external" href="https://www.microsoft.com/en-us/p/python-39/9p7qfqmjrfp7"&gt;Windows Store&lt;/a&gt; and it worked fine for almost a year on my Windows 10 computer. Then I started getting this error message when trying to use the &lt;a class="reference external" href="https://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification"&gt;requests library&lt;/a&gt; on all HTTP requests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTTPSConnectionPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;api.example.com …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I initially installed my Python version from the &lt;a class="reference external" href="https://www.microsoft.com/en-us/p/python-39/9p7qfqmjrfp7"&gt;Windows Store&lt;/a&gt; and it worked fine for almost a year on my Windows 10 computer. Then I started getting this error message when trying to use the &lt;a class="reference external" href="https://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification"&gt;requests library&lt;/a&gt; on all HTTP requests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTTPSConnectionPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;api.example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="n"&gt;exceeded&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;grant_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client_credentials&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Caused&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SSLCertVerificationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1131)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Apparently my Python certificates were not valid or up to date on my computer. These are &amp;quot;.PEM&amp;quot; or &amp;quot;.cert&amp;quot; files that certify your connection for the &lt;a class="reference external" href="https://www.ssl.com/faqs/faq-what-is-ssl/"&gt;SSL protocol&lt;/a&gt;. I googled this error until I found the &lt;a class="reference external" href="https://pypi.org/project/python-certifi-win32/"&gt;python-certifi-win32&lt;/a&gt; library. I only needed to &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;pip install&lt;/a&gt; this library and it fixed the problem:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install python-certifi-win32
&lt;/pre&gt;
&lt;p&gt;Huge thank you to &lt;a class="reference external" href="https://pypi.org/user/andrewleech/"&gt;the maintainer&lt;/a&gt; of this package. It solved my issues and now I can make HTTP requests again!&lt;/p&gt;
</content><category term="coding, HTTP, python, Windows"></category><category term=".PEM solution"></category><category term="problem solving"></category><category term="Windows 10"></category></entry><entry><title>Python Libraries, Tools + Resources for Creative and Academic Writers</title><link href="https://lofipython.com/python-libraries-tools-resources-for-creative-and-academic-writers.html" rel="alternate"></link><published>2021-05-29T17:51:00-05:00</published><updated>2021-05-29T17:51:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-05-29:/python-libraries-tools-resources-for-creative-and-academic-writers.html</id><summary type="html">&lt;p&gt;Today I scoured the internet for tools written in Python that assist writing in any form. After some relentless Google and Github searching, here are my favorites. I found tools to help write modular stories and novels, screenwriting with Trelby and several libraries for academic papers. I haven't tried all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I scoured the internet for tools written in Python that assist writing in any form. After some relentless Google and Github searching, here are my favorites. I found tools to help write modular stories and novels, screenwriting with Trelby and several libraries for academic papers. I haven't tried all of these... yet!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storywriting&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/olivierkes/manuskript"&gt;manuskript&lt;/a&gt;: A open-source tool for writers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mimadrone/writerblocks"&gt;writerblocks&lt;/a&gt;: A toolkit for writing stories in a modular way&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vkbo/novelWriter"&gt;NovelWriter&lt;/a&gt;: novelWriter is an open source plain text editor designed for writing novels.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/trelby/trelby"&gt;Trelby&lt;/a&gt;: The free, multiplatform, feature-rich screenwriting program!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Carleslc/Readteractive"&gt;Readeractive&lt;/a&gt;: Tool for writing and generating interactive books, also known as gamebooks.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Moonbase59/PAWS"&gt;PAWS&lt;/a&gt;: Python Adventure Writing System&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous Writing, Text Cleaning and Proofreading Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://languagetool.org/http-api/swagger-ui/#!/default/post_check"&gt;Language Tool API&lt;/a&gt;: Open Source proofreading software for English, French, German, Polish, Russian, and&amp;nbsp;more than 20 other languages. It finds many errors that a simple spell checker cannot detect. See also: &lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python library&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/languagetool-org/languagetool"&gt;Github&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jfilter/clean-text"&gt;clean-text&lt;/a&gt;: Python package for text cleaning&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pudo/normality"&gt;normality&lt;/a&gt;: A tiny library for Python text normalisation. Useful for ad-hoc text processing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shivam5992/textstat"&gt;textstat&lt;/a&gt;: Python package to calculate readability statistics of a text object - paragraphs, sentences, articles.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sloria/TextBlob"&gt;textblob&lt;/a&gt;: Simple, Pythonic, text processing--Sentiment analysis, part-of-speech tagging, noun phrase extraction, translation, spelling correction and more.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.nltk.org/"&gt;Natural Language Toolkit (NLTK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/miso-belica/sumy"&gt;Sumy&lt;/a&gt;: Module for automatic summarization of text documents and HTML pages.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/wp-admin/post.php?post=5519&amp;amp;action=edit"&gt;Mackerel&lt;/a&gt;: Mackerel provides an automated, easy to use alternative for company or school writing tasks. Simply provide the topic and/or files and we will do the rest.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fandu/Verb-Miner"&gt;Verb Miner&lt;/a&gt;: This tool can help you analyze a document and discover cool verbs from pdf papers.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lkjie/paper-translator"&gt;paper-translater&lt;/a&gt;: Chinese and English essay translator, paper translator, clipboard listener&lt;/li&gt;
&lt;li&gt;There are many &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/26/comparing-text-editors-on-ubuntu-atom-emacs-sublime-vim-vs-code/"&gt;text editor options&lt;/a&gt; like Sublime or Atom with useful &lt;a class="reference external" href="https://github.com/thedataking/SublimeWritingStyle"&gt;plug-ins for text documents&lt;/a&gt; or code.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.google.com/tech-writing"&gt;Free Google Technical Writing Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/PythonWriters"&gt;PythonWriters Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Academic Writing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/Wookai/paper-tips-and-tricks"&gt;Tips and Tricks for Writing Scientific Papers&lt;/a&gt;: Practice and tips &amp;amp; tricks to write scientific papers in LaTeX, with figures generated in Python or Matlab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/dmvaldman/library"&gt;library&lt;/a&gt;: A collection of essays and timeless papers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/amusi/CVPR2021-Papers-with-Code"&gt;2021 Papers with Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/JelteF/PyLaTeX"&gt;PyLaTeX&lt;/a&gt;: A Python library for creating LaTeX files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/luong-komorebi/Begin-Latex-in-minutes"&gt;Begin LaTeX in minutes&lt;/a&gt;: Brief Intro to LaTeX for beginners that helps you use LaTeX with ease.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://pypi.org/project/texbib/"&gt;Texbib&lt;/a&gt;: A program that helps you to manage your BibTeX references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/Pezmc/BibLatex-Check"&gt;BibLatex-Check&lt;/a&gt;: A python script for checking BibLatex .bib files for common referencing mistakes!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/paperpy/paperpy"&gt;paperpy&lt;/a&gt;: Tools for simplifying the preparation of version-controlled and well-written academic papers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/devd/Academic-Writing-Check"&gt;Academic Writing Check&lt;/a&gt;: Check for passive words, weasel words, duplicate words, typographical errors and words strunk &amp;amp; white don't like. (Written in Perl.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/matplotlib/AnatomyOfMatplotlib"&gt;Anatomy of Matplotlib&lt;/a&gt;: Tutorial developed for the SciPy conference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://www.scipy.org/"&gt;SciPy&lt;/a&gt;: (pronounced “Sigh Pie”) is a Python-based ecosystem of open-source software for mathematics, science, and engineering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;:&amp;nbsp;A fundamental package for scientific computing with Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;: A fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the&amp;nbsp;&lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;&amp;nbsp;programming language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://newsletter.timber.fm/p/a-writing-tip-i-learned-at-oxford"&gt;A writing tip I learned at Oxford&lt;/a&gt;: TLDR read your writing out loud to proof it.&lt;/p&gt;
&lt;p&gt;In Math, Computer Science, Physics, or any field where your typical paper has even a modest amount of mathematical notation the percentage of papers written using LaTeX (or even plain TeX!) is probably about 90%+.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.quora.com/What-percent-of-papers-are-written-with-LaTeX"&gt;Adam Russell,&amp;nbsp;PhD Data Visualization, Computational Geometry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BibTeX is reference management software for formatting lists of references. The BibTeX tool is typically used together with the LaTeX document preparation system.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/BibTeX"&gt;https://en.wikipedia.org/wiki/BibTeX&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content><category term="education, productivity, python, writing"></category><category term="academic writing"></category><category term="Python Tools for Writing"></category><category term="resources for writers"></category><category term="storywriting"></category><category term="writing tools"></category></entry><entry><title>Did You Read the Whole Error?</title><link href="https://lofipython.com/did-you-read-the-whole-error.html" rel="alternate"></link><published>2021-04-15T15:34:00-05:00</published><updated>2021-04-15T15:34:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-04-15:/did-you-read-the-whole-error.html</id><summary type="html">&lt;p&gt;You read the whole thing front to back? Every word? Stop and think about it. What is the computer trying to tell you?&lt;/p&gt;
&lt;p&gt;Sometimes something is obvious but needs to be reminded. I found myself thinking this yet again today. Often there are times where I would have saved some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You read the whole thing front to back? Every word? Stop and think about it. What is the computer trying to tell you?&lt;/p&gt;
&lt;p&gt;Sometimes something is obvious but needs to be reminded. I found myself thinking this yet again today. Often there are times where I would have saved some time and grief by carefully reading the error.&lt;/p&gt;
&lt;p&gt;Carefully read the error when you see a traceback. Then once you've taken it all in, consider what to do next. If you're stumped, googling it might yield a solution. But make sure you actually read the error first.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="errors"></category><category term="solutions"></category></entry><entry><title>Aggregating A Python Error Summary from Log Files</title><link href="https://lofipython.com/aggregating-tracebacks-from-python-log-files.html" rel="alternate"></link><published>2021-04-06T01:09:00-05:00</published><updated>2021-04-06T01:09:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-04-06:/aggregating-tracebacks-from-python-log-files.html</id><summary type="html">&lt;p&gt;Follow these steps to maintain more reliable scripts and catch more of your traceback errors:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;automate your scripts to run daily, weekly, monthly, etc.&lt;/li&gt;
&lt;li&gt;Log your traceback errors with the &lt;a class="reference external" href="https://docs.python.org/3/library/logging.html"&gt;logging module&lt;/a&gt;. I tend to dump all of my logs into a single folder.&lt;/li&gt;
&lt;li&gt;automate aggregating the logs and parsing …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Follow these steps to maintain more reliable scripts and catch more of your traceback errors:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;automate your scripts to run daily, weekly, monthly, etc.&lt;/li&gt;
&lt;li&gt;Log your traceback errors with the &lt;a class="reference external" href="https://docs.python.org/3/library/logging.html"&gt;logging module&lt;/a&gt;. I tend to dump all of my logs into a single folder.&lt;/li&gt;
&lt;li&gt;automate aggregating the logs and parsing tracebacks&lt;/li&gt;
&lt;li&gt;start a feedback loop of fixing the tracebacks until 0 tracebacks remain&lt;/li&gt;
&lt;li&gt;re-run the script and confirm tracebacks disappeared&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;look in each log file, line by line for Python error keywords&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Traceback&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Error&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# replace commas for csv&lt;/span&gt;
                &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;

&lt;span class="c1"&gt;# Parse traceback errors from logs in working directory, then write to them to a csv file.&lt;/span&gt;
&lt;span class="n"&gt;logs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.log&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;tracebacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parse_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# dedupe list of lists with itertools module + list comprehension&lt;/span&gt;
&lt;span class="n"&gt;tracebacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracebacks&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Log Traceback Errors.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Log,Traceback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# csv header row&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tracebacks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;This pure python script allows me to hone in on potential automation problem areas with my scheduled Python scripts. It doesn't catch the entire traceback. Rather, it shows the error type and the name of the log file that contains that error in a csv. I use this log aggregation script to monitor my daily or weekly scheduled python scripts, along with &lt;a class="reference external" href="https://lofipython.com/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;pytest tests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Noteworthy gains from aggregating my logs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;less fear of missing mistakes&lt;/li&gt;
&lt;li&gt;more freedom to improve the code&lt;/li&gt;
&lt;li&gt;catch the mistakes faster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://docs.python.org/3/howto/logging.html"&gt;Python Documentation - Basic Logging Tutorial&lt;/a&gt;&lt;/p&gt;
</content><category term="automation, coding, education, programming, Scripts"></category><category term="productivity"></category><category term="python"></category></entry><entry><title>So You Want to Learn Python?</title><link href="https://lofipython.com/so-you-want-to-learn-python.html" rel="alternate"></link><published>2021-02-14T14:05:00-06:00</published><updated>2021-02-14T14:05:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-02-14:/so-you-want-to-learn-python.html</id><summary type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions&lt;/a&gt;. They are awesome! You can do so much with these. Learn to apply them. You won't regret it! See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2021/02/17/an-intro-to-pythons-built-in-functions/"&gt;An Intro to Python's Built-in Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#string-methods"&gt;String methods&lt;/a&gt;. Want to capitalize, lowercase or replace characters in text? How about checking if a &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str.isdigit"&gt;str.isdigit()&lt;/a&gt;? Get to know Python's string methods. I use these frequently. Also, the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.isdigit.html"&gt;pandas string method implementations&lt;/a&gt; are great for applying them to tabular data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#documentation-strings"&gt;Docstrings&lt;/a&gt;. I truly enjoy adding docstrings at the beginning of my functions. They add clarity and ease of understanding.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=C4Kc8xzcA68&amp;amp;ab_channel=EugeneYarmash"&gt;The Mighty Dictionary&lt;/a&gt;. Lists and tuples are useful too, but &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries"&gt;dictionaries&lt;/a&gt; are so handy with the ability to store and access key-value pairs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List Comprehensions&lt;/a&gt;. These allow you to perform transformations on lists in one line of code! I love the feeling when I apply a list comprehension that is concise, yet readable.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;. These can be used to apply a function &amp;quot;on the fly&amp;quot;. I love their succinctness. It took me a few years to become comfortable with them. Sometimes it makes sense to use a lambda expression instead of a regular function to transform data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#date-objects"&gt;Date Objects&lt;/a&gt;. Wielding date objects and formatting them to your needs is a pivotal Python skill. Once you have it down, it unlocks a lot of automation and scripting abilities when combined with libraries like &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html"&gt;pathlib&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/os.html?highlight=os#module-os"&gt;os&lt;/a&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html?highlight=glob#module-glob"&gt;glob&lt;/a&gt; for reading file metadata and then executing an action based on the date of the file, for example. I use &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.date.today"&gt;date.today()&lt;/a&gt; a lot when I want to fetch today's date and &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#available-types"&gt;timedelta&lt;/a&gt; to compare two dates. The datetime module is your friend, dive in. Must know for custom date formatting: strftime()&amp;nbsp;and&amp;nbsp;strptime(). See also: &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes"&gt;Time Format Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For tabular data, I often use &lt;tt class="docutils literal"&gt;pd.to_datetime()&lt;/tt&gt; to convert a series of strings to datetime objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install pandas with this command: python -m pip install pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USA Born&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1776-07-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WTC Bombings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2001-09-11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Biden Inauguration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2021-01-20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# convert a pandas series of strings to datetime objects&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Just the tip of the iceberg...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The amazing part of Python is that its community has developed an astonishing plethora of external libraries which can be &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;installed by pip&lt;/a&gt;. Usually I'll learn how to use new libraries after googling to find a well-written README on Github or helpful documentation. The language comes with an impressive line-up of baked-in &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;tools and libraries&lt;/a&gt; way beyond what I've mentioned here. But I think this is a great start. Get to know these common Python language features and you'll be surprised how much you can do!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Comprehensive Python Learning Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;How long did it take you to learn Python?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dabeaz-course/practical-python"&gt;Practical Python Programming&lt;/a&gt; (free course)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://google.github.io/styleguide/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/satwikkansal/wtfpython"&gt;What the f*ck Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pysanity.netlify.app/#testing"&gt;PySanity&lt;/a&gt;&lt;/p&gt;
</content><category term="programming"></category><category term="learning"></category><category term="python"></category><category term="skills"></category><category term="technology"></category></entry><entry><title>Organize Your Emails in Bulk With Gmail Search Operators + Python Libraries</title><link href="https://lofipython.com/using-gmails-search-operators-to-organize-your-emails-in-bulk.html" rel="alternate"></link><published>2021-02-07T11:17:00-06:00</published><updated>2021-02-07T11:17:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-02-07:/using-gmails-search-operators-to-organize-your-emails-in-bulk.html</id><summary type="html">&lt;p&gt;After 12 years with Gmail as my primary email inbox, I wanted to clear out old &amp;quot;Promotions&amp;quot; emails. This can be done with some clever use of Gmail's search syntax shown below.&lt;/p&gt;
&lt;p&gt;I wanted to preserve my &amp;quot;Starred&amp;quot; emails, but delete old emails to free up space. I was able …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After 12 years with Gmail as my primary email inbox, I wanted to clear out old &amp;quot;Promotions&amp;quot; emails. This can be done with some clever use of Gmail's search syntax shown below.&lt;/p&gt;
&lt;p&gt;I wanted to preserve my &amp;quot;Starred&amp;quot; emails, but delete old emails to free up space. I was able to delete 58,000 &amp;quot;Promotions&amp;quot; emails! I wrote this post because I feel it might save you a little time figuring it out yourself. I also included brief details on possible Python tools for Gmail and IMAP below if you are considering scripting your contact management.&lt;/p&gt;
&lt;p&gt;I didn't need Python in the end after reading some &lt;a class="reference external" href="https://support.google.com/mail/answer/7190?hl=en"&gt;Gmail search operator examples&lt;/a&gt;. For example, adding a hypen before a search in Gmail acts similar to a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bitwise_operation#NOT"&gt;&amp;quot;bitwise&amp;quot; or unary operator (~)&lt;/a&gt; in Python. It excludes or inverses the criteria in a search rather than including it. I was able to use this to exclude my starred emails. You can also add a filter for &amp;quot;has attachment&amp;quot;. I used that to star any emails with attachments, then delete the rest and excluded &amp;quot;starred&amp;quot; emails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gmail search syntax to get &amp;quot;Promotions&amp;quot; minus &amp;quot;Starred&amp;quot; emails and filter on a date range&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category:promotions -is:starred after:2019/12/31 before:2021/1/1
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Selecting &amp;quot;all&amp;quot; emails in your search&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-image-5251 figure"&gt;
&lt;img alt="Filtering Gmail Emails" src="https://pythonmarketer.files.wordpress.com/2021/02/select-all-in-search.jpg?w=588" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Once, you've selected &amp;quot;All&amp;quot; from the checkbox dropdown, click &amp;quot;Select all conversations that match this search&amp;quot;.&lt;/strong&gt; Now you can apply actions such as &amp;quot;add a star&amp;quot; or &amp;quot;delete&amp;quot; them by clicking the (⋮) vertical ellipses menu:&lt;/p&gt;
&lt;div class="wp-image-5258 figure"&gt;
&lt;img alt="Gmail Filter Steps" src="https://pythonmarketer.files.wordpress.com/2021/02/gmail-filter-steps.jpg?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;To Python or not?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I also considered Python tools for interfacing with gmail to accomplish this. There doesn't seem to be an easy way to group emails by &amp;quot;Category&amp;quot; in the &lt;a class="reference external" href="https://developers.google.com/gmail/api/quickstart/python"&gt;Gmail API&lt;/a&gt; or IMAP. IMAP is shorthand for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol"&gt;Internet Message Access Protocol&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/imaplib.html"&gt;imaplib&lt;/a&gt; is an &amp;quot;IMAP4 protocol client&amp;quot; in the Python standard library. Usually python's &lt;a class="reference external" href="https://docs.python.org/3/library/smtplib.html"&gt;smtplib&lt;/a&gt; is the first library that comes up for email. Don't forget about imaplib! It might be more suitable for searching based on text in your emails or &lt;a class="reference external" href="https://superuser.com/questions/719677/how-to-use-gmail-tabs-with-imap"&gt;creating labeled segments yourself, then applying actions to them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Gmail + Python Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://support.google.com/mail/answer/7190?hl=en"&gt;G&lt;/a&gt;&lt;a class="reference external" href="https://support.google.com/mail/answer/7190?hl=en"&gt;mail search operators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/imaplib.html"&gt;imaplib&lt;/a&gt; - python standard library interface to email accounts [&lt;a class="reference external" href="https://stackoverflow.com/questions/3180891/imap-how-to-delete-messages"&gt;Stack Overflow example&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://support.google.com/mail/answer/7126229?hl=en"&gt;enabling IMAP in your gmail&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/gmail/api/quickstart/python"&gt;Gmail API Python Quickstart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/charlierguo/gmail"&gt;Gmail python library&lt;/a&gt; - There are also pythonic wrappers to the Gmail API like this one.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pymotw.com/2/imaplib/"&gt;imaplib - Python Module of the Week&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://markodenic.com/use-google-like-a-pro/"&gt;Use Google Like a Pro&lt;/a&gt;&lt;/p&gt;
</content><category term="productivity, python"></category><category term="email"></category><category term="gmail"></category><category term="IMAP"></category><category term="smtp"></category></entry><entry><title>Pick Stocks Intelligently with ffn</title><link href="https://lofipython.com/pick-stocks-like-a-pro-with-ffn.html" rel="alternate"></link><published>2021-01-16T23:21:00-06:00</published><updated>2021-01-16T23:21:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-01-16:/pick-stocks-like-a-pro-with-ffn.html</id><summary type="html">&lt;p&gt;How do you calculate stock valuation metrics like &lt;a class="reference external" href="https://www.investopedia.com/terms/s/sharperatio.asp"&gt;Sharpe ratio&lt;/a&gt;. Recently I've been reading about common &lt;a class="reference external" href="https://www.suredividend.com/ratios-metrics/"&gt;stock valuation metrics&lt;/a&gt; and wondered how I can apply them to my stock portfolio. I started reading about different metrics, sketching formulas and entertained writing a script to calculate these metrics. But Python has …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do you calculate stock valuation metrics like &lt;a class="reference external" href="https://www.investopedia.com/terms/s/sharperatio.asp"&gt;Sharpe ratio&lt;/a&gt;. Recently I've been reading about common &lt;a class="reference external" href="https://www.suredividend.com/ratios-metrics/"&gt;stock valuation metrics&lt;/a&gt; and wondered how I can apply them to my stock portfolio. I started reading about different metrics, sketching formulas and entertained writing a script to calculate these metrics. But Python has no shortage of finance-related libraries. After some furious googling I found &lt;a class="reference external" href="https://github.com/pmorissette/ffn"&gt;ffn&lt;/a&gt;, a way better option than rolling my own formulas. It's a &amp;quot;financial function&amp;quot; library, installable with pip.&lt;/p&gt;
&lt;p&gt;It will be interesting to observe how these metrics vary in my portfolio and learn more of &lt;a class="reference external" href="http://pmorissette.github.io/ffn/ffn.html"&gt;ffn's API&lt;/a&gt;. I like that they use &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;pandas dataframes&lt;/a&gt; within their library because I'm already familiar with them. At minimum, it's good to understand what stock formulas purport to measure and what it means if the measure is low or high. It makes sense to compare stocks in similar industries or competitors like &lt;a class="reference external" href="https://finance.yahoo.com/quote/NKE/"&gt;NKE&lt;/a&gt; and &lt;a class="reference external" href="https://finance.yahoo.com/quote/ADDYY?p=ADDYY&amp;amp;.tsrc=fin-srch"&gt;ADDYY&lt;/a&gt;. This is a neat tool for stock nerds who want to level up their stock analysis, make smart decisions and ideally pad the portfolio!&lt;/p&gt;
&lt;p&gt;The funny thing is... my lowest university grade was a &amp;quot;C&amp;quot; in my only Finance class. It wasn't easy for me to grasp. But with Python it's a little more interesting and easier to apply. Anyone can level up their finance skills thanks to a cornucopia of finance calculation libraries in the Python ecosystem.&lt;/p&gt;
&lt;p&gt;Recommended Reading: &lt;a class="reference external" href="https://pmorissette.github.io/ffn/index.html#a-brief-introduction"&gt;A Brief Introduction - ffn documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install ffn with pip:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install ffn&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Here's the code to get stock data with &lt;a class="reference external" href="https://pmorissette.github.io/ffn/quick.html"&gt;ffn&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ffn&lt;/span&gt;

&lt;span class="c1"&gt;# ffn.get returns a pandas dataframe of market data.&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;tsla,spot,nflx,nke,addyy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2019-01-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2020-12-31&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calc_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-5165 figure"&gt;
&lt;img alt="ffn stock report 2019-2021" src="https://pythonmarketer.files.wordpress.com/2021/01/2019-2020-top-stock.jpg?w=794" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;side note on the pyfolio library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I first considered using pyfolio to pull stock data. It is not &amp;quot;out of the box&amp;quot; ready per se to deliver the results pictured in their &lt;a class="reference external" href="https://lofipython.com/pick-stocks-like-a-pro-with-pyfolio/"&gt;&amp;quot;single stock&amp;quot; example&lt;/a&gt; documentation. You'd need to find another way to fetch your market data or somehow patch the Yahoo Finance API within pyfolio. I preferred &lt;a class="reference external" href="http://pmorissette.github.io/ffn/quick.html"&gt;ffn&lt;/a&gt;, mostly because it worked right away after pip installing it and running the above code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2023 Update:&lt;/strong&gt; ffn and pyfolio both depend on the Yahoo Finance API, which tends to change and break these libraries. Troubleshooting traceback errors may be required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try these other Python financial analysis libraries:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://financetrain.com/best-python-librariespackages-finance-financial-data-scientists/"&gt;Best Python Libraries/Packages for Finance and Financial Data Scientists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/statistics.html"&gt;python's built-in statistics module&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/mementum/backtrader"&gt;Backtrader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/bpsmith/tia"&gt;tia: Toolkit for integration and analysis&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/peerchemist/finta"&gt;FinTA (Financial Technical Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pydata.github.io/pandas-datareader/index.html"&gt;pandas-datareader&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/matplotlib/mplfinance#usage"&gt;mplfinance&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/robertmartin8/PyPortfolioOpt"&gt;PyPortfolioOpt&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/mrjbq7/ta-lib"&gt;TA-Lib Python Port&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/erickbytes/finsou.py"&gt;finsou.py&lt;/a&gt; (CLI written by me)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/wilsonfreitas/awesome-quant"&gt;awesome-quant&lt;/a&gt;&lt;/p&gt;
&lt;div class="wp-image-5037 figure"&gt;
&lt;img alt="Image credit, ActiveState: https://www.activestate.com/blog/top-10-python-packages-for-finance-and-financial-modeling/" src="https://pythonmarketer.files.wordpress.com/2021/01/top10financepackages-1200x675-1.png?w=1024" /&gt;
&lt;p class="caption"&gt;Image credit, ActiveState: &lt;a class="reference external" href="https://www.activestate.com/blog/top-10-python-packages-for-finance-and-financial-modeling/"&gt;https://www.activestate.com/blog/top-10-python-packages-for-finance-and-financial-modeling/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="investing"></category><category term="money"></category><category term="personal finance"></category><category term="python"></category><category term="stock formulas"></category><category term="stocks"></category></entry><entry><title>20 Eclectic Computer Science Wikipedia Articles</title><link href="https://lofipython.com/a-computer-science-themed-wikipedia-link-grab-bag.html" rel="alternate"></link><published>2020-11-28T12:55:00-06:00</published><updated>2020-11-28T12:55:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-11-28:/a-computer-science-themed-wikipedia-link-grab-bag.html</id><summary type="html">&lt;p&gt;Here are 20 random technology-oriented Wikipedia links I recently collected after re-organizing troves of bookmarked links accumulated over the past few years. These articles peek into the wide variety of things to learn about that exist in Computer Science. ABL. Always. Be. Learning. Curiosity and well organized browser bookmarks are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are 20 random technology-oriented Wikipedia links I recently collected after re-organizing troves of bookmarked links accumulated over the past few years. These articles peek into the wide variety of things to learn about that exist in Computer Science. ABL. Always. Be. Learning. Curiosity and well organized browser bookmarks are your friend.&lt;/p&gt;
&lt;p&gt;I support Wikipedia with a donation nearly every year. It's an amazing resource to learn about everything and I'm very grateful for it. Thank you for existing, Wikipedia. It's is a great jumping off point to learn about something I don't understand, which is much of this list here.&lt;/p&gt;
&lt;div class="section" id="algorithms-theories"&gt;
&lt;h2&gt;Algorithms &amp;amp; Theories&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deterministic_algorithm"&gt;Deterministic algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Greater fool theory&lt;/a&gt; (economics)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Man_or_boy_test"&gt;Man or boy test&lt;/a&gt; - compiler theory from Donald Knuth&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursion"&gt;Recursion&lt;/a&gt; - the most common algorithm I read about in passing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="databases"&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_(computing)"&gt;Cache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_invalidation"&gt;Cache invalidation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
Caching is a common technique to store data so that it can be quickly fetched later with limited usage of database resources.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Column-oriented DBMS:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Data_definition_language#:~:text=In%20the%20context%20of%20SQL,tables%2C%20indexes%2C%20and%20users."&gt;Data definition language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Database_normalization"&gt;Database normalization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"&gt;Lock&lt;/a&gt; (mutex)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing"&gt;Hybrid transactional/analytical processing&lt;/a&gt; (HTAP)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;Online transaction processing&lt;/a&gt; (OLTP) - Making lots of writes to the database.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;Online analytical processing&lt;/a&gt; (OLAP) - Reading the database. Lots of joins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="developer"&gt;
&lt;h2&gt;Developer&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)"&gt;Asynchrony&lt;/a&gt; Used for performing operations in parallel.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;RPC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Event-driven_programming#:~:text=In%20computer%20programming%2C%20event%2Ddriven,from%20other%20programs%20or%20threads."&gt;Event-driven programming&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Async is always event-driven, but not the other way round.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/5844955/whats-the-difference-between-event-driven-and-asynchronous-between-epoll-and-a#:~:text=Asynchronous%20is%20basically%20multitasking.,in%20an%20easy%20responsive%20manner."&gt;Stephen Chung - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;Garbage collection&lt;/a&gt; - automatic memory management&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parallel_computing#:~:text=Parallel%20computers%20can%20be%20roughly,work%20on%20the%20same%20task."&gt;Parallel Computing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Reinforcement_learning"&gt;Reinforcement learning&lt;/a&gt; - one paradigm of machine learning&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;Remote procedure call&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Runbook#:~:text=In%20a%20computer%20system%20or,or%20in%20physical%20book%20form."&gt;List of Lists of Lists&lt;/a&gt; - check out the &amp;quot;Technology&amp;quot; section&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-reminders"&gt;
&lt;h2&gt;Final Reminders&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;check out the &lt;a class="reference external" href="https://pypi.org/project/wikipedia/"&gt;Wikipedia python library&lt;/a&gt; (import wikipedia)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Special:Random"&gt;Random&lt;/a&gt; - Wikipedia's Random Article Button&lt;/li&gt;
&lt;li&gt;And now for something completely different: &lt;a class="reference external" href="https://github.com/yuandongzhong/useful-links-for-javascript"&gt;Useful Links for Javascript Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading, hope you found something you liked! Here's another post with more &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/06/23/my-favorite-free-educational-courses-and-talks-to-absorb/"&gt;free resources for learning computer science online&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Databases, programming"></category><category term="algorithms"></category><category term="articles"></category><category term="computer science"></category><category term="Wikipedia"></category></entry><entry><title>Google Vision OCR, Image Text and a Markov Chain: a recipe for positivipy</title><link href="https://lofipython.com/generating-positive-thoughts-with-google-vision-ocr-and-markov-chains.html" rel="alternate"></link><published>2020-10-11T15:37:00-05:00</published><updated>2020-10-11T15:37:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-10-11:/generating-positive-thoughts-with-google-vision-ocr-and-markov-chains.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently an old idea came back to life. I've posted to a &lt;a class="reference external" href="https://www.facebook.com/positivedailythought"&gt;Facebook Page&lt;/a&gt; for several years as part of project I started on a whim. The goal of the page is to share anything positive and inspirational by famous thinkers, artists and creators I read, or simply something …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently an old idea came back to life. I've posted to a &lt;a class="reference external" href="https://www.facebook.com/positivedailythought"&gt;Facebook Page&lt;/a&gt; for several years as part of project I started on a whim. The goal of the page is to share anything positive and inspirational by famous thinkers, artists and creators I read, or simply something positive to meditate on. It was partially inspired by the discipline of &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Positive_psychology"&gt;Positive Psychology&lt;/a&gt;&amp;quot;. Basically, William James was a cool dude. &lt;a class="reference external" href="https://www.ted.com/talks/martin_seligman_the_new_era_of_positive_psychology/transcript?language=en"&gt;Martin Seligman&lt;/a&gt; is too. I believe that positive feelings create positive outcomes and we can &amp;quot;game&amp;quot; ourselves into this feedback loop with literature and other habits that support well-being like sleep and exercise.&lt;/p&gt;
&lt;p&gt;After building up years of posts, I pondered for years how to capture the dataset of quote images to generate new positive-minded prose. This post details one implementation and alternatives I considered to accomplish this goal. All of the data and code in this post is &lt;a class="reference external" href="https://github.com/erickbytes/positivipy"&gt;published on Github&lt;/a&gt;. Possibly will post my entire &lt;a class="reference external" href="http://positivipy.com"&gt;flask website&lt;/a&gt; there eventually! Here's how I made my latest project, &lt;a class="reference external" href="https://positivethoughts.pythonanywhere.com/"&gt;positivipy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project Overview&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Export all Facebook post images from my page&lt;/li&gt;
&lt;li&gt;Convert images to quote text with &lt;strong&gt;Optical character recognition&lt;/strong&gt; (OCR)&lt;/li&gt;
&lt;li&gt;Data cleaning (via pandas and manual correction)&lt;/li&gt;
&lt;li&gt;Train on past quotes and generate new quotes with a Markov chain&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="export-all-facebook-post-images-from-my-page-1"&gt;
&lt;span id="export-all-facebook-post-images-from-my-page"&gt;&lt;/span&gt;&lt;h2&gt;1. Export all Facebook post images from my page&lt;/h2&gt;
&lt;p&gt;Facebook made this easy. I exported all of my timeline photos by &lt;a class="reference external" href="https://www.facebook.com/help/466076673571942"&gt;following these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-images-to-quote-text-with-ocr-1"&gt;
&lt;span id="converting-images-to-quote-text-with-ocr"&gt;&lt;/span&gt;&lt;h2&gt;2. Converting images to quote text with OCR&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Optical character recognition&lt;/strong&gt; or &lt;strong&gt;optical character reader&lt;/strong&gt; (&lt;strong&gt;OCR&lt;/strong&gt;) is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Electronics"&gt;electronic&lt;/a&gt; or &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Machine"&gt;mechanical&lt;/a&gt; conversion of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Image"&gt;images&lt;/a&gt; of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document, a scene-photo&lt;/p&gt;
&lt;p&gt;Wikipedia - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Optical_character_recognition"&gt;https://en.wikipedia.org/wiki/Optical_character_recognition&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once I had a folder of .jpg images, I used the &lt;a class="reference external" href="https://github.com/googleapis/python-vision"&gt;Google Vision API&lt;/a&gt;'s OCR to detect the text in the images. I also considered using the open source &lt;a class="reference external" href="https://github.com/Calamari-OCR/calamari"&gt;Calamari OCR library&lt;/a&gt;, but my research found that Google's Vision API may be more effective at detecting text.&lt;/p&gt;
&lt;p&gt;Since I had only 771 images, I was able to extract text on all of them and stay within Google's free plan (1,000 requests / month). I &lt;a class="reference external" href="https://cloud.google.com/vision/docs/quickstart"&gt;followed these installation instructions&lt;/a&gt; on my Ubuntu Linux computer. It worked well on most of the images. Here's the code I used to detect text in all my images and save it in a .csv file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.cloud&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;vision&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;


&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Setup Instructions&lt;/span&gt;
&lt;span class="sd"&gt;1) Save this as detect_image_text.py&lt;/span&gt;
&lt;span class="sd"&gt;2) Create a folder named &amp;#39;photos&amp;#39; and put your photos in them.&lt;/span&gt;
&lt;span class="sd"&gt;3) in your terminal, run: python detect_image_text.py&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Detects text in the file.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vision&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageAnnotatorClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;image_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vision&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_detection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_annotations&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Texts:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;For more info on error messages, check: &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;https://cloud.google.com/apis/design/errors&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;img_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;photos/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detect_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;img_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;quotes_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Extracted Image Text.csv&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;quotes_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="data-cleaning-via-pandas-and-manual-correction-1"&gt;
&lt;span id="data-cleaning-via-pandas-and-manual-correction"&gt;&lt;/span&gt;&lt;h2&gt;3. Data cleaning (via &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/05/12/pandas-pythons-excel-powerhouse/"&gt;pandas&lt;/a&gt; and manual correction)&lt;/h2&gt;
&lt;p&gt;The data did not come back perfect, but I was pleased with the Google Vision API's results. It saved me a lot of time compared to manually transcribing the images! Next I used pandas to clean the data. You can see more in a Jupyter notebook with &lt;a class="reference external" href="https://github.com/erickbytes/positivipy"&gt;all of the code on github&lt;/a&gt;. Then I manually removed the author or source names, keeping only the quote text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="train-on-past-quotes-and-generate-new-quotes-1"&gt;
&lt;span id="train-on-past-quotes-and-generate-new-quotes"&gt;&lt;/span&gt;&lt;h2&gt;4. Train on past quotes and generate new quotes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GPT-3, The State of the Art Option&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Initially, I considered machine learning options for generating new text. The GPT-3 library, released in early 2020 by Open AI, is the current state of the art model for text generation. However, its API is only accessible on an invite basis. If I get access, I think I'll try using it with the &lt;a class="reference external" href="https://github.com/shreyashankar/gpt3-sandbox"&gt;GPT-Sandbox&lt;/a&gt; python library. 🤞 You can join the &lt;a class="reference external" href="https://share.hsforms.com/1Lfc7WtPLRk2ppXhPjcYY-A4sk30"&gt;GPT-3 waitlist here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I searched around for other text generation python libraries on Github and found a promising one named &lt;a class="reference external" href="https://github.com/minimaxir/gpt-2-simple"&gt;GPT-2_simple&lt;/a&gt;, which utilizes GPT-3's predecessor. However, it requires using an old version of TensorFlow. I feel less inclined to learn older versions of machine learning libraries. Currently, I'm holding out for GPT-3 access. I may try the GPT-2 route if I don't get a chance at GPT-3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A &amp;quot;&lt;/strong&gt;&lt;a class="reference external" href="https://zen-of-python.info/simple-is-better-than-complex.html"&gt;Simple is Better Than Complex&lt;/a&gt;&lt;strong&gt;&amp;quot; Approach: Markov Chain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wondered, are there any simpler options for text generation in python? Enter the Markov chain, which I stumbled across while Googling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Markov chain&lt;/strong&gt; is a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event.&lt;/p&gt;
&lt;p&gt;Wikipedia - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Markov_chain"&gt;https://en.wikipedia.org/wiki/Markov_chain&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Using the markovify library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google pointed me to &lt;a class="reference external" href="https://analyticsindiamag.com/hands-on-guide-to-markov-chain-for-text-generation/"&gt;this post from Analytics India Magazine&lt;/a&gt; showing the &lt;a class="reference external" href="https://github.com/jsvine/markovify"&gt;&amp;quot;Markovify&amp;quot; library&lt;/a&gt;. Markovify makes generating your own Markov chain very easy! Install with pip:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pip install markovify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Here's the code to create Markov chain on the quote text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markovify&lt;/span&gt;
&lt;span class="c1"&gt;# Build a markov chain model.&lt;/span&gt;
&lt;span class="n"&gt;text_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markovify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Print five randomly-generated sentences&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_sentence&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Markov chains are below the level of sophistication of machine learning technologies like GPT-3 or GPT-2. But Markov chains demonstrate how we can apply mathematics to mimic results or at least achieve an mvp with a simpler approach. Another intriguing tool worth mentioning is the &lt;a class="reference external" href="https://www.nltk.org/"&gt;nltk library&lt;/a&gt;, which offers natural language capabilities.&lt;/p&gt;
&lt;p&gt;Eventually I will try the more sophisticated way using machine learning, but at least I am enjoying a quick taste of success with a Markov chain. Here's what some cherry-picked results look like! 😆 Ok, they're not great, but not too shabby either for my first time generating text from examples:&lt;/p&gt;
&lt;div class="wp-image-4695 figure"&gt;
&lt;img alt="Jupyter notebook Markovify example" src="https://pythonmarketer.files.wordpress.com/2020/10/generating_positive_thoughts.jpg?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;Maybe in the future I will use this for posts on my Facebook page, but it's not quite ready yet! I really enjoyed the process of researching this challenge and hope this post helps you evaluate your own text generation possibilities. This was fun to learn about. And best of all, I achieved satisfying, albeit primitive results within one weekend. Thanks for reading and stay positive.&lt;/p&gt;
&lt;p&gt;Check out the Markov chain in the wild &lt;a class="reference external" href="https://positivethoughts.pythonanywhere.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, data analysis, Google, pandas, programming, python"></category><category term="Google Vision"></category><category term="natural language"></category><category term="positive thinking"></category><category term="positivity"></category></entry><entry><title>Making A YouTube Video Downloader With Python's Flask and pytube3 Libraries</title><link href="https://lofipython.com/making-a-youtube-video-downloader-with-pythons-flask-and-pytube3-libraries.html" rel="alternate"></link><published>2020-10-07T23:49:00-05:00</published><updated>2020-10-07T23:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-10-07:/making-a-youtube-video-downloader-with-pythons-flask-and-pytube3-libraries.html</id><summary type="html">&lt;p&gt;How do you download YouTube videos? The easiest answer is to google sites like &lt;a class="reference external" href="https://y2mate.guru/en8/"&gt;y2mate&lt;/a&gt; that work for downloading videos. But then I thought, I wonder if I can make something?&lt;/p&gt;
&lt;p&gt;Boredom, my curiosity and some googling turned up the &lt;a class="reference external" href="https://github.com/get-pytube/pytube3"&gt;pytube3 library&lt;/a&gt;, &amp;quot;A lightweight, dependency-free Python 3 library (and command-line …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do you download YouTube videos? The easiest answer is to google sites like &lt;a class="reference external" href="https://y2mate.guru/en8/"&gt;y2mate&lt;/a&gt; that work for downloading videos. But then I thought, I wonder if I can make something?&lt;/p&gt;
&lt;p&gt;Boredom, my curiosity and some googling turned up the &lt;a class="reference external" href="https://github.com/get-pytube/pytube3"&gt;pytube3 library&lt;/a&gt;, &amp;quot;A lightweight, dependency-free Python 3 library (and command-line utility) for downloading YouTube Videos.&amp;quot; Lo and behold, 3 hours of experimentation later, I made a video downloader with Python. 😃&lt;/p&gt;
&lt;p&gt;I used pytube3 with &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; and &lt;a class="reference external" href="https://www.pythonanywhere.com/"&gt;pythonanywhere&lt;/a&gt; to accomplish the task. I was pleasantly surprised at how it came together and simply worked! Here's how to make a primitive YouTube video downloader.&lt;/p&gt;
&lt;p&gt;Install the pytube library in the pythonanywhere bash console with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3.8 install --user pytube3 --upgrade
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If you're not using pythonanywhere, install Flask (it's already included in pythonanywhere)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install flask
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;youtube_downloader&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Render HTML form to accept YouTube URL.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;Title&amp;gt;YouTube Downloader&amp;lt;/Title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Enter URL to download YouTube Vids!&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;div class=&amp;quot;form&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;form action=&amp;quot;/download_video&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;URL&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/download_video&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_video&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;First pytube downloads the file locally in pythonanywhere:&lt;/span&gt;
&lt;span class="sd"&gt;    /home/your_username/video_name.mp4&lt;/span&gt;

&lt;span class="sd"&gt;    Then use Flask&amp;#39;s send_file() to download the video&lt;/span&gt;
&lt;span class="sd"&gt;    to the user&amp;#39;s Downloads folder.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;youtube_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;download_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_attachment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed download&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Video download failed!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7185 figure"&gt;
&lt;img alt="download video" src="https://pythonmarketer.files.wordpress.com/2022/09/download.png?w=952" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Minimum Viable Prototype Achieved&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is more of a proof of concept than workable solution. It works for many videos I tried. It occasionally had trouble downloading certain videos. I tested it successfully on videos of up to 10 minutes. Maybe it works more consistently if the file size is smaller? Or there is a bug on certain types of videos? For me, some videos of only a few minutes failed, so your results may vary. The videos that failed returned errors like &lt;tt class="docutils literal"&gt;KeyError: 'cipher'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;KeyError: 'url'&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Honorable Mentions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ytdl-org/youtube-dl/blob/master/README.md#installation"&gt;youtube-dl&lt;/a&gt;: Command-line program to download videos from YouTube.com and other video sites&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/YouTubeDownload/YouTubeDownload"&gt;YoutubeDownload&lt;/a&gt;: GUI and CLI for downloading YouTube video/audio&lt;/p&gt;
</content><category term="coding, flask, programming, python, web development"></category><category term="curiosity"></category><category term="hacking"></category><category term="prototyping"></category><category term="videos"></category></entry><entry><title>Post an Unsplash Photo to Facebook Pages with Python</title><link href="https://lofipython.com/post-a-photo-to-your-facebook-page-with-the-unsplash-facebook-apis.html" rel="alternate"></link><published>2020-10-04T15:13:00-05:00</published><updated>2020-10-04T15:13:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-10-04:/post-a-photo-to-your-facebook-page-with-the-unsplash-facebook-apis.html</id><summary type="html">&lt;p&gt;My goal was to automate posting positive photos and quotes to my Facebook page, &amp;quot;&lt;a class="reference external" href="https://www.facebook.com/positivedailythought"&gt;Positive Thoughts Daily&lt;/a&gt;&amp;quot;, with the Unsplash and Facebook APIs. Here's how I did it!&lt;/p&gt;
&lt;p&gt;This implementation relies on &lt;a class="reference external" href="https://unsplash.com/&amp;#64;erickbytes/likes"&gt;my own collection of photos on Unsplash&lt;/a&gt;. I will manually select which photos I like to get added …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My goal was to automate posting positive photos and quotes to my Facebook page, &amp;quot;&lt;a class="reference external" href="https://www.facebook.com/positivedailythought"&gt;Positive Thoughts Daily&lt;/a&gt;&amp;quot;, with the Unsplash and Facebook APIs. Here's how I did it!&lt;/p&gt;
&lt;p&gt;This implementation relies on &lt;a class="reference external" href="https://unsplash.com/&amp;#64;erickbytes/likes"&gt;my own collection of photos on Unsplash&lt;/a&gt;. I will manually select which photos I like to get added to my collection. Then my app will take the new photos and post one a day for me.&lt;/p&gt;
&lt;blockquote&gt;
Side note: the free version of the Unsplash API is capped at 50 requests per week, which was enough for me.&lt;/blockquote&gt;
&lt;div class="section" id="setting-up-the-facebook-api"&gt;
&lt;h2&gt;Setting Up The Facebook API&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sign up for a Facebook &lt;a class="reference external" href="https://developers.facebook.com/"&gt;developer account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new Facebook app&lt;/li&gt;
&lt;li&gt;Add &amp;quot;page_manage_posts&amp;quot; and &amp;quot;pages_read_user_content&amp;quot; permissions to your app in the &lt;a class="reference external" href="https://developers.facebook.com/tools/explorer"&gt;Graph API Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a &amp;quot;short lived&amp;quot; user access token from the Graph API explorer (optional: fetch a &amp;quot;long lived&amp;quot; user access token, which lasts up to 60 days)&lt;/li&gt;
&lt;li&gt;Use your user access token to a fetch your page's access token&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Optional: fetch long lived access token with curl&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&amp;amp; client_id={app-id}&amp;amp; client_secret={app-secret}&amp;amp; fb_exchange_token={short-lived-user-access-token}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Fetch your Facebook page's access token&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://graph.facebook.com/{your-user-id}/accounts?access_token={user-access-token}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-unsplash"&gt;
&lt;h2&gt;Setting up Unsplash&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sign up for an &lt;a class="reference external" href="https://unsplash.com/documentation"&gt;Unsplash developer account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install the python-unsplash library. In the terminal enter:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
python -m pip install python-unsplash
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Decide what photo you want to post. This example fetches a random photo from my &lt;a class="reference external" href="https://unsplash.com/collections/66610223/positive-thoughts-daily"&gt;Unsplash collection&lt;/a&gt;. You can also fetch any photo at random, or pass in a query to get a certain type of photo.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unsplash.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unsplash.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Auth&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Python-Unsplash library Github:&lt;/span&gt;
&lt;span class="sd"&gt;https://github.com/yakupadakli/python-unsplash&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;add_your_client_id&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;client_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;add_your_client_secret&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redirect_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;add_your_redirect_uri&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect_uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# returns a python list containing a class&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;66610223&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my collection id&lt;/span&gt;
&lt;span class="n"&gt;image_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="c1"&gt;# Use image_id to get random photo&amp;#39;s download link from a collection.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.unsplash.com/photos/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/download?client_id=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;download_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="posting-the-unsplash-image-to-facebook"&gt;
&lt;h2&gt;Posting the Unsplash Image to Facebook&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Use download link and post to page with Facebook API.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;page_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;add_page_id_from_about_section&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://graph.facebook.com/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;page_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/photos?access_token=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;page_access_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;url=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;download_link&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Post Project Reflections&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was my first time working with the Facebook API. Honestly, it's a little crazy trying to balance all the token types in your head. There are about 5 different types of tokens that are used for different things! Ultimately I was able to figure out how to to post a photo. So there is a bit of a learning curve. It's a good challenge to build your API skills. The Unsplash API requires no &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OAuth"&gt;Oauth&lt;/a&gt; tokens and is easier to pick up.&lt;/p&gt;
&lt;p&gt;My Facebook page posts are now triggered by page loads on this &lt;a class="reference external" href="https://positivethoughts.pythonanywhere.com/"&gt;website&lt;/a&gt;! I am using a &lt;a class="reference external" href="https://lofipython.com/essential-mysql-terminal-commands-and-connecting-to-mysql-with-flask-pandas-and-pythonanywhere/"&gt;MySQL database&lt;/a&gt; to track which images I post to make sure I don't duplicate any posts and to make sure I only post once every 24 hours. Ah, I love the smell of fresh automation in the morning. 😀&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Links&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.facebook.com/docs/pages/getting-started"&gt;FB API &amp;quot;Getting Started&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.facebook.com/tools/explorer"&gt;FB API &amp;quot;Explorer&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.facebook.com/docs/permissions/reference"&gt;FB Permissions Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.facebook.com/docs/facebook-login/access-tokens/debugging-and-error-handling/"&gt;Debugging Tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.facebook.com/docs/pages/publishing/"&gt;FB API Publishing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;A Guide to Tackling APIs&lt;/a&gt;, written by me!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="APIs, coding, programming"></category><category term="Facebook API"></category><category term="python"></category><category term="social media"></category><category term="Unsplash"></category></entry><entry><title>SQLite3: Pythonic First Impressions &amp; Lay of the Land</title><link href="https://lofipython.com/getting-the-lay-of-the-land-in-sqlite-and-connecting-to-a-db-with-pythons-sqlite3-library.html" rel="alternate"></link><published>2020-09-20T00:09:00-05:00</published><updated>2020-09-20T00:09:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-09-20:/getting-the-lay-of-the-land-in-sqlite-and-connecting-to-a-db-with-pythons-sqlite3-library.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQLite is one of the heavy hitters in the database space, up there with other popular choices like MySQL, Postgres, Microsoft SQLServer, Cassandra and MariaDB. There is no shortage of &lt;a class="reference external" href="https://dbdb.io/"&gt;database technologies&lt;/a&gt; but SQLite is certainly one that is commonly used. It also has a positive reputation. Its terminal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SQLite is one of the heavy hitters in the database space, up there with other popular choices like MySQL, Postgres, Microsoft SQLServer, Cassandra and MariaDB. There is no shortage of &lt;a class="reference external" href="https://dbdb.io/"&gt;database technologies&lt;/a&gt; but SQLite is certainly one that is commonly used. It also has a positive reputation. Its terminal interface reminds me of &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/05/25/essential-mysql-terminal-commands-and-connecting-to-mysql-with-flask-pandas-and-pythonanywhere/"&gt;MySQL&lt;/a&gt;. The syntax of both seem similarly &amp;quot;SQL-like&amp;quot; and easy to pick up.&lt;/p&gt;
&lt;p&gt;I finally got around to test-driving a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/SQLite"&gt;SQLite&lt;/a&gt; database this week. In this post, I've listed my impressions of some practical SQLite commands. The &amp;quot;dot&amp;quot; syntax is helpful to do a lot things as you'll see below. I'll conclude by briefly exploring the sqlite3 python library in the python interpreter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;getting started&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I &lt;a class="reference external" href="https://linuxhint.com/install_sqlite_browser_ubuntu_1804/"&gt;installed SQLite from the terminal&lt;/a&gt; with apt on Ubuntu Linux.&lt;/p&gt;
&lt;p&gt;There are also downloads for Windows. A popular GUI is &lt;a class="reference external" href="https://sqlitestudio.pl/"&gt;SQLite Studio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;create a new database&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sqlite3 PythonMarketer.db
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;create a new db + new table and import a csv file to the table, &amp;quot;Readers&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sqlite3 PythonMarketer.db
.mode csv Readers
.import PythonMarketerReaders2015-2020.csv Readers
&lt;/pre&gt;
&lt;p&gt;[&lt;a class="reference external" href="https://tableplus.com/blog/2018/07/sqlite-how-to-import-csv-file-into-sqlite-table.html"&gt;source&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;create a table&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Readers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Country&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Visits&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;add new column with a default value&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Readers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;show all help (and . syntax) options&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.help
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;show all tables&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.tables
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;show table creation statement (table schema)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.schema Readers
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;exit sqlite terminal&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.exit
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;show databases&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.databases
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;show all indexes&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.indexes
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;show&amp;quot; various DB settings&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.show
&lt;/pre&gt;
&lt;div class="wp-block-image docutils container"&gt;
&lt;div class="wp-image-4412 figure"&gt;
&lt;img alt="explain a table in sqllite" src="https://pythonmarketer.files.wordpress.com/2020/09/show-explain-sqlite3.jpg?w=904" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Pictured: &amp;quot;showing&amp;quot; DB settings and &amp;quot;&lt;/em&gt;&lt;a class="reference external" href="https://sqlite.org/lang_explain.html"&gt;EXPLAIN-ing&lt;/a&gt;&lt;em&gt;&amp;quot; a query&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exploring sqlite operators:&lt;/strong&gt; the &lt;a class="reference external" href="https://www.sqlitetutorial.net/sqlite-glob/"&gt;GLOB operator&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="exploring-my-new-table-with-the-python-sqlite3-library-in-the-python-interpreter"&gt;
&lt;h2&gt;Exploring my new table with the &lt;a class="reference external" href="https://docs.python.org/3/library/sqlite3.html"&gt;Python sqlite3 library&lt;/a&gt; in the Python interpreter&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/sqlite3.html"&gt;sqlite3&lt;/a&gt; is in the python standard library, always a nice convenience to simply import it! Here we are connecting to an existing .db with &lt;tt class="docutils literal"&gt;sqlite3.connect()&lt;/tt&gt;&lt;/p&gt;
&lt;div class="wp-block-image docutils container"&gt;
&lt;div class="wp-image-4416 figure"&gt;
&lt;img alt="sqllite in the python interpreter" src="https://pythonmarketer.files.wordpress.com/2020/09/python-interpreter-python-sqlite.jpeg?w=717" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Below, getting a cursor object that holds our S&lt;tt class="docutils literal"&gt;ELECT&lt;/tt&gt; query results. Then iterating through each row of the cursor object with a for loop, as demonstrated in the documentation.&lt;/p&gt;
&lt;div class="wp-block-image docutils container"&gt;
&lt;div class="wp-image-4417 figure"&gt;
&lt;img alt="**Shown above:** printing the rows within the cursor object returned from executing a SELECT SQL statement." src="https://pythonmarketer.files.wordpress.com/2020/09/pythonsqlitedbreaders.jpeg?w=820" /&gt;
&lt;p class="caption"&gt;&lt;strong&gt;Shown above:&lt;/strong&gt; printing the rows within the cursor object returned from executing a SELECT SQL statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Comparable Cursors and PEP 249&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The cursor object has a variety of methods you can call on it for database operations and to execute SQL. You can read more about them in the &lt;a class="reference external" href="https://docs.python.org/3/library/sqlite3.html"&gt;sqlite3 module documentation&lt;/a&gt;. This library also follows &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/"&gt;PEP 249 - Python Database API Specification&lt;/a&gt; for recommended Database API interfaces. I've noticed that in &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/11/30/inserting-new-records-into-a-microsoft-access-database-with-python/"&gt;pyodbc&lt;/a&gt;, for example, the cursor object looks and feels the same as the cursor object in sqlite3. This is because they are both likely following PEP 249. Very cool!&lt;/p&gt;
&lt;/div&gt;
</content><category term="data, Databases, python, SQL"></category><category term="open data"></category><category term="SQLite"></category><category term="SQLite commands"></category><category term="sqlite3"></category></entry><entry><title>Delete All Your Tweets with Tweepy and the Twitter API</title><link href="https://lofipython.com/delete-all-your-tweets-with-tweepy-and-the-twitter-api.html" rel="alternate"></link><published>2020-09-13T21:07:00-05:00</published><updated>2020-09-13T21:07:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-09-13:/delete-all-your-tweets-with-tweepy-and-the-twitter-api.html</id><summary type="html">&lt;p&gt;You may want to &lt;a class="reference external" href="https://help.twitter.com/en/managing-your-account/how-to-download-your-twitter-archive"&gt;download an archive&lt;/a&gt; of your tweets before deleting them. I did this and it took about a day to get my archive download.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How To Purge Your Tweet History with Python&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Per the &lt;a class="reference external" href="http://docs.tweepy.org/en/latest/install.html"&gt;Tweepy library documentation&lt;/a&gt;, install tweepy with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. It worked fine in my python …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;You may want to &lt;a class="reference external" href="https://help.twitter.com/en/managing-your-account/how-to-download-your-twitter-archive"&gt;download an archive&lt;/a&gt; of your tweets before deleting them. I did this and it took about a day to get my archive download.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How To Purge Your Tweet History with Python&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Per the &lt;a class="reference external" href="http://docs.tweepy.org/en/latest/install.html"&gt;Tweepy library documentation&lt;/a&gt;, install tweepy with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. It worked fine in my python 3.8 &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;virtual environment&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Sign up for a &lt;a class="reference external" href="https://developer.twitter.com/"&gt;Twitter Developer account&lt;/a&gt; and create an app. I named mine &amp;quot;tweetcleanr&amp;quot;.&lt;/li&gt;
&lt;li&gt;Find your app under &amp;quot;Projects &amp;amp; Apps&amp;quot;. Edit your app's permissions to &amp;quot;&lt;strong&gt;Read + Write + Direct Messages&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;After you update your permissions, select the &amp;quot;Keys and tokens&amp;quot; tab. Then regenerate new API keys. Then paste them in the below script.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="wp-image-4350 figure"&gt;
&lt;img alt="Twitter Dev UX" src="https://pythonmarketer.files.wordpress.com/2020/09/twitter-dev.png?w=1024" /&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Save the below script as a python file. In command prompt or terminal, run python &lt;strong&gt;delete_tweets.py&lt;/strong&gt; or whatever you want to name it!&lt;/li&gt;
&lt;li&gt;You'll be asked to go to a link and enter an authorization code. Then you'll see your tweets being deleted like pictured below.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;delete_tweets.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found this &lt;a class="reference external" href="https://gist.github.com/davej/113241"&gt;Github Gist&lt;/a&gt; via Google and updated the print and input statements to Python 3. I also added the &lt;a class="reference external" href="https://docs.python.org/3/library/traceback.html"&gt;traceback module&lt;/a&gt; in case you need to debug it. Initially, I received an error telling me to complete step 3 above. I didn't see the error message at first, until adding &lt;tt class="docutils literal"&gt;traceback.print_exc()&lt;/tt&gt; like you see below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Delete All Your Tweets - Github Gist by davej&lt;/span&gt;
&lt;span class="sd"&gt;Credit: https://gist.github.com/davej/113241&lt;/span&gt;
&lt;span class="sd"&gt;Ported to Python 3 by Lo-Fi Python: https://lofipython.com/delete-all-your-tweets-with-tweepy-and-the-twitter-api/&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get_from_dev_portal&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get_from_dev_portal&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;oauth_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Authenticate with twitter using OAuth&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;auth_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_authorization_url&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;verify_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Authenticate at &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; and then enter you verification code here &amp;gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;auth_url&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verify_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;batch_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;You are about to delete all tweets from the account @&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_credentials&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Does this sound ok? There is no undo! Type yes to carry out this action.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;do_delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;do_delete&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_timeline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Deleted:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to delete:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authenticated as: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;batch_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-4325 figure"&gt;
&lt;img alt="Python Script Deleting Tweets" src="https://pythonmarketer.files.wordpress.com/2020/09/terminaltweepy.png?w=755" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;✅&lt;/strong&gt; &lt;strong&gt;Twitter Cleanse Complete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Twitter has a really slick developer dashboard. Its API combined with the tweepy library got the job done for me. It's great when stuff just works. And it only cost me about 1 hour to complete. Time to start a clean slate. Here's to looking forward.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.tweepy.org/en/latest/getting_started.html"&gt;Tweepy Documentation Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.twitter.com/en/docs/tutorials"&gt;Twitter's API Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.twitter.com/en/docs/tutorials/postman-getting-started"&gt;Twitter Postman Tutorial&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python"></category><category term="api"></category><category term="tweepy"></category><category term="tweets"></category><category term="twitter"></category></entry><entry><title>Pondering Join Algorithms</title><link href="https://lofipython.com/join-algorithms.html" rel="alternate"></link><published>2020-08-09T18:24:00-05:00</published><updated>2020-08-09T18:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-08-09:/join-algorithms.html</id><summary type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, your smaller table should be the &amp;quot;left&amp;quot; table when joining two tables.&amp;quot;... Professor demonstrates better performance by making the smaller table the &amp;quot;outer&amp;quot; table in a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/nested-loop-joins.html#:~:text=A%20Block%20Nested%2DLoop%20(BNL,inner%20loops%20must%20be%20read.&amp;amp;text=The%20join_buffer_size%20system%20variable%20determines,used%20to%20process%20a%20query."&gt;mysql example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The brute force approach&amp;quot;&lt;/li&gt;
&lt;li&gt;If you have enough memory to hold a large table, a good option for joining.&lt;/li&gt;
&lt;li&gt;Always pick the smaller table as the outer table.&lt;/li&gt;
&lt;li&gt;Buffer as much of your outer table in memory as possible to reduce redundant I/O.&lt;/li&gt;
&lt;li&gt;Loop over the inner table or use an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Index Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://www.cs.carleton.edu/faculty/dmusicant/cs347f03/proj3/"&gt;CS Course definition&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If indexes are available, or you could create an index to use for a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sort-Merge Join [&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sort-merge_join"&gt;wikipedia&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Useful if one or both tables are sorted on a join key. Maximize sequential I/O.&lt;/p&gt;
&lt;img alt="Sort - Merge Join" class="alignnone size-full wp-image-4121" src="https://pythonmarketer.files.wordpress.com/2020/08/sort-merge-join-1.png" style="width: 1731px; height: 855px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash Join [&lt;/strong&gt;&lt;a class="reference external" href="https://mysqlserverteam.com/hash-join-in-mysql-8/#:~:text=Hash%20join%20is%20a%20way,inputs%20can%20fit%20in%20memory."&gt;mysql blog example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best performance. For large datasets.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Phase #1 Build (Hash Table)&lt;/li&gt;
&lt;li&gt;Phase #2 Probe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom Filter&lt;/a&gt; set operations for probe phase optimization.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;insert a key&lt;/li&gt;
&lt;li&gt;lookup a key&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading on Bloom Filters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://onatm.dev/2020/08/10/let-s-implement-a-bloom-filter/"&gt;Let's implement a Bloom Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gopiandcode.uk/logs/log-bloomfilters-debunked.html"&gt;Bloom Filters Debunked&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Grace Hash Join&lt;/strong&gt; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_join#Grace_hash_join"&gt;wikipedia&lt;/a&gt;]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Do hash joins when things don't fit in memory.&amp;quot;&lt;/li&gt;
&lt;li&gt;Use a hash table for each table. Break the tables into buckets then do a nested loop join on each bucket. If the buckets do not fit in memory, use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_partitioning#:~:text=Recursive%20partitioning%20is%20a%20statistical,on%20several%20dichotomous%20independent%20variables."&gt;recursive partitioning&lt;/a&gt;. Then everything fits in memory for the join.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Split outer relation into partitions based on the hash key.&amp;quot;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo on Hash Join algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashing is almost always better than sorting for operator execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;No join algorithm works well in all scenarios.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Andy Pavlo&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="coding, data, Databases, programming"></category><category term="algorithms"></category><category term="computer science"></category><category term="joins"></category><category term="learning"></category><category term="study"></category><category term="technology"></category></entry><entry><title>Benefits of Go and Threads in Distributed Systems</title><link href="https://lofipython.com/benefits-of-go-and-threads-in-distributed-systems.html" rel="alternate"></link><published>2020-07-15T00:24:00-05:00</published><updated>2020-07-15T00:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-07-15:/benefits-of-go-and-threads-in-distributed-systems.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are my &lt;a class="reference external" href="https://www.youtube.com/watch?v=gA4YXUJX7t8&amp;amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB&amp;amp;index=3&amp;amp;t=0s"&gt;YouTube lecture&lt;/a&gt; notes from MIT's Distributed Systems course. Thank you MIT and Professor Morris!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB"&gt;MIT 6.824 Distributed Systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lecture 2: RPC and Threads - Feb 7, 2020&lt;/p&gt;
&lt;p&gt;Prof. Robert Morris (Spring 2020)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go is a popular programming language choice so my ears perked up when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are my &lt;a class="reference external" href="https://www.youtube.com/watch?v=gA4YXUJX7t8&amp;amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB&amp;amp;index=3&amp;amp;t=0s"&gt;YouTube lecture&lt;/a&gt; notes from MIT's Distributed Systems course. Thank you MIT and Professor Morris!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB"&gt;MIT 6.824 Distributed Systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lecture 2: RPC and Threads - Feb 7, 2020&lt;/p&gt;
&lt;p&gt;Prof. Robert Morris (Spring 2020)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go is a popular programming language choice so my ears perked up when this lecture began. These notes were taken as the professor explains why he teaches his class in Go. He also mentioned he'd be able to teach it with Python or Java. He used C++ years ago.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The beginning of this lecture was a great summary of:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;key benefits of Golang&lt;/li&gt;
&lt;li&gt;what threads are and why they're great&lt;/li&gt;
&lt;li&gt;how Go, threads and async tie together&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Go is Good for Distributed Systems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go is concurrency-friendly. With concurrent threads, you can effectively split a task such as making web requests to a server into many threads, completing them simultaneously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Golang's Convenient Features and Benefits&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;convenient &lt;a class="reference external" href="https://golang.org/pkg/net/rpc/"&gt;Remote Procedure Call library&lt;/a&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;RPC&lt;/a&gt;) C++ lacks anything comparable?&lt;/li&gt;
&lt;li&gt;&amp;quot;Go is type-safe and memory-safe, unlike C++&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;garbage collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;the language is simple, unlike C++&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;good support for threads, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"&gt;locking&lt;/a&gt; and synchronization between threads&amp;quot;&lt;/li&gt;
&lt;li&gt;in Go, &amp;quot;&lt;a class="reference external" href="https://golang.org/doc/effective_go.html#goroutines"&gt;goroutines&lt;/a&gt;&amp;quot; are threads&lt;/li&gt;
&lt;li&gt;professor's recommended reading to learn Go: &lt;a class="reference external" href="https://golang.org/doc/effective_go.html"&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why use threads?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I/O Concurrency&lt;/li&gt;
&lt;li&gt;Multi-core &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parallel_computing#:~:text=Parallel%20computers%20can%20be%20roughly,work%20on%20the%20same%20task."&gt;Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convenience, e.g. &amp;quot;create 10 threads that sleep for a second and then do a little bit of work&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Threads are the main tool we're using to manage concurrency in programs.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Robert Morris&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contrast With&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Event-driven_programming#:~:text=In%20computer%20programming%2C%20event%2Ddriven,from%20other%20programs%20or%20threads."&gt;Event-driven Programming&lt;/a&gt;&lt;strong&gt;(&amp;quot;Asynchronomous&amp;quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A single thread, single loop that waits for an event.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Combining Threads and Event Driven Programming&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Create one thread for each procedure call.&amp;quot;... &amp;quot;On each of the threads run a stripped down event driven loop. Sort of one event loop per core. That results in parallelism and I/O concurrency.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Robert Morris&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Postface: Concurrent Python Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've rarely if ever used multiple threads in Python. Simply running a single threaded script seems sufficient for most of my tasks. Maybe I could speed up API requests by splitting into threads when making a few hundred thousand requests? Apparently I'm missing out on concurrent threading efficiency gains.&lt;/p&gt;
&lt;p&gt;I once experimented with the &lt;a class="reference external" href="https://docs.python.org/3.8/library/multiprocessing.html"&gt;multiprocessing&lt;/a&gt; module's &lt;a class="reference external" href="https://docs.python.org/3.8/library/multiprocessing.html#the-process-class"&gt;Process class&lt;/a&gt;, which worked on Linux but not Windows for me. I ended up taking an simpler, single thread approach instead. I've also heard of using multiprocessing &lt;a class="reference external" href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool"&gt;pool&lt;/a&gt; objects. There's also the &lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;asyncio&lt;/a&gt; library &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html"&gt;concurrent.futures&lt;/a&gt; modules to consider. The &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example"&gt;ProcessPoolExecutor&lt;/a&gt; looks promising.&lt;/p&gt;
&lt;p&gt;Python also has the &lt;a class="reference external" href="https://docs.python.org/3/library/queue.html"&gt;queue module.&lt;/a&gt; I haven't used it yet but at one point I watched a talk where &lt;a class="reference external" href="https://www.youtube.com/watch?v=_GP9OpZPUYc"&gt;Raymond Hettinger&lt;/a&gt; recommended queue as a good option if you want concurrency in Python.&lt;/p&gt;
&lt;p&gt;It seems there are many options available in Python but it's not clear which tools should be deployed and when. And your chosen concurrency strategy may add extra complexity. Handle with care. Or consider learning Go if you want to use threads to scale your distributed system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: Python Concurrency Success&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently deployed the &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor"&gt;ThreadPoolExecutor&lt;/a&gt; from the concurrent.futures module to efficiently move thousands of files to a new folder. So Python does have fairly accessible alternatives to concurrency. I guess I'll need to try Go sometime to compare!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;concurrent.futures&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Move files concurrently from the current working directory to a new folder.&lt;/span&gt;
&lt;span class="sd"&gt;    This script is adapted from the Python ThreadPoolExecutor documentation:&lt;/span&gt;
&lt;span class="sd"&gt;    https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;csvs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;split_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;file_batches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;split_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# write to local folder named &amp;quot;csvs&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dst_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/csvs&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_batches&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;csv_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://opensource.googleblog.com/2020/08/new-case-studies-about-googles-use-of-go.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+GoogleOpenSourceBlog+%28Google+Open+Source+Blog%29"&gt;New Case Studies About Google's Use of Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://go.dev/"&gt;go.dev&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, concurrency, data, education, Go, lectures notes, programming"></category><category term="computers"></category><category term="distributed systems"></category><category term="golang"></category><category term="MIT"></category><category term="python"></category><category term="rpc"></category></entry><entry><title>Characterizing Database Workloads &amp; Storage Models</title><link href="https://lofipython.com/choosing-database-storage-models-and-workloads-that-mesh.html" rel="alternate"></link><published>2020-06-27T13:22:00-05:00</published><updated>2020-06-27T13:22:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-06-27:/choosing-database-storage-models-and-workloads-that-mesh.html</id><summary type="html">&lt;p&gt;Thank you &lt;a class="reference external" href="https://db.cs.cmu.edu/"&gt;Carnegie Mellon Database Group&lt;/a&gt; for putting this online! These are my notes from watching on YouTube.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carnegie Mellon Databases Storage II, Lecture 4&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo [&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;Watch on YouTube&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-problem-and-solution"&gt;
&lt;h2&gt;The Problem and Solution&lt;/h2&gt;
&lt;p&gt;How should the DBMS represent the database in storage files on disk? Solve it by …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Thank you &lt;a class="reference external" href="https://db.cs.cmu.edu/"&gt;Carnegie Mellon Database Group&lt;/a&gt; for putting this online! These are my notes from watching on YouTube.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carnegie Mellon Databases Storage II, Lecture 4&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo [&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;Watch on YouTube&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-problem-and-solution"&gt;
&lt;h2&gt;The Problem and Solution&lt;/h2&gt;
&lt;p&gt;How should the DBMS represent the database in storage files on disk? Solve it by choosing the right &lt;em&gt;storage model&lt;/em&gt; for your target &lt;em&gt;workload&lt;/em&gt;. The right strategy varies if you are reading data, writing data and with how many joins you are performing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="workload-characterization"&gt;
&lt;h2&gt;Workload Characterization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;OLTP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;Online Transaction Processing&lt;/a&gt;): &amp;quot;Simple queries with lots of writes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OLAP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;Online Analytical Processing&lt;/a&gt;): &amp;quot;Read only queries. Lots of joins. Doing a lot of reads, but they're more complex.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTAP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing"&gt;Hybrid Transactional Analytical Processing&lt;/a&gt;): &amp;quot;is trying to do both of them. You still want to ingest new data, but analyze it as it comes in. It's used for companies making decisions on the fly as people are browsing websites, like internet advertising companies.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="screenshot-2020-06-27-at-11-56-10-am"&gt;
&lt;h2&gt;&lt;img alt="Screenshot 2020-06-27 at 11.56.10 AM" class="alignnone size-full wp-image-3897" src="https://pythonmarketer.files.wordpress.com/2020/06/screenshot-2020-06-27-at-11.56.10-am.png" style="width: 1920px; height: 1080px;" /&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="storage-models"&gt;
&lt;h2&gt;Storage Models&lt;/h2&gt;
&lt;p&gt;screenshots from the &lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;lecture&lt;/a&gt;&lt;/p&gt;
&lt;img alt="n-ary model" class="alignnone size-full wp-image-3918" src="https://pythonmarketer.files.wordpress.com/2020/06/n-ary-model.png" style="width: 692px; height: 360px;" /&gt;
&lt;p&gt;N-ary used to be the dominant model until the '80s.&lt;/p&gt;
&lt;img alt="DSM model" class="alignnone size-full wp-image-3917" src="https://pythonmarketer.files.wordpress.com/2020/06/dsm-model-1.png" style="width: 938px; height: 396px;" /&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading:&lt;/strong&gt; &lt;a class="reference external" href="https://www.allthingsdistributed.com/2013/09/column-oriented-databases.html"&gt;All Things Distributed&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="column-store-vs-row-store-rdbms"&gt;
&lt;h2&gt;Column Store Vs. Row Store RDBMS&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/"&gt;Row-oriented DBMS&lt;/a&gt;&lt;strong&gt;(Row Store)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PostgreSQL, MySQL&lt;/li&gt;
&lt;li&gt;Row Store = use OLTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Column-oriented DBMS&lt;/a&gt;&lt;strong&gt;(Column Store)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Red Shift, BigQuery&lt;/li&gt;
&lt;li&gt;Column Store = use OLAP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If types are consistent, you can compress data into single column store.&lt;/p&gt;
&lt;/div&gt;
</content><category term="data, Databases, education, performance"></category><category term="Carnegie Mellon"></category><category term="database storage"></category><category term="learning"></category><category term="lectures notes"></category></entry><entry><title>Free Computer Science Courses and Talks To Absorb</title><link href="https://lofipython.com/my-favorite-free-educational-courses-and-talks-to-absorb.html" rel="alternate"></link><published>2020-06-23T03:35:00-05:00</published><updated>2020-06-23T03:35:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-06-23:/my-favorite-free-educational-courses-and-talks-to-absorb.html</id><summary type="html">&lt;p&gt;Below you'll find a balanced curriculum of juicy courses and videos that are available for free on the internet. I'll definitely be diving into most of these in the 2nd half of 2020. Stay curious!&lt;/p&gt;
&lt;div class="section" id="university-cs-courses-for-free"&gt;
&lt;h2&gt;University CS Courses For Free&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLhQjrBD2T382hIW-IsOVuXP1uMzEvmcE5"&gt;CS50's Web Programming with Python and JavaScript&lt;/a&gt; | Harvard University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://archive.org/details/ucberkeley_webcast_gJJeUFyuvvg"&gt;CS …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below you'll find a balanced curriculum of juicy courses and videos that are available for free on the internet. I'll definitely be diving into most of these in the 2nd half of 2020. Stay curious!&lt;/p&gt;
&lt;div class="section" id="university-cs-courses-for-free"&gt;
&lt;h2&gt;University CS Courses For Free&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLhQjrBD2T382hIW-IsOVuXP1uMzEvmcE5"&gt;CS50's Web Programming with Python and JavaScript&lt;/a&gt; | Harvard University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://archive.org/details/ucberkeley_webcast_gJJeUFyuvvg"&gt;CS 61-C Great Ideas in Computer Architecture (Machine Structures)&lt;/a&gt;, Spring 2015 | UC Berkeley&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cs109.github.io/2015/"&gt;CS 109: Data Science&lt;/a&gt;, 2015 | Harvard University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://uppsala.instructure.com/courses/28112"&gt;Mathematical Modeling of Football&lt;/a&gt;, Fall 2020 | Uppsala Universitet&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=hry_qqXLej8&amp;amp;list=PLN_mP1uWIrL6d_brjVN3qgDBxoYEAE-hG&amp;amp;index=2"&gt;CS 162 - Operating Systems and Systems Programming&lt;/a&gt;, Fall 2013 | UC Berkeley&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=oeYBdghaIjc&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;15-445/645 Intro to Database Systems&lt;/a&gt;, Fall 2019&amp;nbsp;| Carnegie Mellon University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=SdW5RKUboKc&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw&amp;amp;index=25&amp;amp;t=0s"&gt;15-721 Advanced Database Systems&lt;/a&gt;, Spring 2020 | Carnegie Mellon University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://missing.csail.mit.edu/2020/"&gt;Missing Semester: Shell Tools &amp;amp; Scripting&lt;/a&gt;, Spring 2020 | MIT&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB"&gt;6.824 Distributed Systems&lt;/a&gt;, Spring 2020 | MIT&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLOtl7M3yp-DX32N0fVIyvn7ipWKNGmwpp"&gt;CSE 373 - Analysis of Algorithms&lt;/a&gt;, 2016 | Stony Brook University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=9Btjg3I5-Wg"&gt;CS 4150 Algorithms&lt;/a&gt;, Spring 2020 | University of Utah&lt;/p&gt;
&lt;p&gt;CS 241 System Programming, Spring 2020 [&lt;a class="reference external" href="http://cs241.cs.illinois.edu/coursebook/index.html"&gt;course wiki&lt;/a&gt;] |&amp;nbsp;University of Illinois&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/"&gt;CS 6120: Advanced Compilers: The Self-Guided Online Course&lt;/a&gt; | Cornell University&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="intriguing-coursera-classes"&gt;
&lt;h2&gt;Intriguing Coursera Classes&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/learn/devops-culture-and-mindset#syllabus"&gt;DevOps Culture and Mindset&lt;/a&gt; | UC-Davis&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/specializations/data-structures-algorithms"&gt;Computer Science: Algorithms, Theory, and Machines&lt;/a&gt; | Princeton University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/learn/excel-data-analysis-fundamentals?courseSlug=excel-data-analysis-fundamentals&amp;amp;showOnboardingModal=check"&gt;Excel Fundamentals for Data Analysis&lt;/a&gt; | Macquarie University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/projects/data-science-streamlit-python"&gt;Build a Data Science Web App with Streamlit and Python&lt;/a&gt; | Guided Project [$10]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="programming-talks-tutorials"&gt;
&lt;h2&gt;Programming Talks &amp;amp; Tutorials&lt;/h2&gt;
&lt;p&gt;These programming talks piqued my interest, highly recommended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Beazley | Built in Super Heroes [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=lyDLAutA88s&amp;amp;index=4&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mr. Beazley shows how to use pure Python built-in functions to clean and analyze the City of Chicago's food inspection data. No pandas in this talk, behold the power of the Python standard library. Spoiler: Don't eat at O'hare airport. He also has a new course, available for free:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Beazley | Practical Python Programming&amp;nbsp;[&lt;/strong&gt;&lt;a class="reference external" href="https://dabeaz-course.github.io/practical-python/"&gt;Course&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
This is not a course for absolute beginners on how to program a computer. It is assumed that you already have programming experience in some other programming language or Python itself.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sebastian Witowski | Modern Python Developer's Toolkit [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=WkUBx3g2QfQ"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An overview covering editing tools and setup from &lt;a class="reference external" href="https://www.youtube.com/channel/UCMjMBMGt0WJQLeluw6qNJuA/videos"&gt;PyCon 2020&lt;/a&gt;. Honing your development environment is crucial to being an efficent coder. This example uses VS Code. I use Atom as my primary text editor. The most recommended linters are usually pylint, flake8 or pyflakes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jake VanderPlas | Reproducible Data Analysis in Jupyter [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw&amp;amp;index=138"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This 10 video series is a must-watch for aspiring data scientists and analysts if you use Python. Includes a git workflow demonstration, working in Jupyter Notebooks and many other essentials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rich Hickey | Hammock Driven Development [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, the best thing we can do is step away from the keyboard. I really enjoy this speaker's communication style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eric J. Ma | Demystifying Deep Learning for Data Scientists [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=gGu3pPC_fBM&amp;amp;feature=youtu.be"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tutorial-style Pythonmachine learning walk-through from PyCon 2020.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julie Michelman | Pandas, Pipelines, and Custom Transformers [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=BFaadIqWlAg&amp;amp;index=6&amp;amp;list=PLGVZCDnMOq0rxoq9Nx0B4tqtr891vaCn7"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This video shows a deep dive into the world of sci-kit learn and machine learning. PyCon and PyData videos usually include some cutting edge tech. Machine learning moves so fast there are always new tools surfacing. But certain libraries like sci-kit learn, TensorFlow, keras and PyTorch have been constant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ville Tuuls | A Billion Rows per Second: Metaprogramming Python for Big Data [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?time_continue=1745&amp;amp;v=rXj5nayS7Yg"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make your data dense by tactically re-arranging into efficient structures and compiling it down to lower-level bytes. This details a successful Python / Postgres / Numba / Multicorn big data implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="video-course-grab-bag"&gt;
&lt;h2&gt;Video &amp;amp; Course Grab Bag&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Discover the role of Python in space exploration [&lt;/strong&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/learn/paths/introduction-python-space-exploration-nasa/"&gt;course&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft and NASA made a free course about Python in space! 🤓&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ted Nelson | Computers for Cynics [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=hZ3gmh-d9oI&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw&amp;amp;index=137&amp;amp;t=0s"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I find these videos to be an entertaining, thought-provoking take on software history. Recommended from Joe Armstrong, the creator of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Erlang_(programming_language)"&gt;Erlang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GNU Typist [&lt;/strong&gt;&lt;a class="reference external" href="https://www.gnu.org/savannah-checkouts/gnu/gtypist/gtypist.html"&gt;Tutorial&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may be able to teach yourself to type more efficiently with this tutorial. I definitely need to do this. It's worth mentioning, per &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;Rich Hickey:&lt;/a&gt; with a proper design phase, you'll spend less time typing in the first place!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extra Credit: Python Wikipedia Library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;import wikipedia [&lt;a class="reference external" href="https://github.com/goldsmith/Wikipedia"&gt;GitHub&lt;/a&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supplementary-resources"&gt;
&lt;h2&gt;Supplementary Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://teachyourselfcs.com/"&gt;teachyourselfcs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/chiphuyen/python-is-cool/blob/master/cool-python-tips.ipynb"&gt;Cool Python Tips Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md"&gt;Google's Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gto76/python-cheatsheet"&gt;Python Cheat Sheet (Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nocomplexity.com/machine-learning-resources/"&gt;Free and Open Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pages.dataiku.com/hubfs/PDF/Whitepaper/Importance_of_AutoML-for-Augmented-Analytics.pdf"&gt;AutoML and The Rise of the Citizen Data Scientist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1GOO4s1NcxCR8a44F0XnsErz5rYDxNbHAHznu4pJMRkw/edit#gid=0"&gt;Data Engineering Study Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jlevy/the-art-of-command-line"&gt;The Art of Command Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ossu/computer-science#advanced-cs"&gt;Open Source University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://drive.google.com/drive/u/0/folders/1ZS57_40tWuIB7tV4APVMmTZ-5PXDwX9w"&gt;Data Training Materials from the New York Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.freecodecamp.org/"&gt;freecodecamp.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="coding, data, Databases, education, programming, python, software"></category><category term="free education"></category><category term="harvard"></category><category term="knowledge"></category><category term="learning"></category><category term="MIT"></category><category term="university"></category></entry><entry><title>Integrating MySQL with Flask, pandas and pythonanywhere</title><link href="https://lofipython.com/essential-mysql-terminal-commands-and-connecting-to-mysql-with-flask-pandas-and-pythonanywhere.html" rel="alternate"></link><published>2020-05-25T21:48:00-05:00</published><updated>2020-05-25T21:48:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-05-25:/essential-mysql-terminal-commands-and-connecting-to-mysql-with-flask-pandas-and-pythonanywhere.html</id><summary type="html">&lt;p&gt;Sometimes a spark comes from seemingly nowhere. That's when you reach for your tools and create. After a series of successful experiments, I decided this stack might be my quickest, best shot to get a functional website up and running in Python. I was pleasantly surprised to make rapid progress …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes a spark comes from seemingly nowhere. That's when you reach for your tools and create. After a series of successful experiments, I decided this stack might be my quickest, best shot to get a functional website up and running in Python. I was pleasantly surprised to make rapid progress over the span of a quarantine weekend. Here are the steps to create a &lt;a class="reference external" href="https://weedfiend.pythonanywhere.com"&gt;MySQL backed website&lt;/a&gt; with Flask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hosting With pythonanywhere&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pythonanywhere.com/user/weedfiend/"&gt;pythonanywhere&lt;/a&gt; is a web hosting service like GoDaddy. If you host your app with them, MySQL is the default database. Postgres integration is available at higher price tiers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To get your Flask app's database up and running you need to:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create your database (see the &amp;quot;Databases&amp;quot; tab in pythonanywhere)&lt;/li&gt;
&lt;li&gt;Use the mysql terminal to create your tables&lt;/li&gt;
&lt;li&gt;Use the mysql.connector API to connect to your table and execute SQL from your Flask app.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="essential-mysql-terminal-commands"&gt;
&lt;h2&gt;Essential MySQL Terminal Commands&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Show MySQL Version&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;VERSION&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;List tables in a database&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Show All MySQL Variable Values&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VARIABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Creating a Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.sitepoint.com/use-json-data-fields-mysql-databases/"&gt;Create a Table with a JSON column&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mediumint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Add New Column and specify column to insert AFTER&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COLUMN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AFTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other_column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Alter Datatype of a Column&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;MODIFY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Describe a Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DESCRIBE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;View All Records in a Table&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.mysqltutorial.org/mysql-like/"&gt;Using LIKE in MySQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Select 10 Newest Records&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Explaining&amp;quot; A Query&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;EXPLAIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Using &amp;quot;ANALYZE TABLE&amp;quot; to&lt;/strong&gt;&lt;a class="reference external" href="https://dev.mysql.com/doc/refman/8.0/en/statement-optimization.html"&gt;optimize them&lt;/a&gt;&lt;strong&gt;is periodically recommended by MySQL:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ANALYZE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Marijuana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;figure&gt;&lt;/figure&gt;&lt;div class="wp-image-3418 figure"&gt;
&lt;img alt="mysql commands in shell" src="https://pythonmarketer.files.wordpress.com/2020/05/mysql_commands-1.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-libraries-in-pythonanywhere"&gt;
&lt;h2&gt;Installing Libraries in PythonAnywhere&lt;/h2&gt;
&lt;p&gt;You can use &lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt; to install python libraries within the PythonAnywhere bash terminal. Go to the consoles tab and start a new bash terminal. Then to install a library, such as pandas:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip3.8 install --user pandas
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="flask-app-with-mysql-connector-api-sql-and-pandas"&gt;
&lt;h2&gt;Flask app with &lt;a class="reference external" href="https://dev.mysql.com/doc/connector-python/en/"&gt;mysql.connector API&lt;/a&gt;, SQL and pandas&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A Flask app making a mysql database connection with pandas:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Creating an error log with logging.&lt;/li&gt;
&lt;li&gt;Connecting to a mysql database hosted through &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/quickstart/"&gt;Flask&lt;/a&gt; and &lt;a class="reference external" href="http://pythonanywhere.com"&gt;pythonanywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then reading a table to a pandas &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;dataframe&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;
&lt;span class="normal"&gt;66&lt;/span&gt;
&lt;span class="normal"&gt;67&lt;/span&gt;
&lt;span class="normal"&gt;68&lt;/span&gt;
&lt;span class="normal"&gt;69&lt;/span&gt;
&lt;span class="normal"&gt;70&lt;/span&gt;
&lt;span class="normal"&gt;71&lt;/span&gt;
&lt;span class="normal"&gt;72&lt;/span&gt;
&lt;span class="normal"&gt;73&lt;/span&gt;
&lt;span class="normal"&gt;74&lt;/span&gt;
&lt;span class="normal"&gt;75&lt;/span&gt;
&lt;span class="normal"&gt;76&lt;/span&gt;
&lt;span class="normal"&gt;77&lt;/span&gt;
&lt;span class="normal"&gt;78&lt;/span&gt;
&lt;span class="normal"&gt;79&lt;/span&gt;
&lt;span class="normal"&gt;80&lt;/span&gt;
&lt;span class="normal"&gt;81&lt;/span&gt;
&lt;span class="normal"&gt;82&lt;/span&gt;
&lt;span class="normal"&gt;83&lt;/span&gt;
&lt;span class="normal"&gt;84&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mysql.connector&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Call database and return data from df. Then display homepage.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;email_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_database_table_as_dataframe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_homepage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to connect to database.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_homepage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Note: you should use Flask&amp;#39;s render_template to render HTML files.&lt;/span&gt;
&lt;span class="sd"&gt;    However, for example you can make a quick f-string HTML page that works in this code.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;link rel=&amp;#39;stylesheet&amp;#39; href=&amp;quot;/static/styles/some_file.css&amp;quot;&amp;gt;&amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; type=&amp;quot;image/x-icon&amp;quot; href=&amp;quot;static/favicon.ico&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;Title&amp;gt;Dispensary Alerts&amp;lt;/Title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;p&amp;gt;Get alerts for your dope.&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;h6&amp;gt;&amp;lt;b&amp;gt;Sign Up&amp;lt;/b&amp;gt;&amp;lt;/h6&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;div class=&amp;quot;form&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;form action=&amp;quot;/add_signup_to_db&amp;quot; method=&amp;quot;post&amp;quot; style=&amp;quot;width:420px;text-align:center;display:block;&amp;quot; &amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;Signup Form&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Current Time:&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_database_table_as_dataframe&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Connect to a table named &amp;#39;Emails&amp;#39;. Returns pandas dataframe.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username.mysql.pythonanywhere-services.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username$DatabaseName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;email_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT * FROM Emails&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;email_df&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to fetch dataframe from DB.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Oops!&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/add_signup_to_db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_signup_to_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Pass data as SQL parameters with mysql.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username.mysql.pythonanywhere-services.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username$DatabaseName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;INSERT INTO Emails (message, date) VALUES (&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;) &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;record_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed to insert into MySQL table &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error inserting records to DB.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_connected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MySQL connection is closed&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Iterative Development&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
Below: making &lt;a class="reference external" href="https://weedfiend.pythonanywhere.com/"&gt;my website&lt;/a&gt; look less like a &amp;quot;my first HTML&amp;quot; website, experimenting with my app's messagename and adding a sign-up form connected to the database.&lt;/blockquote&gt;
&lt;img alt="Screenshot_20200606-132252 (1)" class="alignnone size-full wp-image-3524" src="https://pythonmarketer.files.wordpress.com/2020/05/screenshot_20200606-132252-1-1.png" style="width: 344px; height: 566px;" /&gt;
&lt;p&gt;&lt;strong&gt;Note: if you see this error when making a request in pythonanywhere:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OSError: Tunnel connection failed: 403 Forbidden
&lt;/pre&gt;
&lt;p&gt;It's likely because you are &amp;quot;whitelisted&amp;quot; on the free plan. Upgrading to the $5/month plan will fix it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scoping The Full Stack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'm really enjoying this web development stack. Here are all of the tools and library choices for this website:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/HTML"&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.taniarascia.com/overview-of-css-concepts/"&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Web_framework"&gt;web framework&lt;/a&gt;: Flask library&lt;/li&gt;
&lt;li&gt;email: &lt;a class="reference external" href="https://pythonhosted.org/Flask-Mail/"&gt;Flask-Mail&lt;/a&gt; library(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;API calls to external websites: &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/"&gt;requests&lt;/a&gt; and json libraries&lt;/li&gt;
&lt;li&gt;data handling: MySQL database, mysql.connector API, &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/05/12/pandas-pythons-excel-powerhouse/"&gt;pandas&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;file system: &lt;a class="reference external" href="https://docs.python.org/3/library/logging.html"&gt;logging&lt;/a&gt;, os and sys libraries&lt;/li&gt;
&lt;li&gt;(may add) payment processing: &lt;a class="reference external" href="https://github.com/braintree/braintree_python"&gt;Braintree Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;web hosting: pythonanywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Finding Your Flask Groove&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flask is a little scary at first, but reasonable once you get a grasp of the basic syntax. Using the logging module to establish access, error and server log feeds was a big step to finding my Python traceback fixing groove. It's a work in progress.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recapping My Python Web Development and Database Experiences&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I previously created a &lt;a class="reference external" href="http://tameimpala.pythonanywhere.com/"&gt;website&lt;/a&gt; with &lt;a class="reference external" href="https://lofipython.com/getting-started-with-web2py/"&gt;web2py&lt;/a&gt;, another Python web framework like Flask and Django. I think it was a decent choice for me at that point in my Python journey. Back then, I connected a MongoDB back-end to web2py. I randomly picked Mongo out of the DB hat and it worked well enough.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;My Python Web Development and Database Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;App #1&lt;/strong&gt;          web2py + MongoDB&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;App #2&lt;/strong&gt;           Flask + MySQL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future App?&lt;/strong&gt;   py4web + pyDAL + PostgreSQL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future App?&lt;/strong&gt;  tornado + streamlit (or) Flask + Dash (+ SQLite)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of these two diverse Python stacks, I favor MySQL and Flask. But I learned a lot from watching web2py's tutorial videos and it's less intimidating for beginners. And I barely scratched the surface of web2py's &amp;quot;pure Python&amp;quot; &lt;a class="reference external" href="https://github.com/web2py/pydal"&gt;pyDAL (Database Abstraction Layer)&lt;/a&gt;, which seems pretty dope.&lt;/p&gt;
&lt;p&gt;web2py's &lt;a class="reference external" href="https://www.youtube.com/watch?v=hcYUgNWvPtw"&gt;creator&lt;/a&gt; has a new framework in progress called &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;. It has the same &lt;a class="reference external" href="http://www.web2py.com/books/default/chapter/29/06/the-database-abstraction-layer"&gt;DAL&lt;/a&gt; and inherits many other web2py qualities. Definitely looking forward to exploring the DAL on my first py4web website. I'll likely use it to connect to PostgreSQL or SQLite. Maybe I'll &lt;a class="reference external" href="https://github.com/web2py/pydal"&gt;install pyDAL with pip&lt;/a&gt; in the meantime.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Both of my websites are hosted with pythonanywhere, which gives you a text editor and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;bash&lt;/a&gt; terminal to run your scripts in a shell environment. I'm so pleased with all of these tools. They fit together smoothly and made creating my website a fun experience. 👍👍&lt;/p&gt;
&lt;/div&gt;
</content><category term="data, Databases, ODBC, pandas, programming, SQL, web development, web2py"></category><category term="flask"></category><category term="mysql"></category><category term="py4web"></category><category term="pyDAL"></category><category term="python"></category></entry><entry><title>A Guide To Making HTTP Requests To APIs With JSON &amp; Python</title><link href="https://lofipython.com/how-to-make-json-requests-with-python.html" rel="alternate"></link><published>2020-05-18T05:41:00-05:00</published><updated>2020-05-18T05:41:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-05-18:/how-to-make-json-requests-with-python.html</id><summary type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/li&gt;
&lt;li&gt;Testing and Exporting Python Request Code from Postman (Optional)&lt;/li&gt;
&lt;li&gt;Formatting Your Request&lt;/li&gt;
&lt;li&gt;Example GET and POST Requests&lt;/li&gt;
&lt;li&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/li&gt;
&lt;li&gt;Sidebar: requests.Session()&lt;/li&gt;
&lt;li&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;strong&gt;Terminology Clarification&lt;/strong&gt;: I will refer to &amp;quot;items&amp;quot; or &amp;quot;data&amp;quot; throughout this post. This could be substituted for contacts or whatever data you are looking for. For example, you might be fetching a page of contacts from your CRM. Or fetching your tweets from Twitter's API. Or searching the Google location API, you might look up an address and return geo-location coordinates.&lt;/blockquote&gt;
&lt;div class="section" id="api-http-lingo-you-should-know"&gt;
&lt;h2&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hypertext Transfer Protocol (HTTP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Per &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;Mozilla&lt;/a&gt;, &amp;quot;Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical&amp;nbsp;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;client-server model&lt;/a&gt;, with a client opening a connection to make a request, then waiting until it receives a response.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
HTTP: you = client. API = way to communicate with server&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Application Programming Interface (API)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;Per Wikipedia&lt;/a&gt;, the purpose of an API is to simplify &amp;quot;programming by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstraction_(software_engineering)"&gt;abstracting&lt;/a&gt; the underlying implementation and only exposing objects or actions the developer needs.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Representational State Transfer (REST)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; is an architectural style of web APIs. It is the dominant architecture that many APIs use. Simple Object Access Protocol (&lt;a class="reference external" href="https://smartbear.com/blog/test-and-monitor/soap-vs-rest-whats-the-difference/"&gt;SOAP&lt;/a&gt;) is another style I've heard of, but it seems less common nowadays.&lt;/p&gt;
&lt;p&gt;A REST API is built for interoperability and has properties like: &amp;quot;simplicity of a uniform interface&amp;quot; and &amp;quot;visibility of communication between components by service agents.&amp;quot; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Wikipedia&lt;/a&gt;] If an API follows REST, it has many good principles baked in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GET, POST and PATCH&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are three common types of request methods.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;GET&lt;/cite&gt;: &amp;nbsp;Read data returned, such as all of your tweets in &lt;a class="reference external" href="https://developer.twitter.com/en/docs"&gt;the Twitter API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;POST&lt;/cite&gt;: Create a new item, like writing a new tweet. Can also update existing data. Tweets aren't editable though!&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;PATCH&lt;/cite&gt;: Similar to &lt;cite&gt;POST&lt;/cite&gt;, this is typically used for updating data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;URL or &amp;quot;endpoint&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The website location to send your request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Values you pass to tell the API what you want. They are defined by the API specifications, which are usually &lt;a class="reference external" href="https://developers.activecampaign.com/reference"&gt;well documented&lt;/a&gt;. In python's &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library, they may be passed as &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt;. Sometimes they are passable directly within the endpoint url string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Body or &amp;quot;payload&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make a request, you send a payload to the url. Often this is a JSON string with the API's URL parameters and values, AKA the request body. If the &lt;a class="reference external" href="https://jira.readthedocs.io/"&gt;API is written specifically for Python&lt;/a&gt;, it might accept an actual Python dictionary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript Object Notation (JSON)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=KnAyziNnuI0"&gt;JSON&lt;/a&gt; is the data interchange standard for all languages. Usually it is the default way to pass data into and receive data from an API. If making a POST, you can check your json object is formatted correctly by using a &lt;a class="reference external" href="https://jslint.com/"&gt;json linter&lt;/a&gt;. Or try Python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#module-json.tool"&gt;json.tool&lt;/a&gt;! You can also pretty print your JSON or python dictionary with the &lt;a class="reference external" href="https://docs.python.org/3/library/pprint.html"&gt;pprint&lt;/a&gt; module. If you're using json.dumps remember it has &lt;a class="reference external" href="https://docs.python.org/3/library/json.html"&gt;pretty printing accessible by keyword arguments&lt;/a&gt;! These features are accessible in the standard library. Isn't Python great? See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/09/15/python-101-an-intro-to-working-with-json/"&gt;Python 101 - An Intro to Working with JSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Headers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These usually contain website cookies and authorization info. They also may tell the API what kind of data you want back. JSON and XML are the two most common types of data to return. You can specify the return format in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers.&lt;/p&gt;
&lt;blockquote&gt;
If you need to parse an XML response, check out Python's stock &lt;a class="reference external" href="https://docs.python.org/3.8/library/xml.etree.elementtree.html"&gt;ElementTree API&lt;/a&gt;. I've only seen a few APIs using XML responses, such as the &lt;a class="reference external" href="https://www.usps.com/business/web-tools-apis/"&gt;USPS Address Validation API&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization varies widely. This is the level of identification you need to pass to the API to make a request. Public APIs might require none. Some just need a username and password. Others use the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OAuth"&gt;Oauth standard&lt;/a&gt;, which is a system involving credentials and tokens for extra security.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization Scheme Example [&lt;/strong&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Mozilla&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization: &amp;lt;auth-scheme&amp;gt; &amp;lt;authorisation-parameters&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# headers python dict example&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;basic &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;API data is commonly returned in multiple pages when there is a lot of data returned. Each page can be accessed one request at a time. Sometimes you can specify how many items you want on a page. But there is usually a maximum items per page limit like 100.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Status code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each request usually gives you a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;numeric code corresponding to happened&lt;/a&gt; when the server tried to handle your request. There is also usually a message returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also: Web Server Gateway Interface (WSGI, pronounced &amp;quot;Wis-Ghee&amp;quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;As described in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt;, the Python Web Server Gateway Interface (WSGI) is a way to make sure that web servers and python web applications can talk to each other.&amp;quot;&amp;nbsp; &lt;a class="reference external" href="https://docs.gunicorn.org/en/latest/install.html"&gt;Gunicorn&lt;/a&gt; is one of &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi"&gt;a few Python WSGI clients&lt;/a&gt;. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/04/30/useful-links-for-web2py-beginners/"&gt;web2py&lt;/a&gt; is another WSGI client and web framework I have used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nginx"&gt;Nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;Create, read, update and delete (CRUD)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-request-json"&gt;
&lt;h2&gt;Creating the Request JSON&lt;/h2&gt;
&lt;p&gt;I recommend using &lt;a class="reference external" href="https://www.postman.com/"&gt;Postman&lt;/a&gt; in most cases, depending on the complexity of the API. If the JSON syntax is straightforward, you can format your data as a python dictionary, then convert it to a JSON object with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.dumps"&gt;json module&lt;/a&gt;. But JSON can be tricky sometimes. You may also need to pass a dictionary of HTTP headers.&lt;/p&gt;
&lt;p&gt;Some APIs have &amp;quot;Postman Collections&amp;quot;, a set of Python (or any language) script templates for the API. In those cases, it might make sense to use those resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Path One: Make HTTP request with json &amp;amp; requests libraries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Format Python dict with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&amp;nbsp; Infer API requirements from documentation. Use requests for HTTP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path Two: Make HTTP request with Postman &amp;amp; requests library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Postman to generate the JSON payload. Plug headers and payload into requests. Use requests library for HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Postman has a friendly interface for plugging in all your pieces and tinkering with your request body until it works. Make it easier on yourself and use Postman, especially if there are collections. An alternative is to troubleshoot in Python if you are confident in your grasp of the API. I use both options depending on my familiarity with the API at hand.&lt;/p&gt;
&lt;p&gt;Once you have the request working, you may &lt;a class="reference external" href="https://learning.postman.com/docs/postman/sending-api-requests/generate-code-snippets/"&gt;export your Postman request to almost any language&lt;/a&gt;. For Python, you can sometimes export to the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt;,&amp;nbsp; &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;urllib&lt;/tt&gt; libraries. Hit the &amp;quot;code&amp;quot; button in Postman and then copy your code.&lt;/p&gt;
&lt;blockquote&gt;
If you choose not to use Postman, you can use the json library. See the use of &lt;tt class="docutils literal"&gt;json.dumps()&lt;/tt&gt;to convert a dictionary to a JSON object in Example #2 below&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="formatting-your-request"&gt;
&lt;h2&gt;Formatting Your Request&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Paste your Postman headers, payload and url into your existing code.&lt;/li&gt;
&lt;li&gt;You may want to use a dict or &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting&lt;/a&gt; to pass values to your request parameters or url.&lt;/li&gt;
&lt;li&gt;If the API uses a token or other form of authorization that needs to be refreshed intermittently, I usually have a function that returns a token. &lt;tt class="docutils literal"&gt;token = fetch_token()&lt;/tt&gt; Then put the token in the headers dict.&amp;nbsp; &lt;tt class="docutils literal"&gt;{&amp;quot;Authorization&amp;quot;: f&amp;quot;basic &lt;span class="pre"&gt;{token}&amp;quot;}&lt;/span&gt;&lt;/tt&gt; Finally pass your headers and payload to your&amp;nbsp; &lt;tt class="docutils literal"&gt;requests.get&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;requests.request&lt;/tt&gt; function along with the endpoint url. You're now ready to test the request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="python-installation"&gt;
&lt;h2&gt;Python Installation&lt;/h2&gt;
&lt;p&gt;You can install &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. Alternatively, &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; is included within the Python standard library. If you want to convert HTTP response data to a dataframe or csv, install &lt;tt class="docutils literal"&gt;pandas.&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install requests
python -m pip install pandas
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="example-1-get-the-geolocation-details-of-any-public-location-with-the-google-api"&gt;
&lt;h2&gt;Example #1: &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; the geolocation details of any public location with the Google API&lt;/h2&gt;
&lt;p&gt;This was modified from another example of &lt;a class="reference external" href="https://www.geeksforgeeks.org/get-post-requests-using-python/"&gt;Google's Geolocation API&lt;/a&gt;. To use this, you need to &lt;a class="reference external" href="https://developers.google.com/maps/documentation/geolocation/intro"&gt;create a developer account with Google&lt;/a&gt; and paste your API keys below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="c1"&gt;# import pandas as pd&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Find the best double-cheeseburger + fries $7 can buy.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add_Google_API_Key_Here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Redhot Ranch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# optional: set a 5 second timeout for the http request&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# extracting latitude, longitude and formatted address of the first matching location&lt;/span&gt;
&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;formatted_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;formatted_address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# optional: convert response into a dataframe with pandas&lt;/span&gt;
&lt;span class="c1"&gt;# location_df = pd.json_normalize(data[&amp;#39;results&amp;#39;])&lt;/span&gt;
&lt;span class="c1"&gt;# location_df.to_csv(&amp;#39;Locations.csv&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Above you can see:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; makes it easy to see the server's text response also with &lt;tt class="docutils literal"&gt;response.text&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; also makes JSON encoding easy with &lt;tt class="docutils literal"&gt;response.json()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;I like to use &lt;tt class="docutils literal"&gt;pd.json_normalize()&lt;/tt&gt; to convert the response object to a dataframe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-encode-a-python-dictionary-to-json-string-and-post-to-a-hypothetical-api"&gt;
&lt;h2&gt;Example #2: Encode a Python dictionary to json string and &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; to a hypothetical API&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a simple dictionary with request body data and pretty inspect it with pprint.&lt;/li&gt;
&lt;li&gt;Convert it to encoded json string with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; the encoded JSON to the endpoint url with requests.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_dict_to_json_object&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create request body with fictional contact details.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;last_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sherman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;42 Wallaby Way&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;address_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sydney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NSW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AU&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# encode json str to utf-8&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_new_contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a fictional API request.&lt;/span&gt;
&lt;span class="sd"&gt;    Passing a json object to requests.&lt;/span&gt;
&lt;span class="sd"&gt;    Decoding server response with response.json(),&lt;/span&gt;
&lt;span class="sd"&gt;    Returning a contact id by calling the data&amp;#39;s keys.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;cache-control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no-cache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://SomeSoftwareAPI.com/contacts/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;contact_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contact_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# call dict keys to get their values&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contact_id&lt;/span&gt;

&lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convert_dict_to_json_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;contact_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_new_contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;requests.request keyword argument alternatives for passing data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;params&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples or bytes to send in the query string for the Request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json&lt;/strong&gt;&amp;nbsp;– (optional) A JSON serializable Python object to send in the body of the Request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/"&gt;requests API documentation&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status codes&lt;/a&gt; are your friend. They offer a hint at why your request is not working. If you see 200 or 201, that's a good sign. They're usually helpful, but sometimes they can be misleading.&lt;/li&gt;
&lt;li&gt;Ensure you are defining the correct content-type. I had an experience where Postman defined two conflicting &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers and it &lt;a class="reference external" href="https://github.com/postmanlabs/postman-code-generators/issues/215"&gt;caused my request to fail&lt;/a&gt;. The server's error message indicated the problem was in my JSON, so it took me a while to figure out the headers were the problem.&lt;/li&gt;
&lt;li&gt;Sometimes it makes a difference if your url has &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://&lt;/span&gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; in it. Usually &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; is preferred.**&amp;nbsp;**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sidebar: &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;requests.Session()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might be able to improve performance by using a requests &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;&amp;quot;session&amp;quot; object&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A session adds a &amp;quot;keep-alive&amp;quot; header to your HTTP connection. Used to store cookies across requests.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://SomeSoftwareAPI.com/contacts/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPResponse.debuglevel:&lt;/strong&gt; A debugging hook. If &lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;debuglevel&lt;/a&gt; is greater than zero, messages will be printed to stdout as the response is read and parsed.
See also: &lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;http.client Python Docs&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPConnection&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add_Google_API_Key_Here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;90 Miles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I remember APIs seemed mysterious and daunting before I had used them. But like all things, they can be conquered with knowledge, understanding and tenacity to keep trying until you figure it out. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requests Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/api/"&gt;requests.request() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.get"&gt;requests.get() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.post"&gt;requests.post() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation"&gt;Google's HTTP Timing Explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Rolstenhouse/unofficial-apis"&gt;List of Interesting &amp;quot;Unofficial&amp;quot; APIs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Proxy_server"&gt;Proxy servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html"&gt;Making 1 million requests with python-aiohttp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Chicago, coding, HTTP, json, pandas, programming"></category><category term="api"></category><category term="data"></category><category term="python"></category><category term="requests"></category><category term="sandwiches"></category><category term="web"></category></entry><entry><title>Script Windows Like A Pro: Command Line, Batch Files, Remote Desktop Connection and pywin32</title><link href="https://lofipython.com/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection.html" rel="alternate"></link><published>2020-05-06T14:11:00-05:00</published><updated>2020-05-06T14:11:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-05-06:/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection.html</id><summary type="html">&lt;p&gt;Here are a few useful corners of the vast array of Windows scripting tools.&lt;/p&gt;
&lt;div class="section" id="helpful-windows-command-line-documentation"&gt;
&lt;h2&gt;Helpful Windows Command Line Documentation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/command-line-syntax-key"&gt;Windows command line Documentation Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490890%28v%3dtechnet.10%29"&gt;Command-line reference A-Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490954%28v%3dtechnet.10%29"&gt;Command shell overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490982%28v%3dtechnet.10%29"&gt;Using command redirection operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/winrm/about-windows-remote-management"&gt;About Windows Remote Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-few-general-windows-commands"&gt;
&lt;h2&gt;A Few General Windows Commands&lt;/h2&gt;
&lt;p&gt;Use  &lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490906(v=technet.10)"&gt;find&lt;/a&gt;
to look in a text …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here are a few useful corners of the vast array of Windows scripting tools.&lt;/p&gt;
&lt;div class="section" id="helpful-windows-command-line-documentation"&gt;
&lt;h2&gt;Helpful Windows Command Line Documentation&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/command-line-syntax-key"&gt;Windows command line Documentation Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490890%28v%3dtechnet.10%29"&gt;Command-line reference A-Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490954%28v%3dtechnet.10%29"&gt;Command shell overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490982%28v%3dtechnet.10%29"&gt;Using command redirection operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/winrm/about-windows-remote-management"&gt;About Windows Remote Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-few-general-windows-commands"&gt;
&lt;h2&gt;A Few General Windows Commands&lt;/h2&gt;
&lt;p&gt;Use  &lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490906(v=technet.10)"&gt;find&lt;/a&gt;
to look in a text file to count the lines matching a string:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
find /C &amp;quot;FAIL&amp;quot; &amp;lt; &amp;quot;Test_Results.txt&amp;quot;
# returns: 0 if no match or # of lines found, e.g. 2,50,100
&lt;/pre&gt;
&lt;p&gt;I wrote a post on &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/07/15/findstr-aka-grep-for-windows/"&gt;findstr&lt;/a&gt;, which offers similar functionality.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;clip:&lt;/strong&gt; pipe commands &lt;a class="reference external" href="https://www.hanselman.com/blog/ForgottenButAwesomeWindowsCommandPromptFeatures.aspx"&gt;into the clipboard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If:&lt;/strong&gt; &lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490920(v=technet.10)"&gt;If&lt;/a&gt; Statements based on if files exist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List ip address-related info:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
ipconfig
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Check system bit (usually 64-bit or 32-bit):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wmic os getosarchitecture
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-windows-scripts-with-batch-files"&gt;
&lt;h2&gt;Automate Windows Scripts with Batch Files&lt;/h2&gt;
&lt;p&gt;Batch files can be run from command prompt or by double-clicking them. Here's an example of text in a batch file that activates a python virtual environment. Swap in your username and environment if you've created it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /k &amp;quot;cd C:\Users\your_username\PythonEnv\Scripts &amp;amp; activate &amp;amp; cd .. &amp;amp; dir&amp;quot;
&lt;/pre&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Save above as a .bat file.&lt;/li&gt;
&lt;li&gt;This uses &lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490880%28v%3dtechnet.10%29"&gt;cmd&lt;/a&gt; to open a new command prompt in a Windows batch file.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490875(v=technet.10)"&gt;cd&lt;/a&gt;into my python virtual env then activate it by running a batch file.&lt;/li&gt;
&lt;li&gt;Then call dir to print directory contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490998(v=technet.10)"&gt;Set&lt;/a&gt; a custom system 'last_name' variable to be recalled later.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set /p last_name=Enter a last name:
echo %last_name%
pause
&lt;/pre&gt;
&lt;p&gt;Here we print it out with &lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490897(v=technet.10)"&gt;echo&lt;/a&gt;. Then &lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490965(v=technet.10)"&gt;pause&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line continuation in batch files:&lt;/strong&gt; Use ^ to continue your batch file scripts on a new line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-assessment-tools-powercfg-and-sfc"&gt;
&lt;h2&gt;System Assessment Tools: powercfg and sfc&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Display system stats:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
systeminfo
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Use powercfg to assess power, sleep and system states&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
powercfg /SLEEPSTUDY
&lt;/pre&gt;
&lt;p&gt;Use sfc to perform a system file check:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# scan and repair
sfc /SCANNOW
# scan, but do not repair:
sfc /VERIFYONLY
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="accessing-a-remote-computer-from-the-command-line"&gt;
&lt;h2&gt;Accessing a Remote Computer From the Command Line&lt;/h2&gt;
&lt;p&gt;You may want to &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ping"&gt;ping&lt;/a&gt; a remote computer to see if it's running. Add your ip address instead of the below 1s and 0s:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ping 01.10.10.01
&lt;/pre&gt;
&lt;p&gt;Log into your Remote Desktop with &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mstsc"&gt;mstsc&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Run Remote Desktop Connection, save an RDP file from Windows Desktop Client.&lt;/li&gt;
&lt;li&gt;You may need to &lt;a class="reference external" href="https://serverfault.com/questions/396722/your-system-administrator-does-not-allow-the-use-of-saved-credentials-to-log-on"&gt;adjust your credentials on your local machine.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finally, trigger login to an active window from command prompt:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
mstsc RDP_File_Name.rdp
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/winrm/portal"&gt;WinRM&lt;/a&gt; and WinRS can allow terminal access to your Remote Desktop. You may need to set your wifi network to private. To configure winrm:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
winrm quickconfig
&lt;/pre&gt;
&lt;p&gt;Log into a remote computer with &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/winrs"&gt;winrs&lt;/a&gt; and run ipconfig:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
winrs -r:https://myserver.com -t:600 -u:administrator -p:$%fgh7 ipconfig
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="check-out-python-s-pywin32-module"&gt;
&lt;h2&gt;Check Out Python's &lt;a class="reference external" href="https://github.com/mhammond/pywin32"&gt;pywin32&lt;/a&gt; Module&lt;/h2&gt;
&lt;p&gt;This module is extremely useful for scripting out Windows applications. For example, I've made good use of its interfaces to Outlook and &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;Task Scheduler&lt;/a&gt;. Install with &lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pywin32
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Here's an example to send an Outlook email:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;win32com.client&lt;/span&gt;

&lt;span class="n"&gt;outlook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win32com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outlook.application&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outlook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;someone@example.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name@example.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Moneyball Review&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Moneyball is an inspiring movie, based on real events.&lt;/span&gt;
&lt;span class="s2"&gt;            Brad Pitt, Jonah Hill and Philip Seymour Hoffmann gave great performances.&lt;/span&gt;
&lt;span class="s2"&gt;            The trade deadline scene is delightful. Wow.&lt;/span&gt;
&lt;span class="s2"&gt;            Chris Pratt as Hatteberg too. What a solid film.&lt;/span&gt;
&lt;span class="s2"&gt;            Money isn&amp;#39;t everything. Playing ball is.&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attachments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Baseball_Analysis.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="automation, command prompt, Scripts, Windows"></category><category term="command line"></category><category term="remote computer"></category><category term="scripting"></category><category term="shell"></category></entry><entry><title>Reflections on 5 Years of Solving Problems with Python</title><link href="https://lofipython.com/reflections-on-5-years-of-solving-problems-with-python.html" rel="alternate"></link><published>2020-04-11T17:15:00-05:00</published><updated>2020-04-11T17:15:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-04-11:/reflections-on-5-years-of-solving-problems-with-python.html</id><summary type="html">&lt;p&gt;Prior to learning Python, I had no programming experience. I worked in marketing for a book publisher and did not perform well at my job. It was not a good fit. They eventually fired me. As my previous job unraveled, I discovered Python and the Coursera course, &lt;a class="reference external" href="https://www.coursera.org/learn/python?utm_medium=email&amp;amp;utm_source=other&amp;amp;utm_campaign=opencourse.course_complete.python.%7Eopencourse.course_complete.7A1yFTaREeWWBQrVFXqd1w."&gt;Programming for Everybody …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Prior to learning Python, I had no programming experience. I worked in marketing for a book publisher and did not perform well at my job. It was not a good fit. They eventually fired me. As my previous job unraveled, I discovered Python and the Coursera course, &lt;a class="reference external" href="https://www.coursera.org/learn/python?utm_medium=email&amp;amp;utm_source=other&amp;amp;utm_campaign=opencourse.course_complete.python.%7Eopencourse.course_complete.7A1yFTaREeWWBQrVFXqd1w."&gt;Programming for Everybody (Getting Started with Python)&lt;/a&gt;. Fortunately, that course jump-started me onto a path of learning and reading each day. My aim was to make my own website, a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/05/25/askkevinparker-com-my-first-web-app-other-notes/"&gt;goal that I accomplished&lt;/a&gt;. I needed to know how the sausage was made.&lt;/p&gt;
&lt;p&gt;Looking back from 2020, I can safely say Python changed my life. Because of it, I now have a fulfilling marketingdata-oriented career. I'm also grateful for the financial stability that came with it. I love to learn about the language and continue to improve my abilities to solve problems with new tools, not only Python.&lt;/p&gt;
&lt;p&gt;Below are pieces of wisdom picked up from my experiences. They are the result of many hours of study, reading, mistakes, luck, toil and eventual glory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These are thought-provoking adages and guidelines, not absolute truths in all cases.&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Developing a habit of learning pays off over time, no matter what the subject is. It is an investment in yourself that compounds.&lt;/li&gt;
&lt;li&gt;Follow your own curiosity. It's less important to compare what you know to others. Compare what you know today to what you knew yesterday. Don't worry about &lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;how long it takes to learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Watch educational or technical conference talks on sites like &lt;a class="reference external" href="https://www.youtube.com/channel/UCMjMBMGt0WJQLeluw6qNJuA/videos"&gt;YouTube&lt;/a&gt; or InfoQ. &lt;a class="reference external" href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Rich Hickey,&lt;/a&gt; &lt;a class="reference external" href="https://rhodesmill.org/brandon/talks/#selenium-at-scale"&gt;Brandon Rhodes&lt;/a&gt; and &lt;a class="reference external" href="https://www.youtube.com/watch?v=lyDLAutA88s"&gt;David Beazley&lt;/a&gt; are some of my favorite speakers. Watch talks from all languages, not just Python. Often the concepts apply to any programming language.&lt;/li&gt;
&lt;li&gt;Use an RSS reader. Anytime you find a good blog, subscribe by RSS or email to get new posts. I use the &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en"&gt;Feeder Chrome extension&lt;/a&gt;\Android app.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; contains a lot of wisdom. I like the concept of &lt;tt class="docutils literal"&gt;Explicit is better than implicit.&lt;/tt&gt; This implies declaring your actions in written or oral fashion, providing additional context. Consider favoring easier to read solutions over clever one-liners. For example:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List comprehensions&lt;/a&gt; are useful and &amp;quot;pythonic&amp;quot;, use them! But sometimes it's easier to use a for loop to hash out an idea. (Contrarily, avoiding the &lt;a class="reference external" href="https://www.youtube.com/watch?v=W-lZttZhsUY"&gt;Initialize Then Modify&lt;/a&gt; pattern benefits those comfortable with comprehensions.)&lt;/li&gt;
&lt;li&gt;Explicitly using &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt; versus positional arguments is another way to make your code easier to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can you explain the solution simply? If not, try to clarify your understanding or maybe there's a simpler way. In Python, there are often several ways to accomplish the same goal. But keep in mind the Zen of Python: &lt;tt class="docutils literal"&gt;There should be &lt;span class="pre"&gt;one--&lt;/span&gt; and preferably only one &lt;span class="pre"&gt;--obvious&lt;/span&gt; way to do it. Although that way may not be obvious at first unless you're Dutch.&lt;/tt&gt; Look for the obvious way. An example of this is &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting.&lt;/a&gt; I've heard f-strings are the hot new way to do this now.&lt;/li&gt;
&lt;li&gt;Don't be afraid to change course if things don't feel right. Ask yourself while coding, &amp;quot;Does this feel efficient?&amp;quot; Recently I was trying to format a json string so I approached it like I had in the past, by &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;exporting the request from Postman and formatting the json string&lt;/a&gt; with python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html?highlight=format#format"&gt;format() built-in&lt;/a&gt;. But this time, the curly braces were confusing me, I was struggling and it wasn't working. I googled and around and saw python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html?highlight=json#module-json"&gt;json module&lt;/a&gt; and &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html"&gt;df.to_json()&lt;/a&gt; in pandas. They were a much easier and better-looking solution. But it still wasn't working. Finally, i used the Postman approach and f-strings to format a successful payload. The third try worked! F-strings are super nice and clean.&lt;/li&gt;
&lt;li&gt;If you're stuck, there's probably a free online course or blog post that explains whatever is confusing you. Use the Googles. When in doubt, Google the error message.&lt;/li&gt;
&lt;li&gt;Begin your project by writing a list of requirements. This often leads to good questions and cases that may need to be addressed. The book &lt;a class="reference external" href="https://www.amazon.com/gp/product/0735619670/"&gt;Code Complete 2&lt;/a&gt; covers establishing project requirements in great detail, along with the other stages in the life-cycle of a software project. I'm really enjoying this book and highly recommend it.&lt;/li&gt;
&lt;li&gt;Names are really important. Take time to think about a good name for your variables and functions. Also, name your scripts well. I name my scripts using &lt;a class="reference external" href="https://examples.yourdictionary.com/action-verb-examples.html"&gt;action verbs&lt;/a&gt;. For example, my script that organizes accumulated files on my desktop into folders is named &lt;tt class="docutils literal"&gt;clean_desktop_files.py&lt;/tt&gt;. When I see this script months later, its name reminds me the action the script is performing. I believe it's better to err on the side of longer, more descriptive names for variables and functions. It makes code easier to understand. But there is a trade-off with length to keep in check.&lt;/li&gt;
&lt;li&gt;Moving a block of code into a function can abstract away repetitive code and increase its readability.&lt;/li&gt;
&lt;li&gt;Each function should do one thing only. Follow the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single-responsibility principle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Train yourself to think in &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html"&gt;data structure&lt;/a&gt;&amp;nbsp;conversions. The Python dictionary is very useful and can be converted to and from lists, tuples, sets, etc. I often find it more efficient to convert to a different structure to efficiently organize it. Usually I am googling things like &amp;quot;convert class object to python dictionary&amp;quot; because dictionaries are easy to work with or convert to other structures. The &lt;tt class="docutils literal"&gt;vars()&lt;/tt&gt; built-in is great for converting objects to a dictionary. For example, once you have a dictionary, you might be able to solve your problem by &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.from_dict.html"&gt;converting it to a dataframe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use only the data you need. Reading in just the essential data helps avoid memory issues and hanging programs. In &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;pandas&lt;/a&gt;, the &lt;tt class="docutils literal"&gt;usecols&lt;/tt&gt; argument in &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"&gt;pd.read_csv()&lt;/a&gt; is great for this. This creates a dataframe with 2 columns:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emails.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usecols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="15"&gt;
&lt;li&gt;Assume that if something is broken, it's because of something you've done. Start from the assumption that your code contains the bug and work outward by eliminating possibilities. Avoid jumping to quick conclusions. Instead, carefully consider possible reasons for why something is happening. Many times, I find my 2nd or 3rd hypothesis is actually true.&lt;/li&gt;
&lt;li&gt;There will be times when you'll look at someone else's choices and wonder why they did things a certain way. Consider the possibility that they know more than you in this domain.&lt;/li&gt;
&lt;li&gt;Beware of sequencing errors. Are your tasks, scripts or functions executing in an efficient order to reach your end goal? Look to unblock bottlenecks and correct chronological mistakes in your processes.&lt;/li&gt;
&lt;li&gt;Before you send that email asking for help, go back and take another look. There's also no shame in asking for help. Be sure you proofread your email before sending.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status code 200&lt;/a&gt; does not guarantee your API request was successful. You may want to write a test to confirm success that doesn't rely on response status codes.&lt;/li&gt;
&lt;li&gt;Unfortunately, &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/05/a-collection-of-software-testing-opinions-for-python-and-beyond/"&gt;testing&lt;/a&gt; gets shunned sometimes. Make it a priority. I enjoy writing &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;pytest tests&lt;/a&gt; more than most other code. Why? Because tests confirm my scripts are working to some degree, detect bugs and provide a refactoring safety net.&lt;/li&gt;
&lt;li&gt;Refactoring your code is a crucial step in making it better. Coming back to my code after a few weeks, months or years brings clarity, experience and a new perspective. It feels good to improve the quality of my old work.&lt;/li&gt;
&lt;li&gt;Consolidate your tasks. Bundling things can save you a bundle of time! Identify redundant patterns and remove if possible. Observe yourself while working. Any repetitive manual process can probably be automated away. Recently, I figured out how to use a &lt;a class="reference external" href="https://www.windowscentral.com/how-create-and-run-batch-file-windows-10"&gt;Windows batch file&lt;/a&gt; to instantly activate my Python &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;. It took me a few years of tediously pasting the &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; commands into command prompt every day to realize. Now it's a snap.&lt;/li&gt;
&lt;li&gt;Stack Overflow is a useful resource. But the top answers may be outdated. Check the other less popular answers sometimes. Or...&lt;/li&gt;
&lt;li&gt;Read the documentation! An updated or more elegant solution might be there. I recently found &lt;tt class="docutils literal"&gt;os.makedirs(path, exist_ok=True)&lt;/tt&gt; in the &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.makedirs"&gt;os docs&lt;/a&gt;. I didn't know about the &lt;tt class="docutils literal"&gt;exist_ok&lt;/tt&gt; argument. I was creating folders with a more complicated alternative from &lt;a class="reference external" href="https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory"&gt;Stack Overflow&lt;/a&gt; for years. I use this way all the time now. In the same vein, if you need the local system username, the Python docs state &lt;a class="reference external" href="https://docs.python.org/3.8/library/getpass.html"&gt;getpass.getuser()&lt;/a&gt; is preferred over os.getlogin().&lt;/li&gt;
&lt;li&gt;Write documentation explaining how to use your projects. Even if you can only muster a quick &lt;a class="reference external" href="https://en.wikipedia.org/wiki/README"&gt;README&lt;/a&gt; text file, that's better than nothing. Within your code, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt; are a nice addition. I have yet to use &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;, but it is a popular choice for generating documentation.&lt;/li&gt;
&lt;li&gt;Teaching others feels good and solidifies your knowledge. Writing and pair programming are great ways to improve your understanding and pass your skills along to other people. While we're on the subject of writing...&lt;/li&gt;
&lt;li&gt;Write everything down! Your head is not good at storing information in memory. Computers are. This frees your mind to come up with new ideas rather than expending energy to remember what you've already done. It also helps you plan. I use a Notepad text file to keep a running to-do list. You could also use services like Trello or Microsoft Planner. While writing code, use comments and docstrings conservatively for quick notes, clarifications or reminders. The important thing is to write it down somewhere.&lt;/li&gt;
&lt;li&gt;When editing your writing, continually ask yourself, &amp;quot;Do I need this word or phrase?&amp;quot; for every word you write.&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&amp;quot;Brevity is the soul of wit.&amp;quot; - William Shakespeare (Hamlet)&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="29"&gt;
&lt;li&gt;Draw inspiration from culture, nature and professional disciplines outside of your own. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/01/28/lessons-learned-from-lost-in-space-on-netflix/"&gt;Insights can be mined from anything&lt;/a&gt;. Don't dismiss a situation as mundane without first scanning for knowledge nuggets and gems.&lt;/li&gt;
&lt;li&gt;Better solutions often come to me after gaining time and experience with a problem. Building software is an iterative cycle of adjustment towards consistently fulfilling the needs of those it serves in 100% of cases. In a perfect world, you'd never have bugs. But edge cases tend to pop up in ways you didn't think of when you first wrote a solution. There will also be projects where requirements or business rules change. Consider that possibility when you are designing your solution.&lt;/li&gt;
&lt;li&gt;It's possible to find a job that you're excited about and genuinely enjoy the work.&lt;/li&gt;
&lt;li&gt;Respect your craft, whether it's coding or another profession. A skilled carpenter needs precision, practice and focus to make something beautiful. Approach your craft with the same mindset and pride in making your best art.&lt;/li&gt;
&lt;li&gt;We all have holes in our knowledge. Be receptive to other ways of thinking. The best way to learn is from other humans. Everyone has different backgrounds and experiences. I have never used object oriented programming, classes or certain command line tools like &lt;a class="reference external" href="https://www.howtogeek.com/336775/how-to-enable-and-use-windows-10s-built-in-ssh-commands/"&gt;ssh&lt;/a&gt;. I have a loose understanding of these things but have not yet applied them to my projects. Working with paths (os and pathlib) still gives me fits sometimes. These are knowledge gaps that I want to fill in. Additionally, we don't know what we don't know. Try to illuminate the fog of your unknown.&lt;/li&gt;
&lt;li&gt;Choosing to dedicate to learning Python is among the best decisions I've made.&lt;/li&gt;
&lt;li&gt;Attitude is more important than intelligence. Anyone can learn to program, play guitar or fly an airplane. You can become an adept problem solver. Acquire an attitude to support your determination and persistence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_2981&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;959&amp;quot;]&lt;a class="reference external image-reference" href="https://www.youtube.com/watch?v=I56oFTm9UlE"&gt;&lt;img alt="brandonrhodes" class="alignnone size-full wp-image-2981" src="https://pythonmarketer.files.wordpress.com/2020/04/brandonrhodes.png" style="width: 959px; height: 541px;" /&gt;&lt;/a&gt; Brandon Rhodes: Stopping to Sharpen Your Tools - PyWaw Summit 2015[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'll leave you with the 4 P's and 4 C's from my&lt;/strong&gt; &lt;a class="reference external" href="https://www.youtube.com/watch?v=SfQYA0JQWkA"&gt;Programming for Everybody Coursera course graduation ceremony&lt;/a&gt;&lt;strong&gt;. Cultivating these principles will guide you to growing your education and finding a positive course in life:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;4 P’s:&lt;/strong&gt; Passion, Purpose, Persistence, Playfulness&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 C’s:&lt;/strong&gt; Choice, Commitment, Connection, Completion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you for reading and I hope this post helps you on your own educational journey.&lt;/p&gt;
</content><category term="coding, education, Marketing, programming, python, wisdom"></category><category term="advice"></category><category term="learning"></category><category term="problem solving"></category><category term="writing"></category></entry><entry><title>Easy Tune-ups For Your Windows Computer</title><link href="https://lofipython.com/easy-wins-for-your-windows-computer.html" rel="alternate"></link><published>2020-03-22T22:59:00-05:00</published><updated>2020-03-22T22:59:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-03-22:/easy-wins-for-your-windows-computer.html</id><summary type="html">&lt;div class="section" id="this-post-covers-6-handy-windows-tools"&gt;
&lt;h2&gt;This post covers 6 handy Windows tools:&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Windows Experience Index&lt;/li&gt;
&lt;li&gt;Disk Cleanup&lt;/li&gt;
&lt;li&gt;Windows Update Troubleshooter&lt;/li&gt;
&lt;li&gt;Windows Update&lt;/li&gt;
&lt;li&gt;Microsoft Support and Recovery Assistant&lt;/li&gt;
&lt;li&gt;Disk Defragmenter&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-get-your-baseline-windows-experience-index-score"&gt;
&lt;h2&gt;&lt;strong&gt;First, get your baseline Windows Experience Index score.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;These metrics are a way to monitor your system's performance over time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to &amp;quot;Control PanelSystem and SecuritySystem …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="this-post-covers-6-handy-windows-tools"&gt;
&lt;h2&gt;This post covers 6 handy Windows tools:&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Windows Experience Index&lt;/li&gt;
&lt;li&gt;Disk Cleanup&lt;/li&gt;
&lt;li&gt;Windows Update Troubleshooter&lt;/li&gt;
&lt;li&gt;Windows Update&lt;/li&gt;
&lt;li&gt;Microsoft Support and Recovery Assistant&lt;/li&gt;
&lt;li&gt;Disk Defragmenter&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-get-your-baseline-windows-experience-index-score"&gt;
&lt;h2&gt;&lt;strong&gt;First, get your baseline Windows Experience Index score.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;These metrics are a way to monitor your system's performance over time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to &amp;quot;Control PanelSystem and SecuritySystem&amp;quot;&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Your Windows Experience Index needs to be refreshed.&amp;quot;&lt;/li&gt;
&lt;li&gt;Note the metrics you see and the last updated date. If you've never refreshed them, these are likely your computer's factory scores.&lt;/li&gt;
&lt;li&gt;Then click &amp;quot;Refresh Now&amp;quot; and note the results. These are your computer's current scores.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="check_Windows_Experience_Index" class="alignnone size-full wp-image-2780" src="http://pythonmarketer.files.wordpress.com/2020/03/f6e0a-check_windows_experience_index-e1584936945758.jpg" style="width: 729px; height: 501px;" /&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="run-disk-cleanup"&gt;
&lt;h2&gt;&lt;strong&gt;Run Disk Cleanup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The name says it all. Go to the Start menu and search 'Disk Cleanup'. Running this freed up 40 GB of C: drive space for me.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="install-os-patches-and-software-updates-with-windows-update"&gt;
&lt;h2&gt;&lt;strong&gt;Install OS patches and software updates with Windows Update.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First, troubleshoot Windows Update to fix any errors.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="tdhotingtrpot2" class="wp-image-2790 alignright" src="http://pythonmarketer.files.wordpress.com/2020/03/83836-tdhotingtrpot2-e1584941263675.jpg" style="width: 357px; height: 274px;" /&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://support.microsoft.com/en-us/help/4027322/windows-update-troubleshooter"&gt;Windows Update Troubleshooter&lt;/a&gt;is supported by Windows and may help&amp;nbsp;with updates that fail. I downloaded the troubleshooter for Windows Update and BITS, the Windows &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal"&gt;Background Intelligence Transfer System.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The troubleshooter analyzes Windows Update and tries to fix the errors it finds. After running, it provides a status update on the issues it finds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run Windows Update to upgrade your software.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows Update usually updates your software reliably. However, some updates may fail or are not triggered automatically. Installing updates, especially security patches for your operating system is typically a good idea.In my case, several Windows 7 OS security patches had not auto-updated, some from 6 months ago.&lt;/p&gt;
&lt;p&gt;Checking for Software Updates&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go to your start menu and search for 'Windows Update'.&lt;/li&gt;
&lt;li&gt;I clicked 'Check online for updates from Windows Update' also.&lt;/li&gt;
&lt;li&gt;When you restart your computer, use a power cord for your laptop.&lt;/li&gt;
&lt;li&gt;I found more new updates twice after installing new updates and restarting my system.&amp;nbsp; Some updates are required before another update may be installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="microsoft-support-and-recovery-assistant"&gt;
&lt;h2&gt;Microsoft Support and Recovery Assistant&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Got Microsoft Errors?&lt;/strong&gt; Check out the &lt;a class="reference external" href="https://support.office.com/en-us/article/about-the-microsoft-support-and-recovery-assistant-e90bb691-c2a7-4697-a94f-88836856c72f"&gt;Microsoft Support and Recovery Assistant&lt;/a&gt;. It may help you if you're having trouble with Microsoft Office, Skype or any other Windows&amp;nbsp;tools.&lt;/p&gt;
&lt;img alt="options_recovery" class="wp-image-3225 alignnone" src="http://pythonmarketer.files.wordpress.com/2020/03/1ea73-options_recovery-e1587747001750.jpg" style="width: 465px; height: 350px;" /&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="finally-defragment-your-c-drive"&gt;
&lt;h2&gt;&lt;strong&gt;Finally, defragment your C: drive.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Defragmentation is like spring cleaning for your computer's hard disk. It optimizes your drive's data for more efficient computing and frees up space for other activities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to your start menu and search for 'Disk Defragmenter'.&lt;/li&gt;
&lt;li&gt;Click 'Analyze disk' to check your C: Drive's fragmented rate.&lt;/li&gt;
&lt;li&gt;If the fragmented rate is above 10%, &lt;a class="reference external" href="https://support.microsoft.com/en-us/help/17126/windows-7-improve-performance-defragmenting-hard-disk"&gt;Windows recommends&lt;/a&gt; to defragment your C: Drive. As you can see below, mine had a whopping 48% fragmentation rate. 😨 My poor computer had never been defragged in 2.5 years of use.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="defragment_results" class="alignnone size-full wp-image-2740" src="http://pythonmarketer.files.wordpress.com/2020/03/699fd-defragment_results-e1585007505765.jpg" style="width: 658px; height: 529px;" /&gt;
&lt;p&gt;&lt;strong&gt;46% Less Fragmented Disk Space After Two Defrags&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running the defragmenter once reduced my drive's fragmentation from 48% to 32%. Re-running the defragmenter dropped my C: drive to a 2% fragmented rate. That's more like it. 🤓&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="ng-scope docutils container"&gt;
Fragmentation makes your hard disk do extra work that can slow down your computer. Removable storage devices such as USB flash drives can also become fragmented. Disk Defragmenter in Windows rearranges fragmented data so your disks and drives can work more efficiently.&lt;/div&gt;
&lt;div class="docutils container"&gt;
Source: &lt;a class="reference external" href="https://support.microsoft.com/en-us/help/17126/windows-7-improve-performance-defragmenting-hard-disk"&gt;Ways to Improve Your Computer's Performance&lt;/a&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="my-windows-7-system-improvement-results"&gt;
&lt;h2&gt;&lt;strong&gt;My Windows 7 System Improvement Results&lt;/strong&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Raised Windows Experience Index base sub-score from 4.9 to 5.0/7.9.&lt;/li&gt;
&lt;li&gt;Added 40 GB of hard drive space thanks to Disk Cleanup.&lt;/li&gt;
&lt;li&gt;Patched operating system security vulnerabilities and all software is up to date.&lt;/li&gt;
&lt;li&gt;Fixed any misbehaving Windows products.&lt;/li&gt;
&lt;li&gt;Decreased fragmented drive space from 48% to 2%. Windows recommends keeping it under 10%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On paper, that looks great. Hopefully it means less spinning lag wheels and programs not responding when you really shoulda saved that document...&amp;nbsp; &lt;a class="reference external" href="https://www.youtube.com/watch?v=e2cjVhUrmII"&gt;We'll see&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="performance, Windows"></category><category term="maintenance"></category><category term="operating system"></category><category term="windows update"></category></entry><entry><title>Automating pytest on Windows with a .bat file, Python, Task Scheduler and Box</title><link href="https://lofipython.com/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box.html" rel="alternate"></link><published>2020-03-21T01:47:00-05:00</published><updated>2020-03-21T01:47:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-03-21:/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Automatic pytest Testing and Failure Alert Monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is my solution to replace manually running pytest each day in command prompt. I want to automate running pytest every day, test if my automated python scripts ran smoothly and get notified if any tests fail.&lt;/p&gt;
&lt;p&gt;Installing &lt;a class="reference external" href="https://docs.pytest.org/en/latest/getting-started.html"&gt;pytest&lt;/a&gt; , a python testing library …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Automatic pytest Testing and Failure Alert Monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is my solution to replace manually running pytest each day in command prompt. I want to automate running pytest every day, test if my automated python scripts ran smoothly and get notified if any tests fail.&lt;/p&gt;
&lt;p&gt;Installing &lt;a class="reference external" href="https://docs.pytest.org/en/latest/getting-started.html"&gt;pytest&lt;/a&gt; , a python testing library:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pytest
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;A Few Words on pytest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is a unit test framework in python. pytest expects you to write each test as a self-contained function. One python file can contain many different test functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Writing a Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's use &lt;strong&gt;test_file_date.py&lt;/strong&gt; as our test, which uses the &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html"&gt;glob&lt;/a&gt; module and &lt;a class="reference external" href="https://docs.python.org/2/library/os.path.html#os.path.getmtime"&gt;os.getmtime&lt;/a&gt; to get the csv with the most recent modification dateon my desktop. Then it tests if that date is today, in my case, for an expected daily file drop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_csv_date_equals_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The match format is for a Windows path with Unix style pattern matching.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
     &lt;span class="c1"&gt;# specify csv extension and folder&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/Desktop/*.csv&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# get most recent file&lt;/span&gt;
    &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;csv_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;csv_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;csv_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Here's the pytest text output when the test is passing:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
============================= test session starts =============================
platform win32 -- Python 3.8.1, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: C:\
collected 1 item

..\..\Users\erick\Desktop\test_file_date.py . [ 14%]
                                                                   [100%]

============================== 1 passed in 0.28s ==============================
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Creating a Task with Windows Task Scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you haven't used python with Windows Task Scheduler before, &lt;a class="reference external" href="https://lofipython.com/automated-python-with-windows-task-scheduler/"&gt;my previous post&lt;/a&gt; on creating a task may help you. We'll create two of them for our testing system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding Your Task Scheduler Program: a Windows .bat file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add your username to the text below and adjust the paths to your system. Then save a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Batch_file"&gt;Windows .bat file&lt;/a&gt; with this text, which points to your pytest.exe file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /c &amp;quot;C:\Users\your_username\Desktop\sandbox\Scripts\pytest.exe --capture=sys&amp;quot; ^
C:\Users\your_username\Desktop\test_file_date.py &amp;gt; C:\Users\your_username\Desktop\sandbox\Test_Results\Test_Results.txt
&lt;/pre&gt;
&lt;p&gt;This example is referencing an .exe within a hypothetical &amp;quot;sandbox&amp;quot; virtual environment, located on my Desktop. If you have a virtualenv or venv, check the Scripts folder. (Bin on Linux.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breaking this out, there are five .bat files parts:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /c &amp;quot;C:\Users\your_username\Desktop\sandbox\Scripts\pytest.exe --capture=sys&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Windows' &lt;a class="reference external" href="https://ss64.com/nt/cmd.html"&gt;cmd command&lt;/a&gt; takes a program, so we're passing pytest. &lt;a class="reference external" href="https://docs.pytest.org/en/latest/capture.html"&gt;The --capture=sys argument&lt;/a&gt; tells pytest to capture the test results. &lt;strong&gt;Note:&lt;/strong&gt; switching cmd /c to cmd /k forces the terminal to stay open when you are testing your bat file. You can double-click your .bat file to test run it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
^
&lt;/pre&gt;
&lt;p&gt;circumflex represents a line continuation in Windows batch files for better readability&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\test_file_date.py
&lt;/pre&gt;
&lt;p&gt;Next we're passing our python file as an argument to pytest, testing our file's modified date matches today's date.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This is a Windows redirect. It redirects the pytest output from sys to a text file, which is the last argument in our .bat file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\sandbox\Test_Results\Test_Results.txt
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Browse to select your .bat file for your Windows Task Scheduler task:&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="bat_task" class="alignnone size-full wp-image-2669" src="https://pythonmarketer.files.wordpress.com/2020/03/bat_task.jpg" style="width: 1032px; height: 590px;" /&gt;
&lt;p&gt;&lt;strong&gt;Reading the Tests and Triggering Alerts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Passing tests signal your scripts are running successfully. When things don't work, email alerts of the failure help us respond quickly.&lt;/p&gt;
&lt;p&gt;Let's set another task scheduler job to run &lt;strong&gt;read_test_results.py,&lt;/strong&gt; to run a few minutes after the first job each day. See this &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;example of running Python with Task Scheduler&lt;/a&gt; if you haven't triggered a python script from Task Scheduler before.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Automate pytest with Windows Task Scheduler. Use Task Scheduler run a batch file.&lt;/span&gt;
&lt;span class="sd"&gt;The batch file runs pytest and captures our pytest function results to sys.&lt;/span&gt;
&lt;span class="sd"&gt;If a text file contains a failure or error, write the test contents into a folder.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Automated_Testing_Alerts.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;-%b-%y %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Checking for failed tests...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/test_results/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;test_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.txt&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;txt_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;txt_file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FAILURES&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/send_failure_alert/&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;txt_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_Failed_Results_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.txt&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No failed tests found in file:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Setting up Email Alert Notifications on a Box Folder&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The above script checks the test results and creates a file with any failed tests in a different folder. I &lt;a class="reference external" href="https://support.box.com/hc/en-us/articles/360044194073-Manage-Notifications-for-Enterprise-Users"&gt;edited the folder's settings&lt;/a&gt; to email me when a new file is added, thanks to Box notifications. We use &lt;a class="reference external" href="http://www.box.com"&gt;Box&lt;/a&gt; for secure file sharing at my day current day job.&lt;/p&gt;
&lt;p&gt;Alternatively for those without Box, you could use 'ole trusty &lt;a class="reference external" href="https://docs.python.org/3/library/smtplib.html"&gt;smtplib&lt;/a&gt; to send the failure alerts with python. I chose the easier, ready to go option. Remember, &amp;quot;&lt;a class="reference external" href="https://zen-of-python.info/simple-is-better-than-complex.html"&gt;Simple is better than complex&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;Or the &lt;a class="reference external" href="https://github.com/mhammond/pywin32"&gt;pywin32 module&lt;/a&gt; has an interface to Outlook that is very handy. For an example of sending a Windows Outlook email, check the very end of &lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2020/05/06/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection/"&gt;this post I wrote on &amp;quot;Scripting Windows Like a Pro&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We now have an automated testing system with email monitoring alerts if our csv file date test fails, thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Windows Task Scheduler (two tasks running each day in succession)&lt;/li&gt;
&lt;li&gt;python/pytest&lt;/li&gt;
&lt;li&gt;a Windows .bat file&lt;/li&gt;
&lt;li&gt;Box (or smtplib or pywin32) email alerts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In Summation&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The first task runs a .bat file to run pytest and create a text file with daily automation test results.&lt;/li&gt;
&lt;li&gt;The second task runs a python file. Setting in motion:&lt;/li&gt;
&lt;li&gt;Checking the test result text files, looking for failed tests&lt;/li&gt;
&lt;li&gt;Creating a text file with any failing tests in a Box folder, if found&lt;/li&gt;
&lt;li&gt;Then Box emails me if any test fails.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Final Thoughts on the .bat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was the first time I successfully deployed a Windows batch file. It took me many tries and googling to properly format of the .bat file. They are worth understanding and seem to open up many possibilities on Windows. In this case it was a &amp;quot;glue&amp;quot; piece that allowed me to accomplish my goal, automated testing and alerts for my python scripts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Life is in the journey.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What we learn along the way shapes us. Learning to use these resources together has been a giant step towards writing more reliable python programs. It has improved my knowledge of Windows OS scripting, which can sometimes be a handy substitute or complement to python. Now, time to write more tests. Thanks for reading!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="_wp_link_placeholder"&gt;pytest plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest-csv/"&gt;pytest-csv&lt;/a&gt;: write test results to a csv with this plugin&lt;/p&gt;
&lt;p&gt;I wrote another post compiling peoples' thoughts on testing &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/05/a-collection-of-software-testing-opinions-for-python-and-beyond/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="automation, programming, software testing, Windows"></category><category term="coding"></category><category term="pytest"></category><category term="python"></category><category term="software development"></category></entry><entry><title>Lessons Learned from "Lost in Space" on Netflix</title><link href="https://lofipython.com/lessons-learned-from-lost-in-space-on-netflix.html" rel="alternate"></link><published>2020-01-28T06:39:00-06:00</published><updated>2020-01-28T06:39:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-01-28:/lessons-learned-from-lost-in-space-on-netflix.html</id><summary type="html">&lt;p&gt;Being a developer has similarities to the life of a family surviving in
space. Sure, the stakes are lower when writing code versus being chased
by alien life forms, but the core idea is the same. One is faced with a
problem and it must be solved, with varying degrees …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Being a developer has similarities to the life of a family surviving in
space. Sure, the stakes are lower when writing code versus being chased
by alien life forms, but the core idea is the same. One is faced with a
problem and it must be solved, with varying degrees of consequences for
failure.&lt;/p&gt;
&lt;p&gt;I enjoyed watching the Robinsons solve problem after problem to stay
alive in alien worlds and the vacuum of space. I believe you can learn
from anything. &lt;strong&gt;So in that spirit, here are some lessons from the show
for us problem solving humans:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;img alt="tayrob" class="size-full wp-image-2271 alignright" src="https://pythonmarketer.files.wordpress.com/2020/01/tayrob.jpeg" style="width: 300px; height: 168px;" /&gt;Don't panic when you're in trouble. A cool head is vitally
important to your survival chances when you're in a bind. Judy
demonstrates this quality in evading the raptor-like creatures
chasing her.&lt;/li&gt;
&lt;li&gt;Problems solved often lead to more problems to solve. We would be
wise to anticipate what might happen if we do succeed.&lt;/li&gt;
&lt;li&gt;Be cautious when venturing into unfamiliar territories. You never
know what could be there to trip you up. Which leads me to my next
point...&lt;/li&gt;
&lt;li&gt;Respect nature's ability to f*ck you up. The environment you're in,
other organisms, and bacteria can wreak havoc. Despite our perceived
self-importance, nature is our god. We are but specks in its
creation. Cases in point: the metal-dissolving virus that destroys
Judy's chariot and the poisonous algae Don accidentally discovers
that immobilizes him.&lt;/li&gt;
&lt;li&gt;Know when to go for broke, or when to re-group and wait to make your
next move. The Robinsons spent 7 months stocking up at their new
beach home. Until they suffered a setback...&lt;img alt="beach" class="alignnone size-full wp-image-2279" src="https://pythonmarketer.files.wordpress.com/2020/01/beach.jpg" style="width: 2155px; height: 1181px;" /&gt;&lt;/li&gt;
&lt;li&gt;Adapt your plan when new information becomes available or unexpected
events happen. They will happen.&lt;/li&gt;
&lt;li&gt;Think of unconventional ways to use the resources you do have to fix
the problem at hand. Who would have thought a spaceship could be
retrofitted into a boat?&lt;/li&gt;
&lt;li&gt;Things often work 83% of the way you expect them to work. Sometimes
that's enough to move on. Or maybe it buys you enough time to figure
out your next move. The electrical field stalled the fleet of robots
long enough for the Robinsons to realize the children should &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lord_of_the_Flies"&gt;Lord
of the Flies&lt;/a&gt;&amp;quot;
their way to Alpha Centauri.&lt;/li&gt;
&lt;li&gt;Question your own motivations, and be open to changing course if you
are wrong. Adler realized he should help Will save Scarecrow's life
after first trying to stop him. Scarecrow then exhibits this same
quality when he turns against his robot comrades to save the
children.&lt;/li&gt;
&lt;li&gt;Ethics and morals may conflict with each other. Was Maureen Robinson
wrong for fraudulently saving her son Will? Ethically, yes. But
morally, as a mother saving her son? No.&lt;/li&gt;
&lt;li&gt;Make time for your family and friends. Maureen was so busy saving the
family that she didn't read Penny's book. Stop and smell the roses
every once in a while. Or read your daughter's damn book.&lt;/li&gt;
&lt;li&gt;Humans are capable of both great compassion and horrible cruelty.
We're running from alien robots, but sometimes we're the monsters?
Cough cough Smith and Hastings... cough. Excuse me. (smh 🤦)&lt;/li&gt;
&lt;li&gt;&lt;img alt="robot" class="wp-image-2282 alignright" src="https://pythonmarketer.files.wordpress.com/2020/01/robot-1.jpeg" style="width: 358px; height: 179px;" /&gt;I'll spare you any parallels about modern artificial
intelligence. The best, most grounded definition I've heard of modern
AI is &amp;quot;&lt;a class="reference external" href="https://twitter.com/fchollet/status/1214392496375025664?lang=en"&gt;automated cognition&lt;/a&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;Self-sacrifice is an honorable death to save the lives of others, but
can be frustrating to watch on TV. &amp;quot;Did you really have to kill
yourself there?&amp;quot; - me, several times during the show 😆&lt;/li&gt;
&lt;/ol&gt;
</content><category term="entertainment, life, space"></category><category term="Lost in Space"></category><category term="Netflix"></category><category term="problem solving"></category></entry><entry><title>"Git" The Basics: A Version Control Cheat Sheet</title><link href="https://lofipython.com/git-the-basics-a-git-version-control-cheat-sheet.html" rel="alternate"></link><published>2020-01-25T05:06:00-06:00</published><updated>2020-01-25T05:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-01-25:/git-the-basics-a-git-version-control-cheat-sheet.html</id><summary type="html">&lt;p&gt;I am finally starting to understand &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git"&gt;git version control!&lt;/a&gt; It makes developing a project on different computers easy. Some of these notes were picked up from the super informative &lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt; by Jake VanderPlas, author of the &lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/"&gt;Python Data Science Handbook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, &lt;a class="reference external" href="https://git-scm.com/downloads"&gt;go here&lt;/a&gt;, download …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am finally starting to understand &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git"&gt;git version control!&lt;/a&gt; It makes developing a project on different computers easy. Some of these notes were picked up from the super informative &lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt; by Jake VanderPlas, author of the &lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/"&gt;Python Data Science Handbook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, &lt;a class="reference external" href="https://git-scm.com/downloads"&gt;go here&lt;/a&gt;, download and install git if you haven't yet. Alright, here are my go-to steps and commands for git:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beginning a New Project With Git&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create new repository on GitHub&lt;/li&gt;
&lt;li&gt;Add a README&lt;/li&gt;
&lt;li&gt;Add a Python gitignore&lt;/li&gt;
&lt;li&gt;Add a license (Jake V. used an MIT license)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Clone Any Repository from GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visit your new project, or any GitHub project, click the green &amp;quot;Clone or download&amp;quot; button and copy the link.&lt;/li&gt;
&lt;li&gt;In your terminal or command prompt, navigate to the directory where you want to clone your project.&lt;/li&gt;
&lt;li&gt;In terminal, enter: &lt;tt class="docutils literal"&gt;git clone PASTE_URL_HERE&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Now cd into your project folder.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Push Your Local Computer Changes to the Master Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's say you did some work on your computer and want to push the changes to GitHub. Enter these commands in terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git add .&lt;/span&gt;
&lt;span class="go"&gt;git commit -m &amp;quot;Add your commit note here&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;git push origin master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;*Above: &lt;tt class="docutils literal"&gt;git add .&lt;/tt&gt; = stage all files in project directory for master&lt;/p&gt;
&lt;p&gt;**Substitute &lt;tt class="docutils literal"&gt;git add path\to\file\here&lt;/tt&gt; to stage only a single file to add to your master repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fetch Changes From Master Branch to Your Local Computer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I like to update my local computer with any master branch changes before beginning work on it. Enter these commands in terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git fetch&lt;/span&gt;
&lt;span class="go"&gt;git pull origin master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Review Merge Conflicts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, your code may conflict with changes in the master branch. You'll find out if you try to push or pull changes and the auto-merge fails. Use &amp;quot;git status&amp;quot; to locate the files with the conflicts. Enter in your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Then &lt;a class="reference external" href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line"&gt;follow these instructions&lt;/a&gt; to review the merge conflicts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/conflicts.html"&gt;Resolving Conflicts - Virtualenv Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or maybe you want to discard any local changes, then merge:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git fetch&lt;/span&gt;
&lt;span class="go"&gt;git checkout&lt;/span&gt;
&lt;span class="go"&gt;git pull origin master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Recovering from a Corrupted Repository&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git fsck --full --no-dangling&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html#recovering-from-repository-corruption"&gt;Additional Reading&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1"&gt;CS Visualized: Useful Git Commands&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lanraccoon.com/2018/8-git-commands-i-use-everyday/"&gt;8 Git Commands I Use Every Day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://who-t.blogspot.com/2009/12/on-commit-messages.html"&gt;On Commit Messages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Git-Workflows"&gt;Pandas Library Git Workflows&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, command prompt, data analysis, git, programming, software"></category><category term="github"></category><category term="terminal"></category><category term="version control"></category></entry><entry><title>Comparing Text Editors on Ubuntu: Atom, Emacs, Sublime, Vim &amp; VS Code</title><link href="https://lofipython.com/comparing-text-editors-on-ubuntu-atom-emacs-sublime-vim-vs-code.html" rel="alternate"></link><published>2019-12-26T01:25:00-06:00</published><updated>2019-12-26T01:25:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-12-26:/comparing-text-editors-on-ubuntu-atom-emacs-sublime-vim-vs-code.html</id><summary type="html">&lt;p&gt;The text editor is a core tool for writing software. I've always used Atom. Lately, I've noticed my Atom text editor was bogging down on my Chromebook running Ubuntu 16.04. Keystrokes and mouse movements were lagging and slowing my coding down. I'm also getting low on disk space, which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The text editor is a core tool for writing software. I've always used Atom. Lately, I've noticed my Atom text editor was bogging down on my Chromebook running Ubuntu 16.04. Keystrokes and mouse movements were lagging and slowing my coding down. I'm also getting low on disk space, which may be a related issue.&lt;/p&gt;
&lt;p&gt;You'll want to choose a text editor based on how it suits your own needs. In this case, I want a light-weight, responsive editor with no lag. Bells and whistles are less important. I'm also looking to minimize disk space required.&lt;/p&gt;
&lt;p&gt;I decided to compare the &lt;a class="reference external" href="https://codeburst.io/a-beginners-guide-to-using-apt-get-commands-in-linux-ubuntu-d5f102a56fc4"&gt;apt installed&lt;/a&gt; package size of some popular editors.&amp;nbsp;First, I installed Atom, Emacs, Sublime, VS Code and Vim using the Ubuntu 16.04 terminal. You&amp;nbsp;could also consider using &lt;a class="reference external" href="https://docs.python.org/3/library/idle.html"&gt;IDLE, python's built-in text editor&lt;/a&gt; as an alternative that requires no additional software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Then I&lt;/strong&gt; &lt;a class="reference external" href="https://unix.stackexchange.com/questions/40442/which-installed-software-packages-use-the-most-disk-space-on-debian"&gt;found the below command&lt;/a&gt; &lt;strong&gt;to list all installed apt packages by package size on Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Here's the terminal output with relevant packages in Megabytes (including Firefox for comparative size):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
136    emacsen-common
366 vim-common
1071    vim-tiny
2400    vim
21648   emacs26
26870   vim-runtime
34033   sublime-text
70307   emacs26-common
193694  firefox
236965  code
607932  atom
&lt;/pre&gt;
&lt;p&gt;Atom is by far the largest package I downloaded. It is nearly three times the size of VS Code, my second largest package. The next largest was my web browser, Firefox. Most of the other packages I downloaded were considerably smaller.&lt;/p&gt;
&lt;blockquote&gt;
Side note: I also found out Ubuntu 16.04 ships with a stripped down version of Vim called &lt;a class="reference external" href="https://askubuntu.com/questions/104138/what-features-does-vim-tiny-have"&gt;vim-tiny&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Total Installed Package Sizes in Megabytes (Smallest to Largest)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of these editors have multiple packages they are dependent on.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="36%" /&gt;
&lt;col width="48%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Text Editor&lt;/td&gt;
&lt;td&gt;Total Installed Packages Size&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Packages Installed&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;29,636 MB&lt;/td&gt;
&lt;td&gt;vim, vim-common, vim-runtime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Sublime&lt;/td&gt;
&lt;td&gt;34,033 MB&lt;/td&gt;
&lt;td&gt;sublime-text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;91,955 MB&lt;/td&gt;
&lt;td&gt;emacs26-common, emacs26, emacsen-common&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VS Code&lt;/td&gt;
&lt;td&gt;236,965 MB&lt;/td&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;607,932 MB&lt;/td&gt;
&lt;td&gt;atom&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Results: Vim and Sublime win for smallest installed package size.&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Vim is the lightest-weight package of these 5 popular text editors, with Sublime not far behind. Emacs is comparable to them for usability and relatively small.&lt;/li&gt;
&lt;li&gt;Atom is nearly 3x the size of VS Code and 20x the size of Vim. Atom and VS Code are larger than the Firefox browser package, the third largest of any downloaded package on my system.&lt;/li&gt;
&lt;li&gt;I tested out all of the editors by opening the same Python file and making some edits. I found Vim, Emacs and Sublime were much more responsive than Atom and VS Code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: All Editors Are Not Created Equal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are fine editors when paired with the right machine and developer needs. In my case, a Chromebook running Linux installed with &lt;a class="reference external" href="https://github.com/dnschneid/crouton"&gt;Crouton&lt;/a&gt;, a few editors are performing faster and taking up less space. I've chosen Sublime or Emacs as my editor for this computer. One slightly annoying feature of Sublime is being prompted to buy the paid version from the trial version. Atom, Emacs, Vim and VS Code are free. Vim might be a good option if I ever decide to conquer its &lt;a class="reference external" href="https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor"&gt;notoriously high learning curve&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Bonus] Find the size of all packages matching with &amp;quot;vim&amp;quot; in their name:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | grep vim
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Terminal output from above command:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
366 vim-common
1071 vim-tiny
2400 vim
26870 vim-runtime
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.quora.com/What-is-the-best-lightweight-text-editor"&gt;What is the best lightweight text editor?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/atom/atom/issues/9755"&gt;Atom as an Editor is Too Big&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, Linux, Scripts, software, Ubuntu"></category><category term="atom"></category><category term="emacs"></category><category term="sublime"></category><category term="text editors"></category><category term="vim"></category><category term="vs code"></category></entry><entry><title>Copying a pandas Dataframe to Google Sheets with pygsheets</title><link href="https://lofipython.com/copying-a-csv-file-to-google-sheets-with-pygsheets.html" rel="alternate"></link><published>2019-12-21T18:58:00-06:00</published><updated>2019-12-21T18:58:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-12-21:/copying-a-csv-file-to-google-sheets-with-pygsheets.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This endeavor was before I discovered &lt;a class="reference external" href="https://developers.google.com/apps-script"&gt;AppScript&lt;/a&gt;, which may be an alternative solution to using pygsheets or other python libraries. pygsheets is interesting, but it could be a stretch to justify using it for something that could be done with AppScript. Both are ways to solve a problem by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This endeavor was before I discovered &lt;a class="reference external" href="https://developers.google.com/apps-script"&gt;AppScript&lt;/a&gt;, which may be an alternative solution to using pygsheets or other python libraries. pygsheets is interesting, but it could be a stretch to justify using it for something that could be done with AppScript. Both are ways to solve a problem by automating Google Sheet operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This was done on the Windows 7 OS.&lt;/strong&gt; &lt;strong&gt;First,&lt;/strong&gt;&lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;install libraries with pip&lt;/a&gt;&lt;strong&gt;. Enter in command prompt or terminal:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pandas
python -m pip install numpy
python -m pip install pygsheets
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Then, following the&lt;/strong&gt; &lt;a class="reference external" href="https://pygsheets.readthedocs.io/en/stable/authorization.html"&gt;steps documented by pygsheets:&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a Google Developer Account at &lt;a class="reference external" href="http://console.developers.google.com"&gt;console.developers.google.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pygsheets.readthedocs.io/en/stable/authorization.html"&gt;Enable Sheets API&lt;/a&gt; to account&lt;/li&gt;
&lt;li&gt;Enable Drive API to account. Same as last step, but search for Drive.&lt;/li&gt;
&lt;li&gt;Create a Client Secret json file. Select &amp;quot;Credentials&amp;quot; tab, and &amp;quot;Create Credentials&amp;quot;. Select Client Secret from options. Export from console and place in same directory as your .py file.&lt;/li&gt;
&lt;li&gt;Create a Service Account json file by selecting it instead of &amp;quot;Client Secret&amp;quot;.&lt;/li&gt;
&lt;li&gt;Authorize pygsheets with your json files. (See below.)&lt;/li&gt;
&lt;li&gt;Copy spreadsheet to Google Sheet with pandas and pygsheets. (See below.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;After completing the first 5 steps, import pygsheets and authorize your account with the client secret json file:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygsheets&lt;/span&gt;
&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygsheets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/client_secret[...].json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted by the terminal to go to a hyperlink in a browser, get your authorization code, and enter that authorization code into the terminal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, import both libraries needed and switch to authorize with your service json file. Then, load the csv to a dataframe with pandas. Finally, copy it to an existing Google Sheet with pygsheets:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygsheets&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Select worksheets by id, index, or title.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygsheets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/service_account_credentials.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add_google_sheet_name_here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;wks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worksheet_by_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add_sheet_tab_name_here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set a pandas dataframe to google sheet, starting at 1st row, 1st column&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Example_Data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;wks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[Example] Split and upload a sheet with 40 columns&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google Sheets limits importing to 26 columns and 1,000 rows at a time. So you'll have to load the sheets in chunks if you have more than that. This approach uses numpy's &lt;a class="reference external" href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array_split.html"&gt;array_split&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygsheets&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygsheets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/client_secret[...].json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add_google_sheet_name_here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;wks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worksheet_by_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add_sheet_tab_name_here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Data_to_GSheets.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# split columns into two dataframes with numpy and pandas&lt;/span&gt;
&lt;span class="n"&gt;first_half_cols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_half_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;first_half&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first_half_cols&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;second_half&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;second_half_cols&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# set both dataframes side-by-side in Google sheet&lt;/span&gt;
&lt;span class="n"&gt;wks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_half&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;start_column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_half&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;wks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_half&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_column&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found the terminal error messages from pygsheets to be very helpful while debugging the above. This module offers many other nifty spreadsheet operations. Solid library. You can now create and edit Google Sheets with Python.&lt;/p&gt;
&lt;p&gt;AppsScript should probably be the default tool when working with Google Sheets because it is built in, but Python does have tools available to work with Google Sheets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nithinmurali/pygsheets"&gt;pygsheets Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pygsheets.readthedocs.io/en/stable/authorization.html"&gt;pygsheets Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/sheets/api/guides/concepts"&gt;Google Sheets Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"&gt;pandas Documentation&lt;/a&gt;&lt;/p&gt;
</content><category term="automation, coding, excel, Google, pandas"></category><category term="api"></category><category term="google api"></category><category term="google sheets"></category><category term="json"></category><category term="python"></category><category term="spreadsheets"></category></entry><entry><title>A Collection of Software Testing Opinions for Python and Beyond</title><link href="https://lofipython.com/a-collection-of-software-testing-opinions-for-python-and-beyond.html" rel="alternate"></link><published>2019-12-05T03:06:00-06:00</published><updated>2019-12-05T03:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-12-05:/a-collection-of-software-testing-opinions-for-python-and-beyond.html</id><summary type="html">&lt;p&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example I use to monitor files, ideas for unit testing, property testing, test driven development and many other commonly used software tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An Introductory Rant on Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over several years as a programmer, I've slowly grasped the landscape of testing in software development. After moving beyond my first few tutorials and projects, it seemed very noisy to sort out. Examples provided are usually simple assertions that seem tough to relate to a real use case. It might be easy test the wrong things. Plus, some don't do it at all! The quality of the tests is more important than the quantity. But what makes a quality test? Where's the balance between testing every minute detail of a program and not at all?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yeah. And the worst thing that happens is that you get people that just stop&amp;nbsp;&lt;em&gt;thinking&lt;/em&gt;&amp;nbsp;about what they’re doing. “This is the principle, to always write unit tests, so I’m always going to write unit tests,” and then they’re just not thinking about how they’re spending their time, and they wind up wasting a lot of it.&lt;/p&gt;
&lt;p&gt;Joel Spolsky, &lt;a class="reference external" href="https://www.joelonsoftware.com/2009/01/"&gt;Stack Overflow Podcast #38&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementing software tests is a best practice for maintaining code, but seems ambiguous to someone who has not tested any code before. I guess the best way is to &lt;a class="reference external" href="https://github.com/iodide-project/pyodide/tree/master/test"&gt;read open source projects with test suites&lt;/a&gt;, but those can be tough to find. How do you know &lt;a class="reference external" href="https://docs.python-guide.org/writing/reading/"&gt;a good test suite&lt;/a&gt; when you see it? Maybe the maintainers went rogue and off the deep end with tests. Online, everybody says you should test your code, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Emperor%27s_New_Clothes"&gt;is the emperor wearing any clothes?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a beginner stumbling across articles on testing, these questions were tough to answer. As with most things in programming, figuring out the right question to ask is a challenge in itself. &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python-3"&gt;Codeacademy&lt;/a&gt; and &lt;a class="reference external" href="https://www.coursera.org/specializations/python"&gt;Coursera&lt;/a&gt; never mentioned anything about writing tests. On the other hand, &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django&lt;/a&gt; includes testing in its tutorial and documentation. Also, most languages come with built-in testing tools. Python has the &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why test at all? First, some solid benefits of software testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;With tests on your code in place, you can implement changes and have confidence the code still works if the tests pass. This gives developers more confidence to iterate and improve an application.&lt;/li&gt;
&lt;li&gt;Detect problems faster. Passing tests are a good indicator that your programs are actually doing what they're supposed to do. If they don't pass, you likely found a bug you might have missed otherwise.&lt;/li&gt;
&lt;li&gt;When you find a bug, you either need to amend your code, or your tests. write a test for that bug and then fix it. Either that, or you need to be amend your tests. You've just improved the quality of your test suite.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://daedtech.com/dont-learn-to-code-learn-to-automate/"&gt;Automation&lt;/a&gt;. If you are writing tests, those tests can be automated. If you are manually checking the results of your program, you're missing a chance to automate those checks away. I haven't applied it yet, but have heard the &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;Tox library&lt;/a&gt; may be useful to automate tests related to Python packaging. For more on automating tests, see this PyCon talk, &lt;a class="reference external" href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;Three Excellent Python Tools to Automate Repetitive Tasks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test Driven Development can decrease the time spent debugging code. This claim sometimes lacks empirical evidence, supporting evidence tends to be anecdotal.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;A good unit test, therefore, is one that helps enforce the contract to which the function is committed.&lt;/p&gt;
&lt;p&gt;If a good unit test breaks, the contract is violated and should be either explicitly amended (by changing the documentation and tests), or fixed (by fixing the code and leaving the tests as is).&lt;/p&gt;
&lt;p&gt;A good unit test is also&amp;nbsp;&lt;em&gt;strict&lt;/em&gt;. It does its best to ensure the output is valid. This helps it catch more bugs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Moshe Zadka, &lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pytest and Unit Testing in Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is where the Python hits the pavement. Unit tests are generally liked, although some prefer property tests or integration tests because they think the scope of unit tests is too narrow. The &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library is Python's default testing framework. However nowadays, &lt;a class="reference external" href="https://docs.pytest.org/en/latest/contents.html"&gt;pytest&lt;/a&gt; seems to be the preferred unit testing framework for Python. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; is another popular framework I've read about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pytest Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://realpython.com/interview-brian-okken/"&gt;Interview with the author of Pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;Pytest Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/7"&gt;Pytest Features That You Need In Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://love-python.blogspot.com/2017/10/table-driven-unit-test-in-python.html"&gt;Table Driven Unit Testing With pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Pf1ADyUKOrE"&gt;Reproducible Data Analysis in Jupyter, Part 6/10: Unit Testing with PyTest&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Tests start to lose signal when &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;Mock&lt;/a&gt; becomes routine instead of a reluctant workaround. - Brandon Rhodes, &lt;a class="reference external" href="http://S0No2zSJmks"&gt;When Python Practices Go Wrong&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing in Python \ General Unit Testing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Testing"&gt;Testing Conventions for the Pandas Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kanoki.org/2019/11/18/how-to-create-dataframe-for-testing/"&gt;How to Create a Dataframe for Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing//"&gt;Improve Your Python: Understanding Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kbroman.org/blog/2015/12/07/write-unit-tests/"&gt;Write Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2013/12/08/tdd-unit-tests-and-the-passage-of-time/"&gt;Writing Unit Tests for Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2014/02/19/5-unit-testing-mistakes/"&gt;5 Unit Testing Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/unit-tests-are-not-tests/"&gt;Unit Tests Are Not Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hakibenita.com/the-best-new-feature-in-unittest-you-didnt-know-you-need"&gt;The Best New Feature in unittest You Didn't Know You Need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html"&gt;The Flawed Theory Behind Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django Introduction to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/python-doctests/"&gt;Python Doc Tests&lt;/a&gt; Turn docstrings into tests, unique to Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;I think&amp;nbsp;&lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;hypothesis&lt;/a&gt;&amp;nbsp;is probably underrated—some libraries are hesitant to incorporate it into their testing frameworks, but I think the property-based testing has real potential to catch scenarios humans would have a hard time anticipating, or at least that would take a long time to properly plan for. I find that hypothesis almost always adds a few useful test cases I hadn’t thought of that will require special error handling, for example.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2020/01/13/pydev-of-the-week-tyler-reddy/"&gt;Tyler Reddy&lt;/a&gt;, SciPy Release Manager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Integration \ Property Tests&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.juliobiason.me/books/things-i-learnt/integration-tests/"&gt;Unit Tests Are Good, Integration Tests Are Gooder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/pbt-contracts/"&gt;PROPERTY TESTS + CONTRACTS = INTEGRATION TESTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contract-examples/"&gt;Finding Property Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contracts/"&gt;Contracts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditional, or example-based, testing specifies the behavior of your software by writing examples of it—each test sets up a single concrete scenario and asserts how the software should behave in that scenario. Property-based tests take these concrete scenarios and generalize them by focusing on which features of the scenario are essential and which are allowed to vary. This results in cleaner tests that better specify the software’s behavior—and that better uncover bugs missed by traditional&amp;nbsp;testing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;David Maciver, &lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assertions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assertions are generally accepted as welcome additions to your code.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.regehr.org/archives/1091"&gt;Use of Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.squarefree.com/2014/02/03/fuzzers-love-assertions/"&gt;Fuzzers Love Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/assert.html#assert"&gt;pytest Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, the safety and restraints that these code carabiners provide actually give you &lt;strong&gt;more freedom&lt;/strong&gt; to take risks in your coding. If you want to try out some risky feature, refactoring, or external library, you know something is wrong as soon as one of your assertions or tests fail and can undo back to an earlier working state.&lt;/p&gt;
&lt;p&gt;Phillip J. Guo, &lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eventually, you'll discover the evangelists preaching Test Driven Development. There are certain discussions which polarize us in the software development world, such as the appropriate scenarios to deploy this system of development.&lt;/p&gt;
&lt;p&gt;Opinions vary widely on the merits and appropriate application of TDD. I'm admittedly skeptical but do see the merits of TDD. But which flavor? Where do unit tests and integration tests fit in? How many tests should I write? What exactly should I be testing? &lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;This essay&lt;/a&gt; claims anyone pair programming software with an expected life of 3 or more years should use Test Driven Development.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2019/09/29/when-tdd-is-not-a-good-fit/"&gt;When TDD is Not a Good Fit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neverworkintheory.org/2016/10/05/test-driven-development.html"&gt;Test Driven Development vs. Test Last Development&lt;/a&gt; [Study]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=DQBf6li1hww"&gt;Why TDD Is Crap&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/why-tdd-isnt-crap/"&gt;Why TDD Isn't Crap&lt;/a&gt; [Response Blog to Video]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.arp242.net/testing.html"&gt;Testing Isn't Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;Is Pair Programming + TDD worth it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Test Driven Development is a tool for continuously evaluating hypotheses.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?time_continue=170&amp;amp;v=UOOuW5tqT8M&amp;amp;feature=emb_logo"&gt;James Shore, Assert(JS) Con 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;General Testing Ideas and Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python-guide.org/writing/tests/"&gt;Testing Your Code&lt;/a&gt;, The Hitchhiker's Guide to Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.liw.fi/posts/2019/06/29/dijkstra_was_only_partially_correct_about_testing/"&gt;The Point of Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://rachelbythebay.com/w/2013/01/30/test/"&gt;Connecting Bug Fixing to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.jamesshore.com/In-the-News/Thinking-In-Tests.html"&gt;Thinking in Tests&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.drmaciver.com/2015/04/some-empirically-derived-testing-principles/"&gt;Some empirically derived testing principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://danluu.com/tests-v-reason/"&gt;Testing Vs. Informal Reasoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.nelhage.com/2016/12/how-i-test/"&gt;How I Write Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Xu5EhKVZdV8"&gt;Stop Mocking, Start Testing&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;a class="reference external" href="https://python-guide-es.readthedocs.io/es/latest/writing/reading.html"&gt;Each one of these projects is a paragon of Python coding.&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/development/what-its-like-to-be-a-developer-at/"&gt;What it's Like to Be a Developer at...&lt;/a&gt;&amp;nbsp;[Testing Practices Described]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;Hammock Driven Development&lt;/a&gt; [YouTube] Not so much testing focused, but including because I really enjoyed this talk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other common tests types:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unit test: when it fails, it tells you what piece of your code needs to be fixed.&lt;/p&gt;
&lt;p&gt;Integration test: when it fails, it tells you that the pieces of your application are not working together as expected.&lt;/p&gt;
&lt;p&gt;Acceptance test: when it fails, it tells you that the application is not doing what the customer expects it to do.&lt;/p&gt;
&lt;p&gt;Regression test: when it fails, it tells you that the application no longer behaves the way it used to.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/7672511/unit-test-integration-test-regression-test-acceptance-test"&gt;Mathias, Stack Overflow Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing maturity level progression:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No tests&lt;/li&gt;
&lt;li&gt;Occasional, slow, unreliable tests&lt;/li&gt;
&lt;li&gt;Semi-comprehensive integration tests&lt;/li&gt;
&lt;li&gt;Fast, comprehensive unit tests comprise the bulk of testing&lt;ul&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Composable subsystem design&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Real-time test feedback (ideally integrated into the editor)&lt;/li&gt;
&lt;li&gt;Tests are extremely reliable or&amp;nbsp;&lt;a class="reference external" href="http://andyfriesen.com/2015/06/17/testable-io-in-haskell.html"&gt;guaranteed reliable by the type system&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;With tooling that tracks the reliability of tests and provides that feedback to authors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fuzzing, statistically automated microbenchmarking, rich testing frameworks for every language and every platform, and a company culture of writing the appropriate number of unit tests and high-value integration tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chadaustin.me/2019/11/two-years-at-dropbox/"&gt;ChadAustin.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I recently wrote my first unit tests with pytest. Below is a script named test_file_date.py. It tests if the day of month of the most recently changed file in a directory matches today's day. To install pytest, enter into command prompt or terminal:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pytest&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_file_date.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="c1"&gt;# The dir_query format is for a Windows path with Unix style pattern matching.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_csv_date_equals_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dir_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Users&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;your_username&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Desktop&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;*.csv&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# specify csv extension and folder&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# get most recent file&lt;/span&gt;
    &lt;span class="n"&gt;file_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;file_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Run the test with pytest by entering:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;pytest test_file_date.py&lt;/tt&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;I write programs for personal productivity and to &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;automate processes&lt;/a&gt; at my company. The scope of problems my code solves has grown with my programming ability. I'm now reaching the point where I can apply tests to my advantage. However, sometimes I'll write a quick-hitter script for which I can't justify writing tests. Beyond those cases, testing can help if you pick the right style for your project. More so for recurring, automated processes.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It feels pretty cool when your tests run and you know with more certainty whether a part of your program is getting the job done or not. After setting up my first test with pytest, I have leveled up to novice tester, instead of blissfully not knowing what I don't know about testing. That's a step in the right direction.&lt;/p&gt;
</content><category term="coding, productivity, programming, python, software testing"></category><category term="pytest"></category><category term="software development"></category><category term="test driven development"></category></entry><entry><title>Inserting New Rows Into A Microsoft Access Database With Python and pyodbc</title><link href="https://lofipython.com/inserting-new-records-into-a-microsoft-access-database-with-python.html" rel="alternate"></link><published>2019-11-30T00:28:00-06:00</published><updated>2019-11-30T00:28:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-11-30:/inserting-new-records-into-a-microsoft-access-database-with-python.html</id><summary type="html">&lt;p&gt;I recently automated the loading of data into a Microsoft Access database with &lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki"&gt;pyodbc&lt;/a&gt;, a Python library for connecting to databases. ODBC stands for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_Database_Connectivity"&gt;Open Database Connectivity&lt;/a&gt;. It can be used for a variety of Database Management Systems outside of Access also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;install libraries with pip&lt;/a&gt;&lt;strong&gt;. Enter in terminal …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently automated the loading of data into a Microsoft Access database with &lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki"&gt;pyodbc&lt;/a&gt;, a Python library for connecting to databases. ODBC stands for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_Database_Connectivity"&gt;Open Database Connectivity&lt;/a&gt;. It can be used for a variety of Database Management Systems outside of Access also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;install libraries with pip&lt;/a&gt;&lt;strong&gt;. Enter in terminal or command prompt:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pyodbc&lt;/tt&gt;
&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next, check available Microsoft Access drivers on your computer. Enter the below statements into the Python interpreter:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyodbc&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pyodbc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drivers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Microsoft Access Driver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Drivers for&lt;/strong&gt; &lt;strong&gt;Access &amp;amp; Many Other Data Sources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The driver is the engine that allows you to connect to a specific type of database. The drivers available vary depending on your machine.&lt;/p&gt;
&lt;p&gt;The two most common drivers for Access are Microsoft Access Driver (&lt;em&gt;.mdb) and Microsoft Access Driver (&lt;/em&gt;.mdb, *.accdb). My computer only had *.mdb, which has been deprecated. My Access database was a .mdb file, so I was able to use this driver as shown below. Read more on Access drivers &lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-Microsoft-Access"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Drivers exist for all major DBMSs, many other data sources like address book systems and Microsoft Excel, and even for text or comma-separated values (CSV) files.&amp;quot;&amp;nbsp; - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open_Database_Connectivity"&gt;Wikipedia&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Database Data Types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I set all of the field data types to &amp;quot;Short Text&amp;quot; because I'm passing strings as SQL parameters below. Uploading as other data types may require additional formatting. To edit the data types of your table, open the table and select &amp;quot;Design View&amp;quot; under the &amp;quot;Home&amp;quot; tab. It got the job done for me!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inserting new rows into a Microsoft Access Database:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyodbc&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;df_to_row_tuples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Use list comprehension to format df rows as a list of tuples:&lt;/span&gt;
&lt;span class="sd"&gt;    rows = [(&amp;#39;Garfield&amp;#39;,&amp;#39;Orange&amp;#39;,&amp;#39;Eat&amp;#39;),(&amp;#39;Meowth&amp;#39;,&amp;#39;White&amp;#39;,&amp;#39;Scratch&amp;#39;)]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Rows are not added to DB until they are committed.&lt;/span&gt;
&lt;span class="sd"&gt;Pass each row tuple as a SQL parameter (?,?,?).&lt;/span&gt;
&lt;span class="sd"&gt;cursor.execute docs: https://www.mcobject.com/docs/Content/Programming/Python/Classes/Cursor/execute.htm&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyodbc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Add_Path\To_DB\Here\Your_DB.mdb;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39; INSERT INTO Cats (Name, Color, Move)&lt;/span&gt;
&lt;span class="s1"&gt;          VALUES(?,?,?) &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cat Data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_to_row_tuples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running the above in command prompt uses pyodbc and SQL to add dataframe rows to a Microsoft Access DB table named &amp;quot;Cats&amp;quot;. Passing each row as a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/#paramstyle"&gt;SQL parameter&lt;/a&gt; has two benefits:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It handles strings with single quotes (') and loads them to the DB.&lt;/li&gt;
&lt;li&gt;It protects against &lt;a class="reference external" href="https://www.acunetix.com/websitesecurity/sql-injection/"&gt;SQL injection&lt;/a&gt; attacks.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Access Limitation Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Access topped out just shy of 10 million rows in my use case, when records stopped getting added to my database. So keep that in mind if you're thinking about using Access to store your data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://datatofish.com/insert-ms-access-python/"&gt;Insert Values into MS Access Table using Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mkleehammer/pyodbc/wiki"&gt;pyodbc documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-3-proof-of-concept-connecting-to-sql-using-pyodbc?view=sql-server-ver15"&gt;Microsoft Documentation pyodbc example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.mcobject.com/docs/Content/Programming/Python/Classes/Cursor.htm"&gt;The Python Cursor Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.psycopg.org/docs/cursor.html"&gt;Psycopg Cursor Class Documentation&lt;/a&gt;&lt;/p&gt;
</content><category term="automation, data, Databases, excel, ODBC, pandas, python, Windows"></category><category term="Access"></category><category term="Microsoft"></category><category term="productivity"></category><category term="programming"></category></entry><entry><title>Installing Debian 9 Stretch Linux OS on a Dell Inspiron Laptop and Configuring the Wifi Network</title><link href="https://lofipython.com/installing-debian-9-stretch-linux-os-on-a-dell-inspiron-laptop-and-troubleshooting-wifi.html" rel="alternate"></link><published>2019-04-25T14:14:00-05:00</published><updated>2019-04-25T14:14:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-04-25:/installing-debian-9-stretch-linux-os-on-a-dell-inspiron-laptop-and-troubleshooting-wifi.html</id><summary type="html">&lt;p&gt;Yesterday, I converted an 11-year old Dell Inspiron E1505 from Windows XP to Debian 9 Stretch. I may have overwrote my Windows XP OS. I do not care if I lost it since it's a vulnerable and outdated OS, which is no longer supported by Microsoft. I encountered difficulty with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, I converted an 11-year old Dell Inspiron E1505 from Windows XP to Debian 9 Stretch. I may have overwrote my Windows XP OS. I do not care if I lost it since it's a vulnerable and outdated OS, which is no longer supported by Microsoft. I encountered difficulty with getting the wifi to work on Debian, but was able to find a solution using &lt;a class="reference external" href="https://help.ubuntu.com/community/WICD"&gt;Wicd&lt;/a&gt;. Here are the steps I followed to do it all.&lt;/p&gt;
&lt;div class="section" id="using-the-debian-installer-loader"&gt;
&lt;h2&gt;Using The Debian Installer-Loader&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;First, back up your Windows computer files. Then download the &lt;a class="reference external" href="https://wiki.debian.org/DebianInstaller/Loader"&gt;Debian-Installer Loader&lt;/a&gt; Windows executable from the Debian wiki.&lt;/li&gt;
&lt;li&gt;Click the downloaded executable and &lt;img alt="IMG_20190423_184816999" class="wp-image-1785 alignright" src="http://pythonmarketer.files.wordpress.com/2019/04/97878-img_20190423_184816999-e1556211269262.jpg" style="width: 311px; height: 196px;" /&gt;follow instructions. I followed the default settings all the way through.&lt;/li&gt;
&lt;li&gt;You may need to choose your own partitioning settings to ensure Windows is preserved if desired.&lt;/li&gt;
&lt;li&gt;During installation, choose your Linux collection. I chose Xfce because it &lt;a class="reference external" href="https://www.slant.co/versus/1122/1124/~xfce_vs_gnome-3"&gt;seems to be highest ranked&lt;/a&gt; among Linux users and &amp;quot;not just helpful for older computers where few system resources are available, but also simply for those who want to get the most out of their systems.&amp;quot; Gnome and KDE are other popular options.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="IMG_20190423_184023738" class="wp-image-1784 aligncenter" src="http://pythonmarketer.files.wordpress.com/2019/04/46248-img_20190423_184023738-e1556211291659.jpg" style="width: 564px; height: 375px;" /&gt;
&lt;p&gt;&lt;strong&gt;After completing installation, restart your computer and select your new OS on boot-up. The following error codes displayed for me while starting up, signaling missing wifi firmware.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ERROR Failed to load firmware!
b43ssb0:0: firmware: failed to load b43/ucode5.fw (-2)
b43ssb0:0: firmware: failed to load b43-open/ucode5.fw (-2)
b43-phy0 ERROR: You must go to https://wireless.wiki.kernel.org/en/users/drivers/b43#devicefirmware and download the correct firmware for this driver version.
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;It took me a few boot-ups before I realized what this error message meant. In the rest of this post I am trying to figure out and fix what is wrong before I saw the error message. I enjoyed learning how to introspect Linux networks, but if I were trying to fix this problem again, I'd go to directly to *`this page &amp;lt;http://linuxwireless.sipsolutions.net/en/users/Drivers/b43/&amp;gt;`__*, which is linked to from the link in the error message, and try the solution there first.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-installation-setup"&gt;
&lt;h2&gt;Post Installation Setup&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Open up the terminal once you're into your new Desktop OS&lt;/strong&gt;&amp;nbsp;and enter the below commands.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
su -
apt-get install sudo -y usermod -aG sudo yourusername
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1) Enable yourself as root user.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Install sudo.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) Give yourself sudo user permission.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optional-replacing-network-manager-with-wicd"&gt;
&lt;h2&gt;Optional: Replacing Network-Manager With Wicd&lt;/h2&gt;
&lt;p&gt;This Debian 9 package ships with Network-Manager. After logging in, I wasn't sure why wifi was not working, so I decided to remove Network-Manager and install Wicd. (This was before I realized what the error code displayed on boot-up meant.) Wicd is a Linux network managing alternative and it's built with Python, by the way. I followed &lt;a class="reference external" href="https://help.ubuntu.com/community/WICD"&gt;these instructions&lt;/a&gt; to execute the below commands.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
uninstall nm
sudo apt-get install -d --reinstall network-manager network-manager-gnome
install wicd
sudo apt-get install wicd-gtk
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;After installing Wicd, my Ethernet connection was not working. This fixed it for me:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ifconfig eth0 up
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting-linux-wifi-inspecting-your-system"&gt;
&lt;h2&gt;Troubleshooting Linux Wifi &amp;amp; Inspecting Your System&lt;/h2&gt;
&lt;p&gt;Now, let's check for enabled network interfaces. &amp;quot;wlan0&amp;quot; is usually the name of the wireless interface. Does wlan0 show when you enter this command? If not, then you may need to update your wifi firmware. This was the case for me. Below is an output where wlan0 is correctly configured.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ifconfig
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
eth0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt; mtu 1500
ether 00:25:a5:cf:38:7d txqueuelen 1000 (Ethernet)
RX packets 0 bytes 0 (0.0 B)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 0 bytes 0 (0.0 B)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
device interrupt 17
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536
inet 127.0.0.1 netmask 255.0.0.0
inet6 ::1 prefixlen 128 scopeid 0x10
loop txqueuelen 1 (Local Loopback)
RX packets 4 bytes 240 (240.0 B)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 4 bytes 240 (240.0 B)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
wlan0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
inet 191.142.1.297 netmask 255.255.255.0 broadcast 182.138.5.255
inet6 2601:241:8c00:50ea:21a:92ff:fe0d:7531 prefixlen 64 scopeid 0x0
inet6 fe80::22a:42tf:fe0d:7531 prefixlen 64 scopeid 0x20 ether 00:2a:92:2d:45:51 txqueuelen 1000 (Ethernet)
RX packets 8509 bytes 4639778 (4.4 MiB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 6206 bytes 923792 (902.1 KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Check wlan0 is not blocked on kill list.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo rfkill list all
&lt;/pre&gt;
&lt;p&gt;Some computers have a &amp;quot;kill switch&amp;quot; for wifi. This command lists any blocked interfaces. If it is blocked, &lt;a class="reference external" href="https://ubuntuforums.org/showthread.php?t=2298330"&gt;this thread&lt;/a&gt; might be useful. If nothing shows when you run this command, or if you see wlan0 is not blocked, carry on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Check which wifi controller you have.&lt;/strong&gt; &lt;a class="reference external" href="https://askubuntu.com/questions/55868/installing-broadcom-wireless-drivers"&gt;This thread&lt;/a&gt; &lt;strong&gt;provides more info on what this means.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
lspci -nn | grep -e 0200 -e 0280
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
03:00.0 Ethernet controller [0200]: Broadcom Limited BCM4401-B0 100Base-TX [14e4:170c] (rev 02)
0b:00.0 Network controller [0280]: Broadcom Limited BCM4311 802.11b/g WLAN [14e4:4311] (rev 01)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Find your system architecture. This determines which firmware you should download in the next step.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo dpkg --print-architecture
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; &lt;a class="reference external" href="https://wireless.wiki.kernel.org/en/users/drivers/b43/firmware"&gt;read here&lt;/a&gt; &lt;strong&gt;to determine the right packages for your Linux system. Then download the appropriate missing wifi firmware. For Debian, I downloaded the two packages below.&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://packages.debian.org/stretch/b43-fwcutter"&gt;b43-fwcutter&lt;/a&gt; 2) &lt;a class="reference external" href="https://packages.debian.org/stretch/firmware-b43-installer"&gt;b43-installer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;cd&amp;quot; into the directory with .deb files. Run the below commands to install the new firmware, then reboot your computer. The last two commands are adapted from&lt;/strong&gt; &lt;a class="reference external" href="https://ubuntuforums.org/showthread.php?t=2203312&amp;amp;page=4"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo dpkg -i firmware-b43-installer_019-3_all.deb
sudo dpkg -i firmware-b43-fwcutter_019-3_i386.deb
sudo modprobe -r b43
sudo modprobe b43
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Edit Wicd preferences to set wlan0 as the wireless interface if needed.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="change_wicd_settings" class="alignnone wp-image-1779" src="https://pythonmarketer.files.wordpress.com/2019/04/change_wicd_settings.png" style="width: 380px; height: 357px;" /&gt;
&lt;p&gt;&lt;strong&gt;Success! Wireless networks are now showing.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="wicd_success" class="alignnone wp-image-1780" src="https://pythonmarketer.files.wordpress.com/2019/04/wicd_success.png" style="width: 375px; height: 351px;" /&gt;
&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd like to thank the awesome people who contributed to the Debian Installer-loader and all the help in Linux forums that enabled me figure this out. I'm new to the world of Linux but already enjoying diving into this operating system. Its ability to do just about anything from the command line are a lot of fun. I am now running two Linux systems, one on my Dell and another running Ubuntu that I installed on a Chromebook with &lt;a class="reference external" href="https://www.howtogeek.com/162120/how-to-install-ubuntu-linux-on-your-chromebook-with-crouton/"&gt;Crouton&lt;/a&gt;. Both have been relatively painless to set up. It this case, it turned a sluggish laptop into a very capable machine. They should call it Lit-nux :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full Disclosure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This worked on my computer for a few days before the keyboard stopped working correctly on my computer. Typing became impossible because the keys didn't work or entered the wrong letters when pressed. I'm not sure what the cause of it was, but consider that before attempting this on a machine. Be prepared to lose it. If you really need the machine to be functional, it may not be a great idea to try this. This was attempted on an old beat up computer. I would try this method of porting a Windows machine to Linux again as a salvage project or on a low-risk Windows machine if I had one lying around.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Linux, software"></category><category term="computers"></category><category term="debian"></category><category term="operating system"></category><category term="os upgrade"></category><category term="Windows"></category></entry><entry><title>Lightning Scripts ⚡</title><link href="https://lofipython.com/lightning-scripts-%e2%9a%a1.html" rel="alternate"></link><published>2019-02-12T06:27:00-06:00</published><updated>2019-02-12T06:27:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-02-12:/lightning-scripts-%e2%9a%a1.html</id><summary type="html">&lt;p&gt;You may or may not be familiar with &lt;a class="reference external" href="https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ"&gt;PyCon&lt;/a&gt;'s &lt;a class="reference external" href="https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--saturday-evening-lightning-t.html"&gt;Lightning Talks&lt;/a&gt;, a session of quick hitter talks given each year on a variety of topics. These &amp;quot;Lightning Scripts&amp;quot; are ten of my favorite Python scripts that have served me well as of late to perform a variety of tasks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You may or may not be familiar with &lt;a class="reference external" href="https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ"&gt;PyCon&lt;/a&gt;'s &lt;a class="reference external" href="https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--saturday-evening-lightning-t.html"&gt;Lightning Talks&lt;/a&gt;, a session of quick hitter talks given each year on a variety of topics. These &amp;quot;Lightning Scripts&amp;quot; are ten of my favorite Python scripts that have served me well as of late to perform a variety of tasks.&lt;/p&gt;
&lt;p&gt;Highlights include the glob, os, calendar, webbrowser and pandas modules. Plus, how to convert a dataframe into a pdf and how to take a snapshot of a website with pdfkit. The webpage pdf was not the greatest snapshot in some cases, but did capture text and many of a live website's visual elements.&lt;/p&gt;
&lt;p&gt;If you have Python installed, paste the script into a text editor and run your .py file from the command line or however you like to run your scripts. You may have to change file paths to work on your operating system.&lt;/p&gt;
&lt;div class="section" id="the-first-5-scripts-use-modules-that-ship-with-python"&gt;
&lt;h2&gt;The first 5 scripts use modules that ship with Python.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(1) Uppercase all of the file names in the current working directory.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;os module &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.rename"&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Get all filenames in the current directory and write to a text file.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;folder_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;list_of_dir_files.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;folder_contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;f&lt;/span&gt;&lt;span class="si"&gt;{item}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(3) Check what day of the week is today.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;calendar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Today is Friday.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Today is not Friday.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/calendar.html"&gt;calendar documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4) Get the two most recent file names from a directory. This is a Windows file path example. I have escaped the backslashes below to make it work in my Atom text editor.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="c1"&gt;# getctime == by created date, getmtime == by date modified&lt;/span&gt;
&lt;span class="c1"&gt;# get all files, regardless of extension&lt;/span&gt;
&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/Desktop/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;list_of_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;newest_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:/Users/your_username/Desktop/*.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;second_newest_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:/Users/your_username/Desktop/*.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newest_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_newest_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;glob module documentation: &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html#glob.iglob"&gt;https://docs.python.org/3/library/glob.html#glob.iglob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)  Auto-Hamilton Ticket Lottery&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;
&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.luckyseat.com/hamilton-chi/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;webbrowser PMOTW: &lt;a class="reference external" href="https://pymotw.com/3/webbrowser"&gt;https://pymotw.com/3/webbrowser&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-run-the-next-3-scripts-install-pandas"&gt;
&lt;h2&gt;To Run The Next 3 Scripts, install pandas:&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pandas
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(6) Split a csv file into smaller excel files.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big_file.csv&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# slice off extension&lt;/span&gt;
&lt;span class="n"&gt;src_file_minus_ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;250000&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src_file_minus_ext&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.csv&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;pandas beginner tutorial: &lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;https://www.youtube.com/watch?v=5JnMutdy6Fw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7) Convert a .xlsx to .csv&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(8) Convert a .xlsx to .html&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data.xlsx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="to-run-the-last-two-scripts-install-pdfkit"&gt;
&lt;h2&gt;To Run The Last Two Scripts, install pdfkit:&lt;/h2&gt;
&lt;p&gt;pdfkit relies on another library, wkhtmltopdf, which adds an extra wrinkle to setting it up for Windows users. I've laid out the differences between using pdfkit for Windows vs. Ubuntu below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pdfkit
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;installing wkhtmltopdf on Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To use pdfkit on Windows, go to the link, choose your version to download. This installs a Windows executable that pdfkit needs to find to work.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://wkhtmltopdf.org/downloads.html
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;installing wkhtmltopdf on Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install wkhtmltopdf


**For Windows, **\ `download wkhtmltopdf &amp;lt;https://wkhtmltopdf.org/downloads.html&amp;gt;`__\ ** and add this config patch for pdfkit:**
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdfkit&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.hollywoodreporter.com/news/grammys-alicia-keys-best-moments-as-host-1185013&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdfkit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkhtmltopdf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Program Files&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;wkhtmltopdf&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;bin&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;wkhtmltopdf.exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pdfkit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;webpage.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4 Convert a .html file to .pdf. (Add config patch above for Windows.)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdfkit&lt;/span&gt;
&lt;span class="n"&gt;pdfkit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;report.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5 Create a pdf snapshot of a webpage on Ubuntu below. (Add config patch above for Windows.)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdfkit&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.hollywoodreporter.com/news/grammys-alicia-keys-best-moments-as-host-1185013&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;pdfkit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alicia_keys.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;pdfkit documentation: &lt;a class="reference external" href="https://pypi.org/project/pdfkit/"&gt;https://pypi.org/project/pdfkit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am very pleased with pdfkit. I am also toying around with Python's PyFPDF: &lt;a class="reference external" href="https://pyfpdf.readthedocs.io/en/latest/index.html"&gt;https://pyfpdf.readthedocs.io/en/latest/index.html&lt;/a&gt; and PyPDF2: &lt;a class="reference external" href="https://pythonhosted.org/PyPDF2"&gt;https://pythonhosted.org/PyPDF2&lt;/a&gt; libraries. Together, these three offer some unique abilities for creating and manipulating pdf files. And the pandas library is amazing for reading and writing tabular data sheets, can't say enough great things about pandas. Worth the time. Hope you enjoyed these Lightning Scripts :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="automation, coding, pandas, productivity, programming, Scripts"></category><category term="alicia keys"></category><category term="code"></category><category term="computers"></category><category term="hamilton"></category><category term="lightning scripts"></category><category term="python"></category></entry><entry><title>Automated Python With Windows Task Scheduler</title><link href="https://lofipython.com/automated-python-with-windows-task-scheduler.html" rel="alternate"></link><published>2018-11-25T19:44:00-06:00</published><updated>2018-11-25T19:44:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-11-25:/automated-python-with-windows-task-scheduler.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;So you want to run your Python scripts automatically, but how?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had heard of several popular scheduling libraries in Python like &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt;, &lt;a class="reference external" href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, and&amp;nbsp;&lt;a class="reference external" href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;. One of my requirements is to run the python file &amp;quot;in the background&amp;quot;, not in command prompt or an open window.&lt;/p&gt;
&lt;p&gt;Enter Windows Task …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;So you want to run your Python scripts automatically, but how?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had heard of several popular scheduling libraries in Python like &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt;, &lt;a class="reference external" href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, and&amp;nbsp;&lt;a class="reference external" href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;. One of my requirements is to run the python file &amp;quot;in the background&amp;quot;, not in command prompt or an open window.&lt;/p&gt;
&lt;p&gt;Enter Windows Task Scheduler, the de facto scheduler on Windows 7 computers. I have&amp;nbsp; scheduled a few scripts and it is working like a charm. In this post, I will schedule an example script to clean up my desktop at the beginning of each day. I have a habit of accumulating many Excel files there throughout the workday. This example automatically moves them into a folder.&lt;/p&gt;
&lt;p&gt;Other Windows scheduling alternatives worth mentioning include &lt;a class="reference external" href="http://thepythoncorner.com/dev/how-to-create-a-windows-service-in-python/"&gt;creating a Windows service&lt;/a&gt;, or using &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/taskschd/schtasks"&gt;schtasks&lt;/a&gt; if you prefer the command line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's how to schedule a Python script to run:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Search for Windows Task Scheduler in the start menu. Then select &amp;quot;Task Scheduler Library&amp;quot; to see all of the tasks Windows is running automatically.&lt;/li&gt;
&lt;li&gt;In the right toolbar, select &amp;quot;Create Basic Task&amp;quot; and give it a name and description. Note: I selected &amp;quot;Configure for: Windows 7, Windows Server 2008 R2&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="general" class="wp-image-1577 alignright" src="https://pythonmarketer.files.wordpress.com/2018/11/general.png" style="width: 481px; height: 361px;" /&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Set the time and frequency that the program will run in the &amp;quot;Triggers&amp;quot; tab.&lt;/li&gt;
&lt;li&gt;Under the &amp;quot;Actions&amp;quot; tab, select &amp;quot;Start a Program&amp;quot; from the dropdown. Under &amp;quot;Program/Script&amp;quot;, enter the path to your Python.exe file. I set mine to a Python executable located within my &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;, but yours might be found wherever you have Python installed.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\36env\Scripts\python.exe
&lt;/pre&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Under &amp;quot;Add arguments (optional)&amp;quot;, add the path to your .py script, within quotes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;C:\Users\your_username\Desktop\36env\clean_desktop_excels.py&amp;quot;
&lt;/pre&gt;
&lt;img alt="actions" class="alignnone size-full wp-image-1578" src="http://pythonmarketer.files.wordpress.com/2018/11/bd0a9-actions-e1543177551739.png" style="width: 448px; height: 236px;" /&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Select additional conditions and settings as desired, such as &amp;quot;Wake the computer to run this task&amp;quot; and &amp;quot;Run with highest privileges&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am enjoying this simple, easy and convenient scheduling manager for Windows. I figured most of this out thanks to &lt;a class="reference external" href="https://www.esri.com/arcgis-blog/products/product/analytics/scheduling-a-python-script-or-model-to-run-at-a-prescribed-time/?rmedium=redirect&amp;amp;rsource=/esri/arcgis/2013/07/30/scheduling-a-scrip"&gt;this blog&lt;/a&gt;. Below is my script to clean my desktop each morning by moving my Excel files into a folder, using Python's stock &lt;a class="reference external" href="https://docs.python.org/3/library/shutil.html"&gt;shutil&lt;/a&gt; and os libraries. Set it and forget it, ya know what i mean? :D&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# Desktop Spreadsheet File Cleaner: get all Desktop files and folders&lt;/span&gt;
&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dir_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;excel_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dir_items&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.csv&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.xls&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/Excels&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;excel_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path_to_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;xl&lt;/span&gt;
    &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc721846(v=ws.11)?redirectedfrom=MSDN"&gt;Troubleshooting Windows Task Scheduler&lt;/a&gt; - Windows Documentation&lt;/p&gt;
</content><category term="automation, productivity, programming, python, Windows"></category><category term="coding"></category><category term="organization"></category></entry><entry><title>Packaging Python as a Windows App via Pyinstaller</title><link href="https://lofipython.com/packaging-python-as-a-windows-app.html" rel="alternate"></link><published>2018-11-20T02:59:00-06:00</published><updated>2018-11-20T02:59:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-11-20:/packaging-python-as-a-windows-app.html</id><summary type="html">&lt;p&gt;My research found that for creating a single-file Windows executable from a .py file, the front-running Python library is Pyinstaller. It worked on my Windows 7 PC. My program used a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/08/25/gooey-gui-for-python-scripts/"&gt;Gooey GUI&lt;/a&gt;, but many of the popular Python GUI libraries work as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;To install, enter this into …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;My research found that for creating a single-file Windows executable from a .py file, the front-running Python library is Pyinstaller. It worked on my Windows 7 PC. My program used a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/08/25/gooey-gui-for-python-scripts/"&gt;Gooey GUI&lt;/a&gt;, but many of the popular Python GUI libraries work as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;To install, enter this into command your command prompt or terminal:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pyinstaller
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;At the time of this article, this installed Pyinstaller version 3.3.1 using Python version 3.6.5. &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;Go here&lt;/a&gt; for a refresher on setting up pip if you need it.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Using the build.spec file and starting Pyinstaller:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most examples I found used a build.spec file. Think of this as the blueprint by which your app will be constructed. It provides the compiling settings, images and any other data necessary for assembling your app. The format for passing the .spec file to Pyinstaller in pseudo-code:&lt;/p&gt;
&lt;blockquote&gt;
pyinstaller (run mode options) (.spec file)&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Basic start compiler command to build.spec:&lt;/strong&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
pyinstaller build.spec
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Establishing a debugging loop with Pyinstaller&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Debug mode can be set from the command line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pyinstaller -debug build.spec
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;
by passing debug=True to the EXE() function of the build.spec. I used the second option. See my full build.spec file at the bottom of this post. Pyinstaller displayed a lot of error messages while compiling my app, but it still compiled into a working .exe.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To see your app's error message, run the resulting your_app.exe from the command line.&lt;/em&gt;
You can find it in the 'dist' folder that pyinstaller creates when you pass it the build.spec file. Set the dist folder as your working directory, type your_app.exe and hit enter. Once you are reading and fixing error messages, you're well on the way to creating your own desktop app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flushing sys.stdout/Python printing for Windows:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python's design requires some code to play nice with Windows when it prints a statement. Simply add this to your .py file. I used write mode 'w'. What worked for me: don't pass 0 to fdopen(). This was contrary to &lt;a class="reference external" href="http://chriskiehl.com/article/packaging-gooey-with-pyinstaller/"&gt;Gooey's instructions&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;nonbuffered_stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nonbuffered_stdout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Fetching the local user's system information:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to run on any user's system, we need to grab their local file paths. I accomplished this by referencing the sys._MEIPASS via the below code I found from a Stack Overflow post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resource_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relative_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Get absolute path to resource, works for dev and for PyInstaller&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;base_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_MEIPASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relative_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;temp_folder_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_MEIPASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;relative_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resource_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_folder_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Adding library-specific patches:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Below is the &lt;a class="reference external" href="https://github.com/pyinstaller/pyinstaller/issues/3422"&gt;fix&lt;/a&gt; I found for the Pandas library, which I added to my build.spec:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hiddenimports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandas._libs.tslibs.timedeltas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandas._libs.tslibs.nattype&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;pandas._libs.tslibs.np_datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandas._libs.skiplist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;The Gooey library needs some special code added to the build.spec for its images and languages data. More details are found in this &lt;a class="reference external" href="http://chriskiehl.com/article/packaging-gooey-with-pyinstaller/"&gt;blog post&lt;/a&gt;, written by the author of the Gooey library.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Will Ferrell Old School" class="wp-image-1535 alignright" src="https://pythonmarketer.files.wordpress.com/2018/11/will_ferrell_composure.jpg" style="width: 293px; height: 216px;" /&gt;
&lt;p&gt;&lt;strong&gt;Last, but not least: don't panic.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Compiling Python to Windows binary code sounds like a dauntingtask, but it wasn't nearly as complex as I feared. The folks behind Pyinstaller have done a great job of making it possible and, dare I say, simple. Stay calm, drink some coffee, dig in and welcome the challenge with a trial and error mentality. I was able to figure it out over the span of one Saturday. Good luck.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Useful Resources:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pyinstaller Github - &lt;a class="reference external" href="https://github.com/pyinstaller/pyinstaller/wiki/If-Things-Go-Wrong"&gt;If Things Go Wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pyinstaller Documentation:&lt;a class="reference external" href="https://pyinstaller.readthedocs.io/en/stable/usage.html"&gt;Using Pyinstaller Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chriskiehl.com/article/packaging-gooey-with-pyinstaller/"&gt;Gooey Pyinstaller Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pyinstaller/pyinstaller/issues/3422"&gt;Pandas hiddenimports Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You should compile the program on the operating system it will be run on. There are options for creating a multi-os compatible package, but I did not attempt them.&lt;/li&gt;
&lt;li&gt;Windows 7 is proven to work with Pyinstaller, per the documentation. It's also what I am running on. Other Windows systems older than Windows 10 may be less reliable.&lt;/li&gt;
&lt;li&gt;I experienced trouble when passing arguments from the command line to pyinstaller and have so far been unable to get the console window to hide. Neither the -w, --windowed, --noconsole arguments seemed to work. I will update if I am able to find a solution.&lt;/li&gt;
&lt;li&gt;Now that I am testing my compiled app, I am seeing 10x performance slowdowns when running as the final .exe vs. the original .py file. But at least the program runs correctly and still does so relatively quickly.&lt;/li&gt;
&lt;li&gt;I also received the error: &amp;quot;Fatal error: Pyinstaller does not include a pre-compiled bootloader for your platform.&amp;quot; I fixed this by upgrading to the latest version of Pyinstaller:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
pip3 install --upgrade pyinstaller
&lt;/pre&gt;
&lt;p&gt;My full build.spec file, modified from &lt;a class="reference external" href="http://chriskiehl.com/article/packaging-gooey-with-pyinstaller/"&gt;here&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- mode: python -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gooey&lt;/span&gt;
&lt;span class="n"&gt;gooey_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gooey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gooey_languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gooey_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gooey/languages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gooey_images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gooey_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gooey/images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;your_program.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="n"&gt;pathex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Python36&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Lib&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;site-packages&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;your_appdir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="n"&gt;hiddenimports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandas._libs.tslibs.timedeltas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pandas._libs.tslibs.np_datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pandas._libs.tslibs.nattype&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pandas._libs.skiplist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="n"&gt;hookspath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;runtime_hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OPTION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datas&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;program_icon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Python36&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Lib&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;site-packages&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;your_appdir&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;program_icon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;DATA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config_icon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Python36&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Lib&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;site-packages&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;your_appdir&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;config_icon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DATA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;pyz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PYZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EXE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pyz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binaries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zipfiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;gooey_languages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;gooey_images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ADD YOUR APP NAME HERE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;upx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;program_icon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
</content><category term="coding, pandas, python, software"></category><category term="app development"></category><category term="computers"></category><category term="programming"></category><category term="Windows"></category></entry><entry><title>Making A Desktop Color Eyedropper in Python to Grab Color Values</title><link href="https://lofipython.com/making-a-python-eyedropper.html" rel="alternate"></link><published>2018-09-14T05:45:00-05:00</published><updated>2018-09-14T05:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-09-14:/making-a-python-eyedropper.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; recreate my resume in the dark Atom text editor theme
(background and fonts). &lt;strong&gt;Sub-goal:&lt;/strong&gt; find a color eyedropper to grab
the actual color values of the Atom layout.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach #1: find an Atom eyedropper package to grab the colors.&lt;/strong&gt; My
first thought was to find the easiest solution, within …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; recreate my resume in the dark Atom text editor theme
(background and fonts). &lt;strong&gt;Sub-goal:&lt;/strong&gt; find a color eyedropper to grab
the actual color values of the Atom layout.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach #1: find an Atom eyedropper package to grab the colors.&lt;/strong&gt; My
first thought was to find the easiest solution, within the packages of
my Atom text editor. After searching Atom's packages, the two best
potential solutions were &amp;quot;an-color-eyedropper&amp;quot; and &amp;quot;color picker&amp;quot; . The an-color-eyedropper
description sounds perfect: &amp;quot;A simple &amp;quot;real&amp;quot; color picker. By &amp;quot;real&amp;quot; I
mean it's able to pick colors anywhere on any screen.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://atom.io/packages/color-picker"&gt;Color picker&lt;/a&gt;
&lt;a class="reference external" href="https://atom.io/packages/an-color-picker"&gt;an color eyedropper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately it failed to install and displayed the error, &amp;quot;Unable to
download 400 Bad Request Repository inaccessible&amp;quot;. It seems to rely on
the &amp;quot;python&amp;quot; Atom package which is now deprecated. I was unable to find
a repo anywhere by googling.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://atom.io/packages/color-picker"&gt;Color picker&lt;/a&gt; has
easy-to-follow instructions and installed with no problem. It allows you
to quickly select any color visually with sliders. Then the RGB or
Hexadecimal values of your color are added as text in the editor in
proper format. However, we are looking for a color grabber to pull
colors from a screen object. This is more of a productivity enhancing
and color exploration tool for programmers. On to Python options.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach #2: Use the python tkcolorpicker package to grab the
colors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first thing I found on Google was &lt;a class="reference external" href="https://pypi.org/project/tkcolorpicker/"&gt;tkcolorpicker&lt;/a&gt;, a package that uses the
&lt;a class="reference external" href="https://lofipython.com/2016/02/29/tkinter-and-python-libraries/"&gt;tkinter&lt;/a&gt;
library. I couldn't tell exactly what it was, so let's find out. First,
install via &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip install&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
python -m pip install tkcolorpicker
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Then run the below script. Cool gadget for sure, but also not quite
what I was looking to use. It allows selection of a color with
sliders or input values, similar to Atom's color picker, but for user
input rather than color picking. Nice little tool. :D&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;img alt="color_picker_gui" class="wp-image-1462 alignright" src="https://pythonmarketer.files.wordpress.com/2018/09/color_picker_gui.png" style="width: 301px; height: 315px;" /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tk&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter.ttk&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ttk&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkcolorpicker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;askcolor&lt;/span&gt;

&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ttk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;theme_use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hex_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;askcolor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;askcolor() returns a tuple with both the RGB and hex codes selected by
the user. Above, we are unpacking that tuple into the hex_code and
RGB_code variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach #3: Use the Python eyedropper package to grab the colors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I then found &lt;a class="reference external" href="https://github.com/umluizlima/eyedropper"&gt;eyedropper&lt;/a&gt;
for Windows, which has a minimalist repository and offers a simple
approach to desktop eyedropper functionality. Install eyedropper via
pip:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
python -m pip install eyedropper
&lt;/pre&gt;
&lt;img alt="pyeyedropper_start" class="size-full wp-image-1458 alignright" src="https://pythonmarketer.files.wordpress.com/2018/09/pyeyedropper_start.png" style="width: 239px; height: 140px;" /&gt;
&lt;p&gt;Hover your mouse over the object you want to grab the color from (in my
case, the Atom text editor background). Alternatively, I was able to run
eyedropper from the command line by entering:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
py -m eyedropper
&lt;/pre&gt;
&lt;img alt="pasted_hex2" class="alignnone size-full wp-image-1461" src="https://pythonmarketer.files.wordpress.com/2018/09/pasted_hex2.png" style="width: 766px; height: 74px;" /&gt;
&lt;img alt="CCvOYFiUgAA4DJd" class="alignright" src="https://pythonmarketer.files.wordpress.com/2018/09/ccvoyfiugaa4djd.jpg" style="width: 151px; height: 116px;" /&gt;
&lt;p&gt;&lt;strong&gt;Mission possible.&lt;/strong&gt; Then I hit ctrl+v in a text file and there was the
hex code for my Atom background. Some of the colors that eyedropper
grabbed were nearly identical to those in the Atom text editor dark
theme. Others were not quite the same. I made slight eyeball adjustments
to the colors for some of the fonts.&lt;/p&gt;
&lt;div class="section" id="using-python-to-convert-hex-to-rgb-1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python"&gt;Using Python to convert hex to RGB&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Microsoft Word uses RGB codes but eyedropper gave us hex. To convert, I
found &lt;a class="reference external" href="https://www.webpagefx.com/web-design/hex-to-rgb/"&gt;this website&lt;/a&gt; practical and
quick. Alternatively, you could &lt;a class="reference external" href="https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python"&gt;convert a hex code to RGB with python&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hex_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter hex: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;RGB_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex_code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;RGB =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;img alt="rgb_to_hex" class="alignnone size-full wp-image-2308" src="http://pythonmarketer.files.wordpress.com/2018/09/e084c-rgb_to_hex-e1581286493172.jpg" style="width: 805px; height: 83px;" /&gt;
&lt;p&gt;Bonus: use pd.read_clipboard()
&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_clipboard.html"&gt;docs&lt;/a&gt;
to get the hex codes.&lt;/p&gt;
&lt;p&gt;Once eyedropper sends the color values to your system's clipboard, there
are multiple ways to access them. This alternative uses pandas.&lt;/p&gt;
&lt;p&gt;Installing pandas and &lt;a class="reference external" href="https://github.com/asweigart/pyperclip"&gt;pyperclip&lt;/a&gt; with pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;On Linux, install &lt;a class="reference external" href="https://github.com/astrand/xclip"&gt;xclip&lt;/a&gt; or &lt;a class="reference external" href="https://askubuntu.com/questions/705620/xclip-vs-xsel"&gt;xsel&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install xclip
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;To get the clipboard contents with pandas:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;hex_code_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_clipboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex_code_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Notes and Links&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Here's a Python &lt;a class="reference external" href="https://github.com/gigawhitlocks/eyedropper/blob/master/x-color-get.py"&gt;eyedropper script&lt;/a&gt;
featuring the &lt;a class="reference external" href="https://pillow.readthedocs.io/en/5.2.x/index.html"&gt;pillow&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/python-xlib/python-xlib"&gt;xlib&lt;/a&gt; libraries that I was
unable to get working.&lt;/li&gt;
&lt;li&gt;I didn't try &lt;a class="reference external" href="http://colorcop.net/"&gt;ColorCop for Windows&lt;/a&gt;, but it
may be a non-Python alternative.&lt;/li&gt;
&lt;li&gt;Did you know? Python 2 had a &lt;a class="reference external" href="https://docs.python.org/2/library/colorpicker.html"&gt;ColorPicker&lt;/a&gt; module that
is not in Python 3.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://dev.to/espoir/how-pandas-readclipboard-method-works-ake"&gt;How pandas read_clipboard method works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/blob/v1.0.1/pandas/io/clipboards.py#L10-L76"&gt;pandas to_clipboard and read_clipboard source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This &lt;a class="reference external" href="https://github.com/Toinane/colorpicker"&gt;desktop tool&lt;/a&gt; has
great U/X and an eyedropper feature. It runs on Electron, a
Javascript based framework. Coincidentally, Electron was used to
build Atom.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="coding, Colors, pandas, programming"></category><category term="atom"></category><category term="color"></category><category term="eyedropper"></category><category term="gui"></category><category term="python"></category></entry><entry><title>Gooey GUI for Python Scripts</title><link href="https://lofipython.com/gooey-gui-for-python-scripts.html" rel="alternate"></link><published>2018-08-25T16:32:00-05:00</published><updated>2018-08-25T16:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-08-25:/gooey-gui-for-python-scripts.html</id><summary type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of are Tkinter (comes in the standard library), wxPython, PyQT, easygui, &lt;a class="reference external" href="https://github.com/hoffstadt/DearPyGui"&gt;DearPyGui&lt;/a&gt; and PySimpleGUI. I &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/29/tkinter-and-python-libraries/"&gt;explored Tkinter&lt;/a&gt; back when I first got into Python. It was more intricate and offered more control over the look of your app, and took longer to pick up. Gooey is more of a pre-packaged GUI library.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/chriskiehl/Gooey"&gt;Gooey Github page&lt;/a&gt; was most useful to me and helped me to do what I needed. The script posted &lt;a class="reference external" href="http://pbpython.com/pandas-gui.html"&gt;in this blog&lt;/a&gt; helped as well. I needed to enable a human to supply three files and enter a number. Gooey was a good match for this. The library has two branches:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;some basic widgets piggyback off the &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2015/10/08/a-intro-to-argparse/"&gt;argparse&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;another part of the library uses a function called the GooeyParser. The GooeyParser offers more advanced widgets, like a file chooser. This was exactly what I was looking to use to pull in files for my script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Installing Gooey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Argparse comes stock with Python. You can install Gooey via the &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip installer&lt;/a&gt;. Open command prompt or terminal and enter:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install Gooey
&lt;/pre&gt;
&lt;p&gt;Below is a basic argparse/Gooey combination script. The argparse version offers a handful of widgets such as checkboxes and dropdown, but I had trouble getting them to work with the GooeyParser (used in 2nd script).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gooey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gooey&lt;/span&gt;

&lt;span class="nd"&gt;@Gooey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Report Generator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;575&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Demonstrating python&amp;#39;s vars built-in to store arguments in a python dict.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A simple argument parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epilog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is where you might put example usage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Help text for option X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Help text for option Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Campaign Number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Help text for option Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Campaign Segment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;All&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;campaign_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Campaign Number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;get_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Side note: Check out Python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#vars"&gt;vars() built-in&lt;/a&gt; function above. It returns the input data as a dictionary called user_inputs. Then we can get the values via the dictionary's keys. Pretty nifty!&lt;/blockquote&gt;
&lt;p&gt;The &amp;#64;Gooey() part of the code is an advanced function known as a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0318/"&gt;decorator in Python&lt;/a&gt;. Put simply, decorators are functions that modify the function to which they are attached.&lt;/p&gt;
&lt;p&gt;Below is my script that uses the more advanced GooeyParser for its &amp;quot;FileChooser&amp;quot; widget. Gooey allows you to group widgets together and set how many widgets per line with the gooey_options={} parameter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gooey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gooey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GooeyParser&lt;/span&gt;

&lt;span class="nd"&gt;@Gooey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email Campaign Reporting Generator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;575&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adding two argument groups, each accepting two arguments. Using gooey_options to set layout.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GooeyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Export campaign report spreadsheets and upload below.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;top_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gooey_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show_border&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;top_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Contact List&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Upload Send List (.xlsx)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FileChooser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;top_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Opens List&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Upload Opens List (.xlsx)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FileChooser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;top_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Unsubscribe List&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Upload Unsubscribe List (.xlsx)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FileChooser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bottom_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gooey_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show_border&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;bottom_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Campaign ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Number found in the Campaign &amp;#39;Reports&amp;#39; tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bottom_group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Campaign Segment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter A, B, or All. All lists supplied must match segment.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;get_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Overall, Gooey knows what it wants to be, an easy to use GUI framework for Python. It does it well. Here's a screenshot of my program's shiny GUI:&lt;/p&gt;
&lt;img alt="gooey_gui_shot_2" class="alignnone size-full wp-image-1431" src="https://pythonmarketer.files.wordpress.com/2018/08/gooey_gui_shot_2.png" style="width: 578px; height: 603px;" /&gt;
&lt;p&gt;Now that I have a GUI on top of my program and it delivers the expected output file, I'm hoping to take it one step further by packaging it up as a Windows .exe file. This would allow it to run as a desktop app on any Windows computer without the need to install Python or library dependencies. I've only begun exploring options to do this but a few libraries I've heard of are pyinstaller, cx_Freeze and Py2Exe. Updates coming if I figure it out. Cheers :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I did figure out how to compile my Gooey app to a Windows application with Pyinstaller. You can&amp;nbsp;&lt;a class="reference external" href="https://lofipython.com/packaging-python-as-a-windows-app/"&gt;read more on how I did it here&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, data, product development, programming, software"></category><category term="gooey"></category><category term="gui"></category><category term="python"></category><category term="software development"></category></entry><entry><title>Findstr, RegEx File Searches for Windows</title><link href="https://lofipython.com/findstr-aka-grep-for-windows.html" rel="alternate"></link><published>2018-07-15T19:52:00-05:00</published><updated>2018-07-15T19:52:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-07-15:/findstr-aka-grep-for-windows.html</id><summary type="html">&lt;p&gt;Findstr is the Windows alternative to GREP, which runs on the &lt;a class="reference external" href="https://www.howtogeek.com/182649/htg-explains-what-is-unix/"&gt;Unix operating system&lt;/a&gt;. Findstr searches files with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expressions&lt;/a&gt; and seems useful for string matching within files and directories.&amp;nbsp; It is one of over &lt;a class="reference external" href="https://www.lifewire.com/list-of-command-prompt-commands-4092302"&gt;280 command prompt commands&lt;/a&gt;. Here's the official&amp;nbsp;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/findstr"&gt;Windows Documentation&lt;/a&gt;&amp;nbsp;and some&amp;nbsp;&lt;a class="reference external" href="https://www.mkyong.com/linux/grep-for-windows-findstr-example/"&gt;Linux vs. Windows Examples …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Findstr is the Windows alternative to GREP, which runs on the &lt;a class="reference external" href="https://www.howtogeek.com/182649/htg-explains-what-is-unix/"&gt;Unix operating system&lt;/a&gt;. Findstr searches files with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expressions&lt;/a&gt; and seems useful for string matching within files and directories.&amp;nbsp; It is one of over &lt;a class="reference external" href="https://www.lifewire.com/list-of-command-prompt-commands-4092302"&gt;280 command prompt commands&lt;/a&gt;. Here's the official&amp;nbsp;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/findstr"&gt;Windows Documentation&lt;/a&gt;&amp;nbsp;and some&amp;nbsp;&lt;a class="reference external" href="https://www.mkyong.com/linux/grep-for-windows-findstr-example/"&gt;Linux vs. Windows Examples.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Windows announced that &lt;a class="reference external" href="https://hackaday.com/2019/06/10/windows-10-goes-to-shell/"&gt;Grep and several other Unix command line tools will be added to Windows 10&lt;/a&gt;. This is a new alternative to findstr.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This findstr command returns all lines containing an '&amp;#64;' in a text file.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
findstr &amp;#64; test.txt
&lt;/pre&gt;
&lt;img alt="findstr Emails" class="alignnone size-full wp-image-1406" src="https://pythonmarketer.files.wordpress.com/2018/07/findstr-emails.png" style="width: 602px; height: 48px;" /&gt;
&lt;p&gt;&lt;strong&gt;I was happy to see Findstr's convenient help menu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
findstr -?
&lt;/pre&gt;
&lt;img alt="findstr_help" class="alignnone size-full wp-image-1408" src="https://pythonmarketer.files.wordpress.com/2018/07/findstr_help.png" style="width: 657px; height: 603px;" /&gt;
&lt;p&gt;Regular expressions are so powerful. It's nice to have this utility within the command prompt. I am hoping to get to know some of the other 280 command prompt commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I've previously explored regex with Python. This Python regex example finds all words in a text file containing '&amp;#64;' symbols:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="c1"&gt;# read the file to string + regex email search&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# this regex returns a python list of emails:&lt;/span&gt;
    &lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(\S*@\S+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;img alt="findall_python" class="alignnone size-full wp-image-1405" src="https://pythonmarketer.files.wordpress.com/2018/07/findall_python.png" style="width: 633px; height: 173px;" /&gt;
&lt;p&gt;For more command prompt nuggets, check out my more recent post: &lt;a class="reference external" href="https://lofipython.com/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection/"&gt;Exploring Windows Command Line Tools, Batch Files and Remote Desktop Connection&lt;/a&gt;.&lt;/p&gt;
</content><category term="command prompt, data, python, Windows"></category><category term="programming"></category><category term="regex"></category></entry><entry><title>A Stroll Through Pandas 1.0, Python’s Tabular Data Powerhouse</title><link href="https://lofipython.com/pandas-pythons-excel-powerhouse.html" rel="alternate"></link><published>2018-05-12T03:39:00-05:00</published><updated>2018-05-12T03:39:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-05-12:/pandas-pythons-excel-powerhouse.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="https://pandas.pydata.org/"&gt;&lt;img alt="pandas" class="wp-image-2594 alignright" src="https://pythonmarketer.files.wordpress.com/2018/05/pandas.png" style="width: 301px; height: 122px;" /&gt;&lt;/a&gt;Thanks to pandas, I have automated some data cleaning and file reading processes at my job.&amp;nbsp;Here are some terms and code that have been useful or interesting to me after 2 years of exploration. I also checked out &amp;quot;&lt;a class="reference external" href="https://github.com/wesm/pydata-book"&gt;Python for Data Analysis&lt;/a&gt;&amp;quot; from the&lt;a class="reference external" href="https://www.chipublib.org/"&gt;Chicago Public Library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="https://pandas.pydata.org/"&gt;&lt;img alt="pandas" class="wp-image-2594 alignright" src="https://pythonmarketer.files.wordpress.com/2018/05/pandas.png" style="width: 301px; height: 122px;" /&gt;&lt;/a&gt;Thanks to pandas, I have automated some data cleaning and file reading processes at my job.&amp;nbsp;Here are some terms and code that have been useful or interesting to me after 2 years of exploration. I also checked out &amp;quot;&lt;a class="reference external" href="https://github.com/wesm/pydata-book"&gt;Python for Data Analysis&lt;/a&gt;&amp;quot; from the&lt;a class="reference external" href="https://www.chipublib.org/"&gt;Chicago Public Library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If I could suggest anything to be successful with pandas, it is repetition. I use it nearly every day at work. Dive into its &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/index.html"&gt;API documentation.&lt;/a&gt; There are tons of useful tools there, laid out with meticulous detail and examples. I began learning pandas with this PyCon 2015 &lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;tutorial from Brandon Rhodes&lt;/a&gt;, it's informative and entertaining! (It's a little dated now but I still recommend it.) The &lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt; by Jake VanderPlas is also a great example of pandas-related workflows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pythonpandas Installation and Version Compatibility&lt;/li&gt;
&lt;li&gt;Welcome to pandas 1.0&lt;/li&gt;
&lt;li&gt;Data Wrangling, Exploration and Broadcasting&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Series.str&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;Series.dt&lt;/tt&gt; accessors&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;apply&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;applymap&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;lambda&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;map&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;featuring &lt;tt class="docutils literal"&gt;pandas.to_markdown()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;SQL operations with &lt;tt class="docutils literal"&gt;df.merge()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pandas.read_sql()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pandas.read_clipboard()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;converting between Series and DataFrame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Turning json API responses into a dataframe with &lt;tt class="docutils literal"&gt;pandas.json_normalize()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Plotting Visualizations with matplotlib&lt;/li&gt;
&lt;li&gt;Supplementary Resources and Links&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="python-pandas-installation-and-version-compatibility"&gt;
&lt;h2&gt;(1) Python + pandas Installation and Version Compatibility&lt;/h2&gt;
&lt;p&gt;Python 3.6 and higher can &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html"&gt;install pandas 1.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing Python 3.8 on Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For Windows installation, see the python docs for an installer, &amp;quot;&lt;a class="reference external" href="https://docs.python.org/3/using/windows.html"&gt;Using Python on Windows&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing Python 3.8 on Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://linuxize.com/post/how-to-install-python-3-8-on-ubuntu-18-04/"&gt;Follow these steps to download and install Python 3.8 in the Ubuntu terminal.&lt;/a&gt; To upgrade to pandas 1.0, I installed Python 3.8, the &lt;a class="reference external" href="https://www.google.com/search?client=ubuntu&amp;amp;channel=fs&amp;amp;q=python+latest+stable+release&amp;amp;ie=utf-8&amp;amp;oe=utf-8"&gt;latest stable release&lt;/a&gt;, &amp;quot;&lt;a class="reference external" href="https://linuxize.com/post/how-to-install-python-3-8-on-ubuntu-18-04/"&gt;from source&lt;/a&gt;&amp;quot; on Ubuntu 16.04.&lt;/p&gt;
&lt;p&gt;If you intend to use &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_markdown.html"&gt;pandas.to_markdown()&lt;/a&gt; on Ubuntu, it might save you trouble to pre-emptively install the '_bz2' library before you build your Python from source.&lt;/p&gt;
&lt;p&gt;On Ubuntu, I ran into ModuleNotFoundError: No module named '_bz2' and fixed by entering in the terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install libbz2-dev
&lt;/pre&gt;
&lt;p&gt;I also saw this message when completing install:&lt;/p&gt;
&lt;blockquote&gt;
The necessary bits to build these optional modules were not found. To find the necessary bits, look in setup.py in detect-modules() for the module's name.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you need to re-build Python on Ubuntu, enter:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd /home/erick/Python-3.8.0/
./configure --enable-loadable-sqlite-extensions &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/pre&gt;
&lt;p&gt;I installed missing&amp;nbsp; _bz2 and _sqllite3 modules then re-built with these commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing Older pandas Versions on Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The version downloaded with this command is about 6 months behind the current version. For me, this installed pandas 0.17 on Ubuntu:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install python3-pandas
&lt;/pre&gt;
&lt;p&gt;As of February 2020, this command &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;installs pandas version 0.24 with pip&lt;/a&gt; when used with Python 3.5 on Linux Ubuntu 16.04:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3.5 -m pip install pandas
&lt;/pre&gt;
&lt;img alt="successful_python_install" class="alignnone wp-image-2420" src="https://pythonmarketer.files.wordpress.com/2018/05/successful_python_install.jpg" style="width: 676px; height: 186px;" /&gt;
&lt;p&gt;If pandas is already installed, you can upgrade with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="pip_list" class="alignnone wp-image-2572" src="http://pythonmarketer.files.wordpress.com/2018/05/d1733-pip_list-e1581434945203.jpg" style="width: 179px; height: 230px;" /&gt;&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
python -m pip install --upgrade pandas
&lt;/pre&gt;
&lt;p&gt;To check if pip is installed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip list
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Best Practice: Virtual Environments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt; with your new Python version.  &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; wasn't included in my Python 3.8 installation on Ubuntu 16.04, so I installed virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip --user install virtualenv
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Let's create a new virtual environment. Enter in terminal or command prompt:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv -p python3.8 add_env_name_here
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now, activate your new virtual environment on Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source add_env_name_here/bin/activate
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Or activate environment on Windows:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd add_env_name_here\scripts &amp;amp; activate
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;ImportError: Missing optional dependency 'tabulate'. Use pip or conda to install tabulate:&amp;quot; To use pd.to_markdown(), install Tabulate:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install tabulate
&lt;/pre&gt;
&lt;p&gt;To use pd.read_clipboard() on Linux, install &lt;a class="reference external" href="https://github.com/astrand/xclip"&gt;xclip&lt;/a&gt; or  &lt;a class="reference external" href="https://askubuntu.com/questions/705620/xclip-vs-xsel"&gt;xsel:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install xclip
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;I also saw a prompt to install pyperclip:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pyperclip
&lt;/pre&gt;
&lt;p&gt;Now install pandas 1.0 and &lt;a class="reference external" href="https://matplotlib.org/users/installing.html"&gt;matplotlib&lt;/a&gt; in your virtual environment for visualizations.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3.8 -m pip install pandas
python -m pip install -U matplotlib
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="welcome-to-pandas-1-0"&gt;
&lt;h2&gt;(2) Welcome to pandas 1.0&lt;/h2&gt;
&lt;p&gt;You did it! Welcome to the good life. The basis of pandas is the &amp;quot;&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;dataframe&lt;/a&gt;&amp;quot;, commonly abbreviated as df, which is similar to a spreadsheet. Another core pandas object is the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html"&gt;pandas.Series&lt;/a&gt; object, which is similar to a Python list or &lt;a class="reference external" href="http://cs231n.github.io/python-numpy-tutorial/"&gt;numpy&lt;/a&gt; array. When imported, pandas is aliased as &amp;quot;pd&amp;quot;. The pd object allows you to access many useful pandas functions. I'll use it interchangeably with pandas in this post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The library’s name derives from&amp;nbsp;&lt;strong&gt;pan&lt;/strong&gt;el&amp;nbsp;&lt;strong&gt;da&lt;/strong&gt;ta, a common term for multidimensional data sets encountered in statistics and econometrics.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.dlr.de/sc/Portaldata/15/Resources/dokumente/pyhpc2011/submissions/pyhpc2011_submission_9.pdf"&gt;pandas: a Foundational Python Library for Data Analysis and Statistics&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wes McKinney&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="data-wrangling-exploration-and-broadcasting"&gt;
&lt;h2&gt;(3) &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Data_wrangling"&gt;Data Wrangling&lt;/a&gt;, Exploration and Broadcasting&lt;/h2&gt;
&lt;p&gt;Data is commonly read in from file with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"&gt;pd.read_csv()&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_bank_statement.csv&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# you may sometimes need to specify an alternate encoding: encoding = &amp;quot;ISO-8859-1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns a tuple: (# of rows, # of columns)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Create a dataframe from a list of Python lists, named movies below, with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;pd.DataFrame&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;column_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Release Date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Movie Budget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Worldwide Gross&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ocean&amp;#39;s 11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12/7/2001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Danny Ocean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;George Clooney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$85,000,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; $450,728,529&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ocean&amp;#39;s 11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12/7/2001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tess Ocean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia Roberts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$85,000,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; $450,728,529&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Runaway Bride&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6/30/1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ike Graham&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Richard Gere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$70,000,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$309,457,509&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Runaway Bride&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6/30/1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Maggy Carpenter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia Roberts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$70,000,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$309,457,509&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bonnie and Clyde&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9/1/1967&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Clyde Barrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Warren Beaty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$2,500,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$70,000,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bonnie and Clyde&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9/1/1967&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bonnie Parker&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Faye Dunaway&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$2,500,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$70,000,000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Movie Budget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Worldwide Gross&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tablefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;simple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Let's print the table to our terminal with &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_markdown.html"&gt;pd.to_markdown()&lt;/a&gt; &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html"&gt;new in pandas version 1.0.0&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="simple_layout_markdown" class="alignnone size-full wp-image-2538" src="https://pythonmarketer.files.wordpress.com/2018/05/simple_layout_markdown.jpg" style="width: 847px; height: 189px;" /&gt;
&lt;p&gt;&lt;strong&gt;Slicing and sorting a dataframe, removing duplicates, and working with datetime objects&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Let's create a new dataframe slice with only two columns&lt;/li&gt;
&lt;li&gt;Drop duplicate movies&lt;/li&gt;
&lt;li&gt;Convert the dates to datetime objects&lt;/li&gt;
&lt;li&gt;Get the year from an array of datetime objects&lt;/li&gt;
&lt;li&gt;Set the year as the dataframe index&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Release Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# create year column using the pd.Series.dt datetime accessor:&lt;/span&gt;
&lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;
&lt;span class="n"&gt;date_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;date_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tablefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="dates-of-movies"&gt;
&lt;h3&gt;&lt;img alt="dates_of_movies" class="alignnone wp-image-2537" src="https://pythonmarketer.files.wordpress.com/2018/05/dates_of_movies.jpg" style="width: 662px; height: 148px;" /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Applying Broadcasting in pandas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Broadcasting means to map a function or an arithmetic calculation over an over an array (using apply or map) or dataframe (applymap).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Summing up, apply works on a row/column basis of a DataFrame, applymap works element-wise on a DataFrame, and map works element-wise on a Series.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stack Overflow [&lt;a class="reference external" href="https://stackoverflow.com/questions/19798153/difference-between-map-applymap-and-apply-methods-in-pandas"&gt;Source&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Applying a function to a pandas column&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Convert columns to int and calculate the difference between two columns.&lt;/li&gt;
&lt;li&gt;Let's format those integers back to dollars with python's lambda and pandas' applymap for extra jazz.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_dollars_as_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dollars&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Accepts a dollar formatted string, returns an int.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dollars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movie Budget&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Worldwide Gross&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movie Budget&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Worldwide Gross&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_dollars_as_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movie Net Income&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Worldwide Gross&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movie Budget&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;money_columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movie Budget&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Worldwide Gross&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movie Net Income&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;money_columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;money_columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&lt;/span&gt;&lt;span class="si"&gt;{:,}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Creating a new column and writing to a .csv file&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Then add the IMDB ratings of our three films in a new column.&lt;/li&gt;
&lt;li&gt;Finally, write the result to markdown and a csv file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# create a new column with the three movies&amp;#39; IMDB ratings&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IMDB Rating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;7.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;7.8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tablefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Movies.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Actor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tablefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;github&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;img alt="IMDB_movies" class="alignnone size-full wp-image-2540" src="https://pythonmarketer.files.wordpress.com/2018/05/imdb_movies.jpeg" style="width: 870px; height: 117px;" /&gt;
&lt;p&gt;See also: pandas.Series.value_counts() &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.value_counts.html"&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.value_counts.html&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;Notice for column names without spaces, you can use dot notation instead of brackets:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# both valid ways to access column by name&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Actor&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Lowercase column names Python's map function:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Strip whitespace from a column of strings with the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.html"&gt;pandas.Series.str&lt;/a&gt; accessor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Character&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Character&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Fix pesky leading zero zip codes with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.zfill.html"&gt;str.zfill()&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;log_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Get a row by index number &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html"&gt;pandas.DataFrame.loc[]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;first_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;third_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Filter the df to get rows where the actor is 'Julia Roberts'.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;julia_roberts_movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Actor&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Julia Roberts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;julia_roberts_movies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&amp;quot;Get&amp;quot; an item from a column of lists with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.get.html"&gt;str.get()&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# returns first item in each cell&amp;#39;s list into new column&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Execute SQL-like operations between dataframes with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html"&gt;df.merge()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, use &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.copy.html"&gt;df.copy()&lt;/a&gt; to create a new dataframe copy of our actors table above.&amp;nbsp; By default, df.merge() uses an inner join to merge two dfs on a common column. Let's add each film's release year from our date_df to our original actors table, with an inner join based on 'Title':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;actors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# slice only the columns we want to merge:&lt;/span&gt;
&lt;span class="n"&gt;date_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;joined_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# You can pass the number of rows to see to head. It defaults to 5.&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joined_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Execute database queries with &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html"&gt;pd.read_sql()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When the chunksize argument is passed, pd.read_sql() returns an iterator. We can use this to iterate through a database with lots of rows. When combined with DB connection libraries like &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/11/30/inserting-new-records-into-a-microsoft-access-database-with-python/"&gt;pyodbc&lt;/a&gt; or SQLAlchemy, you can process a database in chunks. In this example, it's an Access DB connection via pyodbc to process 500,000 rows per chunk. Pyodbc works on a wide range of other databases also.&lt;/p&gt;
&lt;blockquote&gt;
uses &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html"&gt;pd.Series.isin()&lt;/a&gt; to check if each email is in the DB.&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyodbc&lt;/span&gt;

&lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email@email.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;notanemail@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gmail@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;connection_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\path_to_db\emails_database.accb;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyodbc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    SELECT *&lt;/span&gt;
&lt;span class="s2"&gt;    FROM   ADD_TABLE_NAME&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chunksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;emails_in_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db_chunk&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;db_chunk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails_in_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;emails_in_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;emails_in_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_Email_Query_Results.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
In case you are wondering, enumerate is a &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html"&gt;python built-in&lt;/a&gt; for enumerating, or counting an iterable, e.g. list or generator, as you iterate through it.&lt;/blockquote&gt;
&lt;p&gt;Using &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_clipboard.html"&gt;pd.read_clipboard():&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;clipboard_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_clipboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clipboard_contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_clipboard.html"&gt;pd.to_clipboard()&lt;/a&gt; to store a dataframe as clipboard text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;truths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandas is great&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I love pandas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandas changed my life&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;truths&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Truths&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_clipboard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clipboard_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Press ctrl-v &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clipboard_contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Convert the clipboard contents to df with pd.DataFrame() &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;clipboard_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Press ctrl-v &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;clipboard_contents&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;If the clipboard dataframe has one column, you could &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze"&gt;squeeze&lt;/a&gt;  the clipboard contents into a &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html"&gt;pd.Series&lt;/a&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;clipboard_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_clipboard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;clipboard_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clipboard_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;clipboard_contents&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Clipboard Data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;clipboard_series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squeeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;columns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clipboard_series&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Inversely, consider using &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.to_frame.html#pandas.Series.to_frame"&gt;pandas.Series.to_frame()&lt;/a&gt; to convert a Series to a dataframe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;clipboard_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Press ctrl-v &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clipboard_contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="turning-json-api-responses-into-a-dataframe-with-pd-json-normalize"&gt;
&lt;h2&gt;(4) Turning json API responses into a dataframe with pd.json_normalize()&lt;/h2&gt;
&lt;p&gt;Update: beginning in pandas 1.0, &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.json_normalize.html"&gt;json_normalize&lt;/a&gt; became a top-level pandas namespace. For &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.io.json.json_normalize.html"&gt;older pandas versions&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pseudo_API.com/endpoint/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page_size&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contact_sync&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# decode response into json&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;any_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;pandas.json_normalize() is now exposed in the top-level namespace. Usage of json_normalize as pandas.io.json.json_normalize is now deprecated and it is recommended to use json_normalize as pandas.json_normalize() instead (GH27586).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/whatsnew/v1.0.0.html"&gt;What's new in pandas 1.0.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="plotting-visualizations-with-matplotlib"&gt;
&lt;h2&gt;(5) Plotting Visualizations with matplotlib&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Make a bar plot of the movie release year counts using pandas and matplotlib formatting.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.ticker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MaxNLocator&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.ticker&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ticker&lt;/span&gt;

&lt;span class="n"&gt;column_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Release Date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ocean&amp;#39;s 11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12/7/2001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Danny Ocean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;George Clooney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ocean&amp;#39;s 11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12/7/2001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tess Ocean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia Roberts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Runaway Bride&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6/30/1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ike Graham&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Richard Gere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Runaway Bride&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6/30/1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Maggy Carpenter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia Roberts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bonnie and Clyde&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9/1/1967&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Clyde Barrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Richard Gere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bonnie and Clyde&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9/1/1967&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bonnie Parker&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia Roberts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Release Year of Movies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_major_locator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MaxNLocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images/Movie_Plot.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Use Jupyter Notebook to show plot, and/or download plot from command line.&lt;/p&gt;
&lt;p&gt;Plot George Clooney's movies over time in a line graph. [&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Source&lt;/a&gt;]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Actor&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;George Clooney&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;figure.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="supplementary-resources-and-guides"&gt;
&lt;h2&gt;(7) Supplementary Resources and Guides&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Popular Supporting Libraries and Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.numpy.org/"&gt;NumPy (Arrays and math)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://matplotlib.org/#"&gt;Matplotlib (Visualization)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://seaborn.pydata.org/"&gt;Seaborn (Visualization)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bokeh.pydata.org/en/latest/docs/installation.html"&gt;Bokeh (Visualization)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jupyter.org/"&gt;Jupyter Notebook (Reproducible Sharing and Viz)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Resources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;pandas from the Ground Up (Video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://colab.research.google.com/drive/1a4sbKG7jOJGn4oeonQPA8XjJm7OYgcdX"&gt;Google's Intro to pandas Jupyter Notebook&lt;/a&gt; (Tutorial)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/10min.html"&gt;10 Minutes to pandas (Documentation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.r_.html"&gt;Numpy's&lt;/a&gt; &lt;a class="reference external" href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.r_.html"&gt;r and c_ stacking helpers to concatenate arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rhodesmill.org/brandon/2014/pandas-payroll/"&gt;Calculating Taxes with pandas&lt;/a&gt; (Blog)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="coding, data, excel, pandas, python"></category><category term="data analysis"></category><category term="programming"></category><category term="software"></category></entry><entry><title>list(cool_python_things)</title><link href="https://lofipython.com/blog_post-listcool_python_things.html" rel="alternate"></link><published>2018-03-24T19:38:00-05:00</published><updated>2018-03-24T19:38:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-03-24:/blog_post-listcool_python_things.html</id><summary type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project
contains&lt;strong&gt;pytudes&lt;/strong&gt;—Python programs for perfecting programming
skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and
data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes
is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt;
- Fuzzy string matching python library, written …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project
contains&lt;strong&gt;pytudes&lt;/strong&gt;—Python programs for perfecting programming
skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and
data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes
is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt;
- Fuzzy string matching python library, written by SeatGeek&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://soundcloud.com/talkpython"&gt;Talk Python to Me&lt;/a&gt; - Python
podcast&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.oreilly.com/programming/free/?imm_mid=0e20a9&amp;amp;cmp=em-prog-na-na-afterp_triggered_email_programming_resources"&gt;Free Programming Books from O'Reilly&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="coding, pandas, programming"></category><category term="computers"></category><category term="python"></category></entry><entry><title>How to Install Libraries and Enable the pip Installer in Python</title><link href="https://lofipython.com/how-to-python-pip-install-new-libraries.html" rel="alternate"></link><published>2018-01-20T17:50:00-06:00</published><updated>2018-01-20T17:50:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-01-20:/how-to-python-pip-install-new-libraries.html</id><summary type="html">&lt;p&gt;Python comes with a bunch of &lt;a class="reference external" href="https://docs.python.org/3/py-modindex.html"&gt;standard modules&lt;/a&gt;. My favorites are
shutil, glob, datetime, time, os (operating system), re (regular
expressions) and webbrowser. The standard library is loaded.&lt;/p&gt;
&lt;p&gt;Inevitably, you'll want to install new libraries from Python's rich
ecosystem of external modules. Enter pip, Python's handy package manager
and people's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python comes with a bunch of &lt;a class="reference external" href="https://docs.python.org/3/py-modindex.html"&gt;standard modules&lt;/a&gt;. My favorites are
shutil, glob, datetime, time, os (operating system), re (regular
expressions) and webbrowser. The standard library is loaded.&lt;/p&gt;
&lt;p&gt;Inevitably, you'll want to install new libraries from Python's rich
ecosystem of external modules. Enter pip, Python's handy package manager
and people's champion.&lt;/p&gt;
&lt;p&gt;This post will teach you some Python history, show how to install
pandas, and help you troubleshoot problems if it's not working. You'll
find Windows and Linux commands for venv setup (recommended). With pip,
you'll feel like Neo when installing new modules. Any skill is at your
fingertips. It's like learning kung fu. There's probably a library for
that!&lt;/p&gt;
&lt;img alt="I know kung fu" class="alignnone size-full wp-image-1321" src="http://pythonmarketer.files.wordpress.com/2018/01/19c0c-i-know-kung-fu-e1516470914221.png" style="width: 1277px; height: 532px;" /&gt;
&lt;p&gt;&lt;strong&gt;First, Some Python Version Caveats + History&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python 2 reached end of life on January 1st, 2020&lt;/strong&gt;.
&lt;a class="reference external" href="https://www.python.org/doc/sunset-python-2/"&gt;Python 2 has officially been sunset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python comes with pip now, no setup is required. But certain versions
such as Python 3.2 or the Python 2.7 that came stock on my improbably
still functioning 2008 black Macbook, for example, may not have it
installed.&lt;/p&gt;
&lt;p&gt;In December 2021, Python 3.6 reached &lt;a class="reference external" href="https://devguide.python.org/devcycle/#end-of-life-branches"&gt;&amp;quot;end of life phase&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python 3.6 is &amp;quot;now effectively frozen&amp;quot;. Read more in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0494/"&gt;PEP 494&lt;/a&gt;. (Released Oct. 2022)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; use Python 3.7 to 3.11. This blog endorses using the lightning
fast Python version &lt;a class="reference external" href="https://www.python.org/downloads/release/python-3110/"&gt;3.11.&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="enter-this-in-your-terminal"&gt;
&lt;h2&gt;Enter This in Your Terminal&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;
python -m pip install pandas
&lt;/pre&gt;
&lt;p&gt;Pandas is a super useful library for wrangling spreadsheet data, AKA
&amp;quot;tabular&amp;quot; data. If successful, you should see activity that looks
similar to the below screenshot, where I am installing &lt;a class="reference external" href="https://openpyxl.readthedocs.io/en/stable/"&gt;openpyxl&lt;/a&gt;, an additional Python
Excel library you'll likely want. You are good to go! This is the part
where you get to feel like Neo! See &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;Installing Python Modules&lt;/a&gt; in the Python
Documentation for more detailed instructions.&lt;/p&gt;
&lt;img alt="neo_pip" class="alignnone size-full wp-image-1322" src="http://pythonmarketer.files.wordpress.com/2018/01/de9d6-neo_pip-e1587604013861.png" style="width: 650px; height: 340px;" /&gt;
&lt;p&gt;&lt;strong&gt;To view all your installed libraries, enter:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip list
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Write a &amp;quot;requirements.txt&amp;quot; of installed libraries:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;You can list your outdated packages with the --outdated argument:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip list --outdated
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Use pip's -h help command line argument:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip -h
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;View your system and user pip config settings:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip config debug
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Take a look at this &lt;a class="reference external" href="https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/"&gt;list of 20 modules&lt;/a&gt;
to get started. Here is another &lt;a class="reference external" href="https://github.com/vinta/awesome-python"&gt;more comprehensive list of libraries&lt;/a&gt; you can now install.&lt;/li&gt;
&lt;li&gt;Swing by the pip documentation &lt;a class="reference external" href="https://pip.pypa.io/en/stable/quickstart/"&gt;Quickstart&lt;/a&gt;and &lt;a class="reference external" href="https://pip.pypa.io/en/stable/user_guide/"&gt;User Guide&lt;/a&gt; to learn some helpful
commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/search/?q=time+travel"&gt;PyPI, the Python Package Index&lt;/a&gt; is the official Python
package repository.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://snarky.ca/why-you-should-use-python-m-pip/"&gt;Why you should use 'python -m pip'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://opensource.com/downloads/pip-cheat-sheet?utm_medium=Email&amp;amp;utm_campaign=weekly&amp;amp;sc_cid=7013a000002DAKPAA4"&gt;pip cheat sheet from opensource.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Congrats on figuring out how to install packages with pip, have fun!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="having-issues-try-upgrading-your-pip-version"&gt;
&lt;h2&gt;Having issues? Try upgrading your pip version.&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
python -m pip install --upgrade pip
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="try-the-ensurepip-command"&gt;
&lt;h2&gt;Try the ensurepip command.&lt;/h2&gt;
&lt;p&gt;This command will install and upgrade pip to the newest version. New in
Python 3.4:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m ensurepip --upgrade
&lt;/pre&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The ensurepip `
&amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip"&gt;https://docs.python.org/3/library/ensurepip.html#module-ensurepip&lt;/a&gt;&amp;gt;`__
package provides support for bootstrapping the pip installer into an
existing Python installation or virtual environment. This
bootstrapping approach reflects the fact that pip is an independent
project with its own release cycle, and the latest available stable
version is bundled with maintenance and feature releases of the
CPython reference interpreter.&amp;quot;&lt;/p&gt;
&lt;p&gt;- &lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;ensurepip Python Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should follow best practice and &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;create a virtual environment&lt;/a&gt; before installing
libraries. &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; or
&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtualenv&lt;/a&gt;
will help you out. To create with venv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 -m venv add_env_name_here
&lt;/pre&gt;
&lt;p&gt;After your environment is created, activate it with the first command
below, then install a library on Ubuntu Linux:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source add_env_path_here/bin activate
python -m pip install pandas
&lt;/pre&gt;
&lt;p&gt;Alternatively, on Windows computers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd add_env_path_here\scripts &amp;amp; activate
python -m pip install pandas
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Getting the prefix right can be tricky.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since this was written, I moved to Python 3.11. When I first moved from
Python 2 to 3 on Windows, I somehow accidentally configured the
following behavior: entering &lt;strong&gt;python some_program.py&lt;/strong&gt;ran a .py file
with Python 2. Whereas, entering &lt;strong&gt;py some_program.py&lt;/strong&gt;ran a .py file
with Python 3.&lt;/p&gt;
&lt;p&gt;In the install command, the prefix is a reference to your Python
executable. You may just need to alter your prefix to call it correctly.
Here are some to try in place of &amp;quot;python&amp;quot;. Observe what happens when you
run these command variations.Good luck!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 -m pip install pandas
python3.11 -m pip install pandas
py -m pip install pandas
pip3 install pandas
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-manually-enable-the-pip-installer"&gt;
&lt;h2&gt;How to Manually Enable the pip Installer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The rest of this post may be useful to you if you are:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Working on legacy Python 2 code or Python 3.3 or lower for which pip
is not installed.&lt;/li&gt;
&lt;li&gt;Seeking to fix a faulty pip install that is not working properly.&lt;/li&gt;
&lt;li&gt;Curious to know how to manually set up pip.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assumes Python is already &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;installed&lt;/a&gt;. If you're running Windows 10, I
found it easy to install Python from the &lt;a class="reference external" href="https://www.microsoft.com/en-us/p/python-39/9p7qfqmjrfp7?activetab=pivot:overviewtab"&gt;Windows store&lt;/a&gt;.
Download the &lt;a class="reference external" href="https://bootstrap.pypa.io/get-pip.py"&gt;get-pip.py file&lt;/a&gt;.
Go to the link, right click the page and &amp;quot;Save As&amp;quot; a .py file to
download. Then place the file where you want to access it. I placed mine
in C:Python27Libsite-packages&lt;/p&gt;
&lt;p&gt;You could also download the file with &lt;a class="reference external" href="https://curl.haxx.se/"&gt;curl&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pyt-pip.py
&lt;/pre&gt;
&lt;p&gt;If you are not sure where your site-packages folder is, type &lt;a class="reference external" href="https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory"&gt;python -m
site&lt;/a&gt;
into command prompt for file path ideas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run the get-pip.py file.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using command prompt's cd command with a Windows &amp;quot;&amp;amp;&amp;quot; operator to run the
Python file in a Windows command prompt:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd c:\Python27\Lib\site-packages &amp;amp; python get-pip.py
&lt;/pre&gt;
&lt;p&gt;Or Linux terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd /Python27/Lib/site-packages &amp;amp;&amp;amp; python get-pip.py
&lt;/pre&gt;
&lt;p&gt;You should see some activity in command prompt that shows
installation/updating of &amp;quot;setup&amp;quot; and &amp;quot;wheel&amp;quot;. When it finishes, you have
installed pip.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type into command prompt at the same location:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install requests
&lt;/pre&gt;
&lt;p&gt;This should install the Requests module into your Python libraries.
Requests is an http module which is highly regarded almost universally
by the Python community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading! Check out these other posts with pip installed
library examples:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lofipython.com/fix-spelling-and-grammar-with-language_tool_python-and-textblob/"&gt;Fix Grammar and Spelling with language_tool_python and textblob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lofipython.com/gooey-gui-for-python-scripts/"&gt;gooey&lt;/a&gt; - GUI
library&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lofipython.com/delete-all-your-tweets-with-tweepy-and-the-twitter-api/"&gt;tweepy&lt;/a&gt;
- Twitter library&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lofipython.com/how-to-make-json-requests-with-python/"&gt;A Guide to Making HTTP requests&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming"></category><category term="command line"></category><category term="computers"></category><category term="matrix"></category><category term="neo"></category><category term="pip"></category><category term="python"></category><category term="python libraries"></category><category term="software"></category></entry><entry><title>Python File Handling Basics</title><link href="https://lofipython.com/python-file-handling-basics.html" rel="alternate"></link><published>2018-01-14T18:53:00-06:00</published><updated>2018-01-14T18:53:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-01-14:/python-file-handling-basics.html</id><summary type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file. &lt;a class="reference external" href="https://github.com/BurntSushi/nfldb/wiki/Python-&amp;amp;-pip-Windows-installation"&gt;You need to have Python 3 installed&lt;/a&gt;. In the same folder as your .py file, save a .txt file with some words in it. Alright, let's write some code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter your file name. e.g. words.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;file_handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;file_handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;In line 1, we ask the user to enter their file name with Python's raw_input function. When the program runs, the user enters their text file name with extension. This line stores the name in a variable called file_name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 2,&lt;/strong&gt; we open your text file and store it in a variable I have named file_handle. Think of the file handle as a bridge between your code and the text file. Quick point about the 'r' above: that tells the program to open the file in &amp;quot;Read&amp;quot; mode. There are several different file modes in programming. Some modes are just for reading an existing file, some are just for writing a new file, and some are capable of both. &lt;a class="reference external" href="https://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w/16208298"&gt;This Stack Overflow post&lt;/a&gt; is well written and details the differences between file modes. Once established, the file handle allows you to read the file's contents or write new contents to the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 3,&lt;/strong&gt;&amp;nbsp;we are calling the .readlines() method on our file handle. This method takes the file contents and stores them, line by line, into a list named &amp;quot;lines&amp;quot;. An alternative method is .read(), which opens the file and stores its contents as one string. Try switching this out in place of&amp;nbsp; .readlines() to check out the difference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4,&lt;/strong&gt; we are printing the stored lines to show them to the user. We now have the file contents, ready to be used however we please.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 5&lt;/strong&gt;, we are closing the file.&lt;/p&gt;
&lt;p&gt;Below, we are going to write a new file using the with statement, which is generally accepted as the best way to read or write a file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;Notes.txt&amp;quot;, &amp;quot;w&amp;quot;) as fhand:
    fhand.write(&amp;quot;Did you know whales can live up to 90 years?&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;In line 1, we are using Python's input function to ask the user what to name the file and storing it in a variable named file_name.&lt;/p&gt;
&lt;p&gt;In line 2,&amp;nbsp; we are calling the open function again that we used in the first example, but this time, notice the &amp;quot;w&amp;quot;. This indicates that we are opening the file in &amp;quot;write&amp;quot; mode.&lt;/p&gt;
&lt;p&gt;In line 3, we are calling the .write() method on our file handle, named save_file, and passing it our text to be saved in our new file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4&lt;/strong&gt;, we are closing the file, completing the creation of our new file in the same folder as our .py program file.&lt;/p&gt;
&lt;p&gt;Your program is now ready to be run. Double-click your .py file to execute it.&lt;/p&gt;
&lt;p&gt;Before learning Python, file operations were a mystery to me. It took me a while to understand this clearly, and I wanted to share. Once you master these basic file operations, programming gets to be a lot more fun. Do try it out for yourself :D&lt;/p&gt;
</content><category term="coding, programming"></category><category term="data"></category><category term="python"></category><category term="software"></category></entry><entry><title>Creating A Simple Website and Server Environment with Node.js and Express.js</title><link href="https://lofipython.com/creating-a-simple-website-and-server-environment-with-node-js-and-express-js.html" rel="alternate"></link><published>2017-08-09T21:16:00-05:00</published><updated>2017-08-09T21:16:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-08-09:/creating-a-simple-website-and-server-environment-with-node-js-and-express-js.html</id><summary type="html">&lt;p&gt;Here is what I have deduced is the fastest way to get an app up and
running with Node.js. This requires some familiarity with using the
command line. I completed the Codeacademy course &amp;quot;&lt;a class="reference external" href="https://www.codecademy.com/learn/learn-the-command-line"&gt;Learn The Command
Line&lt;/a&gt;&amp;quot;
before beginning with Node.js. I think it helped me better understand …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is what I have deduced is the fastest way to get an app up and
running with Node.js. This requires some familiarity with using the
command line. I completed the Codeacademy course &amp;quot;&lt;a class="reference external" href="https://www.codecademy.com/learn/learn-the-command-line"&gt;Learn The Command
Line&lt;/a&gt;&amp;quot;
before beginning with Node.js. I think it helped me better understand
what the commands are and what they do.&lt;/p&gt;
&lt;p&gt;Download and install &lt;a class="reference external" href="https://nodejs.org/en/"&gt;Node.JS&lt;/a&gt; Open the node
command prompt. This was done on a windows machine.&lt;/p&gt;
&lt;p&gt;First, create a folder for your app(s):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
mkdir node_apps
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Change the command prompt directory to your app's folder:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code literal-block"&gt;
cd \app_name
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Creates json file for your app. Fill out applicable info or just hit enter until the file is created.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code literal-block"&gt;
npm init
&lt;/pre&gt;
&lt;p&gt;Install express.js module in node.js:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
npm install express
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Install express-generator module in node.js:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code literal-block"&gt;
npm install express-generator -g
&lt;/pre&gt;
&lt;p&gt;Create the structure for your app and all necessary folders. (views,
css, Javascript, routing, etc.)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
express app_name
&lt;/pre&gt;
&lt;p&gt;Ensure all app module dependencies are installed:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
npm install
&lt;/pre&gt;
&lt;p&gt;Start your server and web app:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
npm start
&lt;/pre&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in a browser. Port 3000 is the default port
of Express. Your app is live in dev environment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I learned most of this from &lt;a class="reference external" href="https://codeforgeek.com/2014/10/express-complete-tutorial-part-1/"&gt;this great blog post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The above does not include a database integration. I integrated with
a MongoDB database by &lt;a class="reference external" href="https://closebrace.com/tutorials/2017-03-02/the-dead-simple-step-by-step-guide-for-front-end-developers-to-getting-up-and-running-with-nodejs-express-and-mongodb"&gt;following the instructions in this post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This &lt;a class="reference external" href="https://www.youtube.com/watch?v=1uFY60CESlM"&gt;YouTube video&lt;/a&gt;
was also very helpful to me for figuring out MongoDB and Node.js
integration.&lt;/li&gt;
&lt;li&gt;An HTML shorthand language called jade (aka pug) comes stock within
Express.js. &lt;a class="reference external" href="https://webapplog.com/jade/"&gt;Here's further reading&lt;/a&gt;
on the pros and cons.&lt;/li&gt;
&lt;li&gt;All of the above has been from my own studies. I do not claim
anything listed as the most efficient or best way to use Node.js.
This is what has worked for me over the past two days.&lt;/li&gt;
&lt;li&gt;It feels good to whip up a nimble app environment that is capable of
producing and supporting world changing software; Node.js is used by
Netflix, PayPal, Microsoft and Uber.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="coding, javascript, programming, web development"></category><category term="command line"></category><category term="creating websites"></category><category term="express.js"></category><category term="mongodb"></category><category term="Node.js"></category><category term="web&#10;dev"></category><category term="website"></category></entry><entry><title>Oversimplified Javascript Terms</title><link href="https://lofipython.com/oversimplified-javascript-terms.html" rel="alternate"></link><published>2017-08-05T18:37:00-05:00</published><updated>2017-08-05T18:37:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-08-05:/oversimplified-javascript-terms.html</id><summary type="html">&lt;p&gt;I'm finally coming around in my understanding of Javascript. Here are a few quick explanations to help you if you are new to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; = The language of the web. Most commonly used as a complement to HTML and CSS to create an interactive website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt; = A popular Javascript library …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm finally coming around in my understanding of Javascript. Here are a few quick explanations to help you if you are new to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; = The language of the web. Most commonly used as a complement to HTML and CSS to create an interactive website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JQuery&lt;/strong&gt; = A popular Javascript library with many powerful commands that are quick and easy to call.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node.JS&lt;/strong&gt; = Software that allows you to run Javascript from the command line without being connected to the internet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Express.JS&lt;/strong&gt; = A popular Node.JS framework.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; = A popular front-end Javascript web framework. There are many out there but this seems to be the one I've heard of the most.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;I've begun to see a pattern with programming languages:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;1) Learn to execute the core building blocks. (using variables, loops, functions, etc.)&lt;/div&gt;
&lt;div class="line"&gt;2) Learn more advanced libraries, documentation and uses.&lt;/div&gt;
&lt;div class="line"&gt;3) Consider using and learning web frameworks depending on what you're trying to do with the language.&lt;/div&gt;
&lt;div class="line"&gt;4) Practice to hone your knowledge. Build things you like.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I've also noticed that Javascript has been easier to learn than Python was for me, because it's not my first programming language. The concepts are the same. The syntax can trip me up at times, but I'm currently flying through &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-javascript"&gt;Codeacademy's Javascript courses&lt;/a&gt;. Sometimes it even seems fun!&lt;/p&gt;
</content><category term="coding, javascript, programming"></category><category term="angular"></category><category term="express.js"></category><category term="javascript terms"></category><category term="JQuery"></category><category term="Node.js"></category><category term="software"></category><category term="understanding javascript"></category><category term="web frameworks."></category></entry><entry><title>Algorithms Will Decide The Future</title><link href="https://lofipython.com/algorithms-will-decide-the-future.html" rel="alternate"></link><published>2017-08-01T17:13:00-05:00</published><updated>2017-08-01T17:13:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-08-01:/algorithms-will-decide-the-future.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Algorithm: a process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently read &amp;quot;&lt;a class="reference external" href="https://www.amazon.com/Homo-Deus-Brief-History-Tomorrow/dp/0062464310"&gt;Homo Deus&lt;/a&gt;&amp;quot;, a book by Yuval Noah Harari. It explores the idea that humans may simply be algorithmic decision making systems.&amp;nbsp;AKA self-aware, self-learning algorithms. There are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Algorithm: a process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently read &amp;quot;&lt;a class="reference external" href="https://www.amazon.com/Homo-Deus-Brief-History-Tomorrow/dp/0062464310"&gt;Homo Deus&lt;/a&gt;&amp;quot;, a book by Yuval Noah Harari. It explores the idea that humans may simply be algorithmic decision making systems.&amp;nbsp;AKA self-aware, self-learning algorithms. There are many parallels between a human and a computer algorithm.&lt;/p&gt;
&lt;p&gt;The author says there are organic (human) and non-organic (machine) algorithms. Non-organic algorithms will someday have far more capability than organic algorithms. In some cases, such as diagnosing medical conditions, they already do.&lt;/p&gt;
&lt;p&gt;He also recaps the history of humanity, which was a trend towards Humanism, the misguided notion that humans can know themselves. The reality is that algorithms will likely know us better than we could ever know ourselves in the future, according to the author. Note: he is very well credentialed in his studies of human history.&lt;/p&gt;
&lt;p&gt;Going forward, he predicts a shift from humanism towards dataism or techno-humanism. Basically, algorithms and data will know us better than we know ourselves. Therefore, machine algorithms will be better qualified to make decisions for us than ourselves. And many (if not all) of our choices will be made by powerful non-organic algorithms.&lt;/p&gt;
&lt;p&gt;Everything we do, decided by a machine to maximize health, happiness, and optimal living. The idea of a human's entire life being driven by algorithms sounds dystopian to me, but the author makes a convincing case.&lt;/p&gt;
</content><category term="books, coding, life, programming"></category><category term="algorithms"></category><category term="dataism"></category><category term="dystopia"></category><category term="future"></category><category term="Homo Deus"></category><category term="technohumanism"></category></entry><entry><title>Tips For Creating Useful Ideas</title><link href="https://lofipython.com/how-to-create-things-people-care-about.html" rel="alternate"></link><published>2017-07-30T19:10:00-05:00</published><updated>2017-07-30T19:10:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-07-30:/how-to-create-things-people-care-about.html</id><summary type="html">&lt;p&gt;11 Ideas from people who have created great products, businesses, or
ideas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Expertise in a field or product is one of the best assets. Nike's
founders started out by making their prototype shoe designs
themselves with a waffle iron. //&lt;a class="reference external" href="https://www.amazon.com/Shoe-Dog-Phil-Knight/dp/1508211809"&gt;Shoe Dog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scratch your own itch. Create the product that you …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;11 Ideas from people who have created great products, businesses, or
ideas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Expertise in a field or product is one of the best assets. Nike's
founders started out by making their prototype shoe designs
themselves with a waffle iron. //&lt;a class="reference external" href="https://www.amazon.com/Shoe-Dog-Phil-Knight/dp/1508211809"&gt;Shoe Dog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scratch your own itch. Create the product that you wish existed in
the world. Write the book you want to read. // &lt;a class="reference external" href="https://austinkleon.com/steal/"&gt;Austin Kleon&lt;/a&gt; //&lt;a class="reference external" href="https://www.indiehackers.com/"&gt;Indie Hackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Observe a problem or inconvenience that exists in the world and
create a better solution. // Product Development Class&lt;/li&gt;
&lt;li&gt;Find a niche and create something useful for that segment of people.
//&lt;a class="reference external" href="http://sethgodin.typepad.com/"&gt;Seth Godin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For every attribute, there is an opposite, effective attribute.
//&lt;a class="reference external" href="https://blog.kowalczyk.info/articles/22-marketing-laws.html"&gt;Law 14, The 22 Immutable Laws of Marketing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Launch quickly, show to people, get feedback, and iterate your idea.
//&lt;a class="reference external" href="https://37signals.com/rework"&gt;Rework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use combinatory play. Take ideas from different disciplines and
combine them to bring about new ideas. //&lt;a class="reference external" href="https://www.brainpickings.org/2013/08/14/how-einstein-thought-combinatorial-creativity/"&gt;Brain Pickings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Invest in improving your product versus marketing. A great product is
obvious to a potential customer. //&lt;a class="reference external" href="http://sethgodin.typepad.com/"&gt;Seth Godin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;People remember how you or your product made them feel versus cost,
etc.&lt;/li&gt;
&lt;li&gt;An idea doesn't have to be revolutionary. Many new businesses or
products take an existing product and make a slight modification or
add a new twist.&lt;/li&gt;
&lt;li&gt;Many of the successful people during the gold rush sold pick-axes to
the miners.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="business, entrepreneurship, Marketing, product development"></category><category term="app development"></category><category term="rework"></category><category term="seth godin"></category><category term="shoe dog"></category></entry><entry><title>Should You Go To Programming School?</title><link href="https://lofipython.com/should-i-go-to-programming-school.html" rel="alternate"></link><published>2017-07-28T23:45:00-05:00</published><updated>2017-07-28T23:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-07-28:/should-i-go-to-programming-school.html</id><summary type="html">&lt;p&gt;There is no one-size-fits-all answer. Below are some thoughts that may help you decide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What are your programming goals? Get a coding job? Create an app or website? Become more productive at your current job?&lt;/li&gt;
&lt;li&gt;What is your current experience level? Are you starting fresh or do you already know …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;There is no one-size-fits-all answer. Below are some thoughts that may help you decide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What are your programming goals? Get a coding job? Create an app or website? Become more productive at your current job?&lt;/li&gt;
&lt;li&gt;What is your current experience level? Are you starting fresh or do you already know a language or two?&lt;/li&gt;
&lt;li&gt;Do you have money saved up? Otherwise, you might need to take out a loan.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A computer science degree is typically most expensive. Coding bootcamps are a lower cost option that pack a wide curriculum into a few weeks or months, but they can still be pricey. The cheapest option is to take a piecemeal approach through various online courses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;School Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wholistic approach. You get the ins and outs of programming from a proven curriculum.&lt;/li&gt;
&lt;li&gt;Community. You learn with other students and from experienced teachers.&lt;/li&gt;
&lt;li&gt;Job placement. Often various schools and bootcamps will connect you to a company.&lt;/li&gt;
&lt;li&gt;Credentials. You gain confidence and the backing of your skills by an established institution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Potential Downsides&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tuition Money. A lot of&amp;nbsp;what you need to know is available for free or cheap on the web.&lt;/li&gt;
&lt;li&gt;Skill level match. Some bootcamps are oriented for beginners, others are more advanced. If you do a bootcamp, make sure it fits your skill level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you want a coding job&lt;/strong&gt;, school makes sense. The bootcamps look to be effective if you can handle the up-front investment. It's possible to land a job without schooling but much tougher. I am currently considering &lt;a class="reference external" href="https://www.fullstackacademy.com/"&gt;Full Stack Academy&lt;/a&gt;. and &lt;a class="reference external" href="http://www.codingdojo.com/"&gt;Coding Dojo&lt;/a&gt;. There are many out there. CodeAcademy is a popular route as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to make an app or website&lt;/strong&gt;, the school or the non-school route may both work. For the non-school route, the following languages are good places to start: &lt;em&gt;(note - not a comprehensive list, these are my picks.)&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web App or Website: HTML, CSS,&amp;nbsp;Python, Javascript&lt;/li&gt;
&lt;li&gt;Web App or Website Framework:&amp;nbsp; Flask, Django, py4web, Ruby on Rails, React&lt;/li&gt;
&lt;li&gt;iOS app: Swift plus Apple's Xcode environment, Beeware (python library)&lt;/li&gt;
&lt;li&gt;Android App: Java or Kotlin, Beeware&lt;/li&gt;
&lt;li&gt;General Coding: Python or Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you want to be more productive at work&lt;/strong&gt;, I recommend learning Python. More on Python and where to start &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/22/marketer-slash-programmer/"&gt;here&lt;/a&gt;.&amp;nbsp;&lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff With Python&lt;/a&gt; is a great resource for boosting your productivity also.&lt;/p&gt;
&lt;p&gt;It's not easy to decide whether or not school is for you. I'm still unsure after a year and a half of programming on the side. No matter what, continue to learn multiple languages and strive for a better grasp of the ones you know. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My decision: continue self-study and learning online for free.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 8 months after writing this post, I have concluded that learning for free online was the right choice for me. I've achieved many of my programming goals in the last three years, thanks to materials available from &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python"&gt;Codeacademy&lt;/a&gt;, &lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;Coursera&lt;/a&gt;, &lt;a class="reference external" href="https://www.youtube.com/watch?v=u3d-n41Tobw"&gt;YouTube&lt;/a&gt;, &lt;a class="reference external" href="https://stackoverflow.com/questions/1720421/how-to-concatenate-two-lists-in-python?rq=1"&gt;Stack Overflow&lt;/a&gt;, &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;countless helpful resources,&lt;/a&gt;&lt;a class="reference external" href="https://pymotw.com/3/glob/index.html"&gt;interesting blogs&lt;/a&gt;, and &lt;a class="reference external" href="https://docs.python.org/3/library/index.html"&gt;documentation&lt;/a&gt;. I've talked with others who need the in-person assistance that a bootcamp offers to learn. Do what works for you. Good luck with your decision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Several years later, I also get paid to use Python and Excel for a living! I studied for free online intermittently over 2 years to achieve it.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="app development"></category><category term="computer jobs"></category><category term="python"></category><category term="software"></category><category term="web apps"></category><category term="web development"></category><category term="website"></category></entry><entry><title>Cycles</title><link href="https://lofipython.com/cycles.html" rel="alternate"></link><published>2017-07-28T18:32:00-05:00</published><updated>2017-07-28T18:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-07-28:/cycles.html</id><summary type="html">&lt;p&gt;We move in cycles. Work, rest, re-energize, play, repeat. The rhythm of
life.&lt;/p&gt;
&lt;p&gt;I began my coding endeavors in the fall of 2015. After 6 months of
steady &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/11/random-findings/"&gt;coding practice and studying&lt;/a&gt;, I
went from no knowledge to a basic hobbyist programmer capable of
creating a website with the help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We move in cycles. Work, rest, re-energize, play, repeat. The rhythm of
life.&lt;/p&gt;
&lt;p&gt;I began my coding endeavors in the fall of 2015. After 6 months of
steady &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/11/random-findings/"&gt;coding practice and studying&lt;/a&gt;, I
went from no knowledge to a basic hobbyist programmer capable of
creating a website with the help of &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/03/starting-to-almost-kinda-think-about-creating-a-web-app/"&gt;a framework&lt;/a&gt;.
I published a few of my own primitive apps. Then I relapsed. Coding and
my full-time job wore me out. I stayed away from coding for about 6
months.&lt;/p&gt;
&lt;p&gt;My ultimate goal to learn to code was to be able to build my own
websites and apps. I've done that now. I've found ways to do it more
efficiently, which I will share in future posts.&lt;/p&gt;
&lt;p&gt;Two of my recent moonshot projects were Social Queues, a social playlist
builder for Spotify and Dropcycle, a bicycle on demand pick-up service.
Neither went anywhere, or really were that good of ideas, but I was able
to get to bare minimum viable product status, with little to no code.
Sites like &lt;a class="reference external" href="http://carrd.co"&gt;carrd.co&lt;/a&gt; work well to build a quick
landing page as proof of concept or landing page test. My favorite
project might be my &lt;a class="reference external" href="http://tameimpala.pythonanywhere.com"&gt;Tame Impala website&lt;/a&gt;, which I used &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/29/getting-started-with-web2py/"&gt;web2py&lt;/a&gt;to
build the site and &lt;a class="reference external" href="http://pythonanywhere,com"&gt;pythonanywhere&lt;/a&gt; to
host for free :)&lt;/p&gt;
&lt;p&gt;My aspirations have shifted. Instead of just building apps, I want to
build apps that are useful to others and help me achieve financial
freedom and the ability to own my time.&lt;/p&gt;
&lt;p&gt;I believe in cycles of learning. Similar to being in school: semester of
study, then time off to rest, then semester of study, more rest, etc.
The time away is as important as the time of study. Earlier this year, I
returned to programming and web development. After a long time of not
writing on this blog, I'm back at it. New cycle.&lt;/p&gt;
</content><category term="coding, programming, work"></category><category term="web apps"></category></entry><entry><title>Ask Tame Impala - My First Web App</title><link href="https://lofipython.com/askkevinparker-com-my-first-web-app-other-notes.html" rel="alternate"></link><published>2016-05-25T02:03:00-05:00</published><updated>2016-05-25T02:03:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-05-25:/askkevinparker-com-my-first-web-app-other-notes.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;My app is alive.&lt;/strong&gt; It is a simple program - ask it a question, and it queries a database of Tame Impala lyrics and pulls a response line from the lyrics based on which words match up. Kevin Parker is the frontman of the band. &lt;strong&gt;The latest iteration exists at&lt;/strong&gt; &lt;a class="reference external" href="http://tameimpala.pythonanywhere.com"&gt;tameimpala …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;My app is alive.&lt;/strong&gt; It is a simple program - ask it a question, and it queries a database of Tame Impala lyrics and pulls a response line from the lyrics based on which words match up. Kevin Parker is the frontman of the band. &lt;strong&gt;The latest iteration exists at&lt;/strong&gt; &lt;a class="reference external" href="http://tameimpala.pythonanywhere.com"&gt;tameimpala.pythonanywhere.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I published it a few weeks ago and according to Google Analytics it has had 50 sessions from Google and over 200 page views in 10 different countries - not bad!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSL Certificates / Start SSL / PythonAnywhere&amp;quot;&lt;/strong&gt;
An SSL certificate is required for the domain by PythonAnywhere to control the Admin page and set up your app. You don't need this if your domain is &amp;quot;username.pythonanywhere.com&amp;quot;.&lt;/p&gt;
&lt;p&gt;It was kind of tricky was figuring out how to set up the certificate for the first time. &lt;a class="reference external" href="https://help.pythonanywhere.com/pages/SSLOwnDomains"&gt;These instructions from PythonAnywhere&lt;/a&gt; helped a lot. &lt;a class="reference external" href="https://www.doconnor.org/entry/how-create-configure-free-ssl-certificate-using-django-and-pythonanywhere"&gt;These instructions&lt;/a&gt; helped also, although they're somewhat outdated.&lt;/p&gt;
&lt;p&gt;I used a free certificate from &lt;a class="reference external" href="https://www.startssl.com/Support?v=1"&gt;Start SSL&lt;/a&gt; and it worked fine. If you're new to SSL like me, here's a simple explanation: you get certificates aka two text files containing a long code from your SSL provider and submit them to the domain host. The last step is to notify your domain host and have them verify with the SSL provider. If all goes well, you'll be live in a few hours.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Masking&amp;quot; domains&lt;/strong&gt;
This means if you type &amp;quot;google.com&amp;quot;, it will redirect to &amp;quot;www.Google.com&amp;quot; &lt;a class="reference external" href="https://www.godaddy.com/help/manually-forwarding-or-masking-your-domain-name-422"&gt;GoDaddy makes this super easy&lt;/a&gt;. I set it up for my site as well. &lt;a class="reference external" href="https://help.pythonanywhere.com/pages/NakedDomains"&gt;Here's a post from PythonAnywhere&lt;/a&gt; on this also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collaborating with other programmers&lt;/strong&gt;
Currently trying to &lt;a class="reference external" href="https://help.github.com/desktop/guides/getting-started/installing-github-desktop/"&gt;install and run GitHub&lt;/a&gt; on my Desktop (trickier to do on an outdated operating system). Another programmer explained to me how it is the base means of collaboration and managing work flow for programmers working together on a project. Probably will know more about this soon / &lt;a class="reference external" href="https://lofipython.com/git-the-basics-a-git-version-control-cheat-sheet/"&gt;write a post on it&lt;/a&gt;, but it seems awesome and I had not been exposed to this tool until recently.&lt;/p&gt;
</content><category term="tame impala"></category></entry><entry><title>Useful Links for web2py Beginners</title><link href="https://lofipython.com/useful-links-for-web2py-beginners.html" rel="alternate"></link><published>2016-04-30T20:03:00-05:00</published><updated>2016-04-30T20:03:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-04-30:/useful-links-for-web2py-beginners.html</id><summary type="html">&lt;p&gt;As I've been grappling with web2py, I've found a lot of useful posts and
sites that have helped me along the way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/IURWDAP2eTY"&gt;How to Deploy Your App to PythonAnywhere&lt;/a&gt;: So
easy it's amazing. I've already deployed an app to see if I could.&lt;/li&gt;
&lt;li&gt;For CSS - I found &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/cFc5NPQmmhc"&gt;this&lt;/a&gt; and
&lt;a class="reference external" href="http://stackoverflow.com/questions/7184489/web2py-linking-to-css"&gt;this …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;As I've been grappling with web2py, I've found a lot of useful posts and
sites that have helped me along the way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/IURWDAP2eTY"&gt;How to Deploy Your App to PythonAnywhere&lt;/a&gt;: So
easy it's amazing. I've already deployed an app to see if I could.&lt;/li&gt;
&lt;li&gt;For CSS - I found &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/web2py/cFc5NPQmmhc"&gt;this&lt;/a&gt; and
&lt;a class="reference external" href="http://stackoverflow.com/questions/7184489/web2py-linking-to-css"&gt;this&lt;/a&gt;useful.
I've learned a tiny amount of CSS (&lt;a class="reference external" href="https://www.coursera.org/learn/introcss/"&gt;Thanks to Colleen van Lent!&lt;/a&gt;) but am now able to
manipulate the layout of my apps.&lt;/li&gt;
&lt;li&gt;An Easy Way to &lt;a class="reference external" href="http://web2py.com/book/default/chapter/07#Custom-forms"&gt;Customize Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://web2py.com/examples/static/web2py_cheatsheet.pdf"&gt;web2py Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://joecodeswell.wordpress.com/2011/06/09/web2py-url-mapping/"&gt;URL Mapping Notes&lt;/a&gt;
- I'm still understanding how the URL function works in web2py but
it's very powerful from what I have gathered.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://joecodeswell.wordpress.com/2011/05/25/web2py-dal-quick-reference/"&gt;DAL Quick Reference Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;
consider using &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;, web2py's successor&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;py4web documentation: &lt;a class="reference external" href="https://py4web.com/_documentation/static/en/chapter-05.html"&gt;The database abstraction layer (DAL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;py4web documentation: &lt;a class="reference external" href="https://py4web.com/_documentation/static/en/chapter-01.html#"&gt;Installation and Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bonus: &lt;a class="reference external" href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp"&gt;How to Make Mistakes in Python&lt;/a&gt;-
Free for download.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://lofipython.com/2016/03/29/getting-started-with-web2py/"&gt;Getting Started With web2py&lt;/a&gt;&lt;/p&gt;
</content><category term="programming, python, web development, web2py"></category></entry><entry><title>On Learning New Things</title><link href="https://lofipython.com/on-learning-new-things.html" rel="alternate"></link><published>2016-04-05T00:36:00-05:00</published><updated>2016-04-05T00:36:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-04-05:/on-learning-new-things.html</id><summary type="html">&lt;p&gt;Most new skills I've tried to learn seem to follow a similar trajectory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Stage One - Beginner's Thrill:&lt;/strong&gt; A rapid growth and learning pace
at the beginning, because I'm conquering a lot of small goals, diving
into something new and there are rapid gains which feels great.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage Two - Amateur's Reality …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Most new skills I've tried to learn seem to follow a similar trajectory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Stage One - Beginner's Thrill:&lt;/strong&gt; A rapid growth and learning pace
at the beginning, because I'm conquering a lot of small goals, diving
into something new and there are rapid gains which feels great.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage Two - Amateur's Reality:&lt;/strong&gt;The pace of learning and
accomplishment levels off. I'm still learning, but the leaps forward
start following a plateau trajectory. This stage is not as rewarding
as the first. The key is to push through and jump to the next plateau
and keep improving.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage Three - Mastery:&lt;/strong&gt; This is the goal with most things I want
to learn, and if I gain enough experience and skill, I'll have the
ability to apply the new things I've learned to accomplish my goals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my own way of paraphrasing what I've read a million times on the
internet - put in the hours, stay focused and don't stop trying. Right
now I'm somewhere around stage one/two with Python. Gotta keep pushing
forward. (This blog is also serving as a pep talk to myself.)&lt;/p&gt;
</content><category term="life"></category></entry><entry><title>Getting Started With web2py</title><link href="https://lofipython.com/getting-started-with-web2py.html" rel="alternate"></link><published>2016-03-29T03:02:00-05:00</published><updated>2016-03-29T03:02:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-03-29:/getting-started-with-web2py.html</id><summary type="html">&lt;p&gt;Feeling really good about my progress with web2py. The tutorial videos are comprehensive, yet easy to understand. For a beginner, the &amp;quot;batteries included&amp;quot; philosophy that web2py has embraced is a godsend. This means&amp;nbsp;everything you need to get creating comes stock. I &lt;a class="reference external" href="http://www.web2py.com/init/default/download"&gt;downloaded the web2py program&lt;/a&gt;, ran it, entered a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Feeling really good about my progress with web2py. The tutorial videos are comprehensive, yet easy to understand. For a beginner, the &amp;quot;batteries included&amp;quot; philosophy that web2py has embraced is a godsend. This means&amp;nbsp;everything you need to get creating comes stock. I &lt;a class="reference external" href="http://www.web2py.com/init/default/download"&gt;downloaded the web2py program&lt;/a&gt;, ran it, entered a password, and was immediately using&amp;nbsp;a functional development interface.&lt;/p&gt;
&lt;p&gt;web2py follows the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;Model - View - Controller software architecture&lt;/a&gt;&amp;nbsp;- which means it separates out the activities of programs into a few different layers (please forgive my oversimplified explanations):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Model - Stores data / used&amp;nbsp;in tutorial for database table creation (Written in Python)&lt;/li&gt;
&lt;li&gt;Controller - Used to define page functions (Python)&lt;/li&gt;
&lt;li&gt;Views - What the user sees (HTML/CSS/Javascript)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="en300" class="alignnone wp-image-479" src="https://pythonmarketer.files.wordpress.com/2016/03/en300.png" style="width: 460px; height: 307px;" /&gt;
&lt;p&gt;&lt;em&gt;(Image&amp;nbsp;from web2py Documentation)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're thinking about trying web2py&amp;nbsp;here's a few things that I've really liked so far:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I have minimal knowledge outside of&amp;nbsp;a few basic concepts of server operations. web2py provides a few simple lines of code that allows quick creation of a table (done in model) and corresponding form (done in controller/view) to add entries to the table and display form submissions elsewhere on your site.&lt;/li&gt;
&lt;li&gt;Right now, I'm enjoying learning&amp;nbsp;about the &lt;a class="reference external" href="https://py4web.com/_documentation/static/en/chapter-05.html"&gt;Database Abstraction Layer (DAL),&lt;/a&gt; which is pretty cool because you can rapidly run and test complex server queries within it.&lt;/li&gt;
&lt;li&gt;It's set up for multiple applications, so I can create and play with&amp;nbsp;several projects at once, whether simple applications or more complex websites.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are 30 videos total on the web2py documentation page, and I've only watched 11 of them but have already learned a ton. The style of the Massimo Di Pierro is great because you often pick up on some golden nuggets of coding wisdom and programming&amp;nbsp;tips while he walks you through the topic.&lt;/p&gt;
&lt;p&gt;It's pretty sweet&amp;nbsp;to be able to create and manipulate a website so quickly; still need to learn more, such as pick up CSS to really make it my own. But for now I'm happy for the many small accomplishments&amp;nbsp;that have been easier to reach thanks to web2py.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Update:&lt;/strong&gt; consider using &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;, web2py's successor&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/04/30/useful-links-for-web2py-beginners/"&gt;Useful Links for web2py Beginners&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python, web development, web2py"></category></entry><entry><title>Choosing a Web Development Path</title><link href="https://lofipython.com/choosing-a-web-development-path.html" rel="alternate"></link><published>2016-03-22T03:45:00-05:00</published><updated>2016-03-22T03:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-03-22:/choosing-a-web-development-path.html</id><summary type="html">&lt;p&gt;I have recently finished this &lt;a class="reference external" href="https://www.coursera.org/learn/html"&gt;HTML course&lt;/a&gt;, which recommends using cPanel
to configure websites. So I bought a domain and registered with cPanel.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What I thought would happen in trying to create a
website/app:&lt;/strong&gt;Buy a domain and use cPanel and Python in perfect
sync to create a website …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I have recently finished this &lt;a class="reference external" href="https://www.coursera.org/learn/html"&gt;HTML course&lt;/a&gt;, which recommends using cPanel
to configure websites. So I bought a domain and registered with cPanel.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What I thought would happen in trying to create a
website/app:&lt;/strong&gt;Buy a domain and use cPanel and Python in perfect
sync to create a website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reality:&lt;/strong&gt;cPanel is configured mostly for PHP. You can run Python
scripts with it, but it doesn't seem to be the most effective route
from what I've read.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I went back to the drawing board and I've simplified this down to two
basic paths:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;Languages&lt;/td&gt;
&lt;td&gt;Hosting&lt;/td&gt;
&lt;td&gt;Framework / IDE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Path 1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Build a website using Python + Python Web Frameworks and HTML&lt;/td&gt;
&lt;td&gt;PythonAnywhere or other Python friendly hosts&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://www.web2py.com/"&gt;web2py&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Path 2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Use a combo of HTML, Javascript + Python, other languages&lt;/td&gt;
&lt;td&gt;cPanel, many other hosts&lt;/td&gt;
&lt;td&gt;None (AKA I'm not sure)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I'm going with Path 1 because the only language I know is Python. I hope
to learn other languages like Javascript and CSS but would like to get
building as fast as possible.&lt;/p&gt;
&lt;p&gt;I found a free web hosting service called PythonAnywhere. There are
other &lt;a class="reference external" href="https://wiki.python.org/moin/FreeHosts"&gt;free&lt;/a&gt; and paid Python-friendly hosts.&lt;/p&gt;
&lt;p&gt;Instead of the &lt;a class="reference external" href="https://lofipython/starting-to-almost-kinda-think-about-creating-a-web-app/"&gt;previously mentioned web frameworks&lt;/a&gt;,
I've chosen web2py as a starter because of its compatibility with
PythonAnywhere, its simplicity, easy to read documentation and relative
ease of use for beginners.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A note on PythonAnywhere: they get 5 stars for the tutorial pictured
below. It is very nice to see in the whirlwind of confusion of
learning to deal with code and a new environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="PythonAnywhere Tutorial" class="alignnone size-full wp-image-286" src="https://pythonmarketer.files.wordpress.com/2016/03/pythonanywhere-tutorial.jpg" style="width: 1199px; height: 313px;" /&gt;
&lt;p&gt;++ Love this opening quote from &lt;a class="reference external" href="http://web2py.com/book"&gt;web2py Documentation&lt;/a&gt;: &amp;quot;I believe that the ability to easily build
high quality web applications is of critical importance for the growth
of a free and open society. This prevents the biggest players from
monopolizing the flow of information.&amp;quot;&lt;/p&gt;
&lt;p&gt;+++ A note on web2py so far: &lt;a class="reference external" href="http://www.web2py.com/init/default/documentation"&gt;the videos from the creator&lt;/a&gt;, Massimo Di
Pierro, are super useful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Update:&lt;/strong&gt; consider using &lt;a class="reference external" href="https://github.com/web2py/py4web"&gt;py4web&lt;/a&gt;, web2py's successor&lt;/blockquote&gt;
</content><category term="coding, programming, python, web development, web2py"></category></entry><entry><title>Discoveries['Random']</title><link href="https://lofipython.com/random-findings.html" rel="alternate"></link><published>2016-03-11T15:56:00-06:00</published><updated>2016-03-11T15:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-03-11:/random-findings.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Quote of Zen:&lt;/strong&gt; &amp;quot;Productivity isn’t about running faster or pushing yourself harder, but rather, about working smarter and paying a bit more attention to what is really going on.&amp;quot; - &lt;a class="reference external" href="http://well.blogs.nytimes.com/2016/03/10/how-asking-5-questions-allowed-me-to-eat-dinner-with-my-kids/?_r=0"&gt;New York Times Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Book I'm Reading Right Now:&lt;/strong&gt; &lt;a class="reference external" href="http://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent Discovery:&lt;/strong&gt; &lt;a class="reference external" href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments"&gt;Integrated Development Environments&lt;/a&gt; for Web Programming - another …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Quote of Zen:&lt;/strong&gt; &amp;quot;Productivity isn’t about running faster or pushing yourself harder, but rather, about working smarter and paying a bit more attention to what is really going on.&amp;quot; - &lt;a class="reference external" href="http://well.blogs.nytimes.com/2016/03/10/how-asking-5-questions-allowed-me-to-eat-dinner-with-my-kids/?_r=0"&gt;New York Times Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Book I'm Reading Right Now:&lt;/strong&gt; &lt;a class="reference external" href="http://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent Discovery:&lt;/strong&gt; &lt;a class="reference external" href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments"&gt;Integrated Development Environments&lt;/a&gt; for Web Programming - another piece of the web development puzzle; software that contains the front and back end elements for writing code, compiling and testing. This article from Stack Overflow clarifies &lt;a class="reference external" href="http://stackoverflow.com/questions/5255868/difference-between-ide-and-framework"&gt;the difference between an IDE and a web framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Wanted to also mention this &lt;a class="reference external" href="http://mashable.com/2010/10/06/ide-guide/#nIvAMfNr_uqx"&gt;counterpoint against IDEs for beginners&lt;/a&gt;: &amp;quot;Although many IDEs can handle more than one language, few do it well. Plus, it's likely overkill if you are just getting started.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Finally, if you're just beginning Python, let me put in a plug for simple editors: it's best for you to learn the language and its libraries well writing it all yourself, and &lt;em&gt;then&lt;/em&gt; if you think an IDE would speed your work along, use it. You'll find that you learn the language faster and more completely if you take this route.&amp;quot; - &lt;a class="reference external" href="http://pythoncentral.io/text-editors-vs-ides-for-python-development-selecting-the-right-tool/"&gt;Python Central&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ultimately your approach and tools used for any coding project depends on what you're trying to build, which language(s) used, and your own knowledge - and I'm still learning.&lt;/p&gt;
</content><category term="books, productivity, programming"></category></entry><entry><title>Starting to Almost Kinda Think About Creating a Web App</title><link href="https://lofipython.com/starting-to-almost-kinda-think-about-creating-a-web-app.html" rel="alternate"></link><published>2016-03-03T03:56:00-06:00</published><updated>2016-03-03T03:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-03-03:/starting-to-almost-kinda-think-about-creating-a-web-app.html</id><summary type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to learn about web frameworks. A web framework consists of software designed to aid in web development. They make it easier to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to learn about web frameworks. A web framework consists of software designed to aid in web development. They make it easier to create a website or web app - if you know how to use them. Unfortunately, there is a learning curve to using the frameworks but thankfully there is plenty o' documentation to go around to help you.&lt;/p&gt;
&lt;p&gt;Here are the two &lt;a class="reference external" href="https://www.airpair.com/python/posts/django-flask-pyramid"&gt;Python Frameworks&lt;/a&gt; I've chosen to investigate:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django - widely used, great community support, comes with just about everything built in. Can be used for smaller apps or multi-page/app websites.&lt;/li&gt;
&lt;li&gt;Flask - a &amp;quot;microframework&amp;quot; used for smaller apps. Possibly more manageable for someone beginning a smaller project (me!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as a beginnerish-level coder, I've chosen to start with Flask; I also found &lt;a class="reference external" href="http://opentechschool.github.io/python-flask/"&gt;this sweet guide&lt;/a&gt; that I think will help. Maybe someday I will graduate to Django, it sounds like a great framework. I've also decided that first I need to &lt;a class="reference external" href="https://www.coursera.org/specializations/web-design"&gt;brush up on my HTML&lt;/a&gt; - And according to a lot of what I've read it doesn't hurt to know CSS/Javascript. So this whole &amp;quot;build a web app&amp;quot; idea will continue, albeit with some hurdles to clear first.&lt;/p&gt;
&lt;p&gt;Edit: I ended up choosing web2py, which I hadn't even considered when I wrote this originally! Here's a &lt;a class="reference external" href="https://lofipython.com/choosing-a-web-development-path/"&gt;post about why I chose it&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, programming, web development"></category><category term="django"></category><category term="flask"></category><category term="python"></category><category term="web apps"></category></entry><entry><title>Tkinter and Python Libraries</title><link href="https://lofipython.com/tkinter-and-python-libraries.html" rel="alternate"></link><published>2016-02-29T01:11:00-06:00</published><updated>2016-02-29T01:11:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-02-29:/tkinter-and-python-libraries.html</id><summary type="html">&lt;p&gt;Python's set of libraries are&amp;nbsp;fun to explore. They allow Python to work with many types of other coding languages, allow you to do cool stuff, and seem&amp;nbsp;to require&amp;nbsp;a minimal knowledge of the actual code. You can read the complete list of standard libraries &lt;a class="reference external" href="https://docs.python.org/2/library/"&gt;here&lt;/a&gt;. There are also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python's set of libraries are&amp;nbsp;fun to explore. They allow Python to work with many types of other coding languages, allow you to do cool stuff, and seem&amp;nbsp;to require&amp;nbsp;a minimal knowledge of the actual code. You can read the complete list of standard libraries &lt;a class="reference external" href="https://docs.python.org/2/library/"&gt;here&lt;/a&gt;. There are also others available that you can download and install for unique challenges or software such as &lt;a class="reference external" href="https://wiki.python.org/moin/Android"&gt;Android&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Currently, my favorite library is &lt;a class="reference external" href="http://thinkingtkinter.sourceforge.net/"&gt;Tkinter&lt;/a&gt;. Tkinter is a module that replicates &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tcl"&gt;Tk/TCL&lt;/a&gt;&amp;nbsp;within Python and&amp;nbsp;allows you to create a quick Graphical User Interface (GUI) for your programs - great for trying to put together a prototype program with&amp;nbsp;basic aesthetic design control&amp;nbsp;for&amp;nbsp;things like buttons, entry boxes, text and other visual elements that make up the front end of a computer program.&lt;/p&gt;
&lt;p&gt;+Pro Tip: When you're trying to use a new module, you can read how to use it in the module's documentation. &lt;a class="reference external" href="https://docs.python.org/3.8/library/tkinter.html"&gt;Here's Tkinter's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;++ Today's find: Free guide called &amp;quot;&lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring stuff with Python&lt;/a&gt;&amp;quot;&lt;/p&gt;
</content><category term="coding, python, software"></category><category term="gui"></category><category term="programming"></category></entry><entry><title>Start Before You Are Ready</title><link href="https://lofipython.com/start-before-you-are-ready.html" rel="alternate"></link><published>2016-02-25T13:55:00-06:00</published><updated>2016-02-25T13:55:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-02-25:/start-before-you-are-ready.html</id><content type="html">&lt;p&gt;Found &lt;a class="reference external" href="https://medium.com/life-learning/start-before-you-re-ready-ac7d5608c83d#.wzka2rmm1"&gt;this article&lt;/a&gt; today via &lt;a class="reference external" href="http://www.thedolectures.com/"&gt;The Do Lectures&lt;/a&gt; and think it's so true - whatever you want to do, just start. Because &amp;quot;Sucking is the first step to being sorta good at something.&amp;quot;&lt;/p&gt;
</content><category term="life"></category></entry><entry><title>15 Marketing Observations</title><link href="https://lofipython.com/15-marketing-observations.html" rel="alternate"></link><published>2016-02-25T03:32:00-06:00</published><updated>2016-02-25T03:32:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-02-25:/15-marketing-observations.html</id><summary type="html">&lt;p&gt;Tonight, I made a list of 15 things I've observed after 4 years of study
at the University of Illinois and 4 years of professional experience in
Marketing. So here they are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's easier to sell one thing than several different products.&lt;/li&gt;
&lt;li&gt;Distribution = Very Important (Duh!)&lt;/li&gt;
&lt;li&gt;Marketing depends a lot …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Tonight, I made a list of 15 things I've observed after 4 years of study
at the University of Illinois and 4 years of professional experience in
Marketing. So here they are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's easier to sell one thing than several different products.&lt;/li&gt;
&lt;li&gt;Distribution = Very Important (Duh!)&lt;/li&gt;
&lt;li&gt;Marketing depends a lot on product quality - what can you do for the
user/customer? What problems can you solve?
&lt;a class="reference external" href="http://sethgodin.typepad.com/seths_blog/2016/02/fit-and-finish.html"&gt;Seth Godin&lt;/a&gt; talks
about this quite often.&lt;/li&gt;
&lt;li&gt;Design matters - in product, communications, and everything else in
this world.&lt;/li&gt;
&lt;li&gt;Sell benefits, not features.&lt;/li&gt;
&lt;li&gt;People are emotional buyers.&lt;/li&gt;
&lt;li&gt;The more you know about your customer, the better.&lt;/li&gt;
&lt;li&gt;Budget and resources matter.&lt;/li&gt;
&lt;li&gt;There can be an extremely wide variance from industry to industry -
the key is to look for parallels.&lt;/li&gt;
&lt;li&gt;Humanize your company as much as possible - &lt;a class="reference external" href="http://members.cdbaby.com/shipping-confirmation.aspx"&gt;This is a great example&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You're more likely to find success with talented people around you.&lt;/li&gt;
&lt;li&gt;Be aware of the&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;Pareto Principle&lt;/a&gt; (The 80/20 Rule)
- 80% of results often come from 20% of customers.&lt;/li&gt;
&lt;li&gt;Ads that annoy / shout about your product don't work; Ads that tell
customers useful information or help them in some way do.&lt;/li&gt;
&lt;li&gt;There is such a thing as too many choices for the customer - it
overwhelms them.&lt;/li&gt;
&lt;li&gt;Practice brevity. Whatever you've got to say, do it in fewer words.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Marketing"></category></entry><entry><title>Python Koans</title><link href="https://lofipython.com/dotd-python-koans.html" rel="alternate"></link><published>2016-02-23T14:10:00-06:00</published><updated>2016-02-23T14:10:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-02-23:/dotd-python-koans.html</id><summary type="html">&lt;p&gt;Today's discovery is &lt;a class="reference external" href="https://github.com/gregmalcolm/python_koans"&gt;Python Koans&lt;/a&gt;.&amp;nbsp;According to &lt;a class="reference external" href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;python-guide.org&lt;/a&gt;, Koans &amp;quot;uses a test-driven approach, q.v. TEST DRIVEN DESIGN SECTION to provide an interactive tutorial teaching basic Python concepts. By fixing assertion statements that fail in a test script, this provides sequential steps to learning Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;I was also curious …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today's discovery is &lt;a class="reference external" href="https://github.com/gregmalcolm/python_koans"&gt;Python Koans&lt;/a&gt;.&amp;nbsp;According to &lt;a class="reference external" href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;python-guide.org&lt;/a&gt;, Koans &amp;quot;uses a test-driven approach, q.v. TEST DRIVEN DESIGN SECTION to provide an interactive tutorial teaching basic Python concepts. By fixing assertion statements that fail in a test script, this provides sequential steps to learning Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;I was also curious what a &amp;quot;Koan&amp;quot; actually is: &amp;quot;a paradox to be meditated upon that is used to train Zen Buddhist monks to abandon ultimate dependence on reason and to force them into gaining sudden intuitive enlightenment&amp;quot; - Merriam-Webster&lt;/p&gt;
&lt;p&gt;Koans takes a little work to install. &lt;a class="reference external" href="https://github.com/OmkarPathak/pygorithm"&gt;Pygorithm&lt;/a&gt; is a similar package for learning advanced more algorithm theories with python, and can be more easily installed by pip.&lt;/p&gt;
</content><category term="programming, python"></category></entry><entry><title>Marketer Slash Programmer</title><link href="https://lofipython.com/marketer-slash-programmer.html" rel="alternate"></link><published>2016-02-22T01:41:00-06:00</published><updated>2016-02-22T01:41:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-02-22:/marketer-slash-programmer.html</id><summary type="html">&lt;p&gt;I have studied and currently work in Marketing*, with around 5 years of experience. I&amp;nbsp;would like to begin sharing my journey through&amp;nbsp;the coding world. I have chosen Python as my language to explore, to start. I began last fall by completing three&amp;nbsp;&lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;free online courses on Coursera&lt;/a&gt; - taught …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have studied and currently work in Marketing*, with around 5 years of experience. I&amp;nbsp;would like to begin sharing my journey through&amp;nbsp;the coding world. I have chosen Python as my language to explore, to start. I began last fall by completing three&amp;nbsp;&lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;free online courses on Coursera&lt;/a&gt; - taught by an amazing professor, Dr. Charles Severance from the University of Michigan. Check 'em out if you want an epic introduction to Python and coding in general.&lt;/p&gt;
&lt;p&gt;I previously had a little bit of HTML experience - nothing else - so I am very new to coding and enjoying learning a little more every day. I'm going to post my trials, problems, and things I figure out along the way and anything else I find interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why do I want to learn to program?&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Rapidly growing segments of our lives rely on computers and similar technologies. It seems unwise to remain ignorant of their internal processes.&lt;/li&gt;
&lt;li&gt;Web apps are cool, useful and make our lives better. I'd like to build them.&lt;/li&gt;
&lt;li&gt;To strengthen myself professionally.&lt;/li&gt;
&lt;li&gt;To CREATE - coding is actually a very great creative outlet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Why Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's a language that emphasizes readability, is very versatile and has a great community of users to help you solve problems. It can be used for everything from the front end - functionality, user interface, etc. to the back end - data storage, server use, etc.&lt;/p&gt;
&lt;p&gt;My goal is to get better every day, and eventually build some cool shit.&lt;/p&gt;
&lt;p&gt;Thank you for reading,&lt;/p&gt;
&lt;p&gt;Erick&lt;/p&gt;
&lt;p&gt;*At the time I wrote this, I worked in a non-techincal marketing role. I've since moved into a role where I use Python nearly every day. If you're wondering how, I use &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/05/12/pandas-pythons-excel-powerhouse/"&gt;Pandas&lt;/a&gt;, &lt;a class="reference external" href="https://2.python-requests.org/en/master/"&gt;Requests&lt;/a&gt; and Excel a lot at my current gig.&lt;/p&gt;
</content><category term="business, programming"></category></entry><entry><title>about</title><link href="https://lofipython.com/contact.html" rel="alternate"></link><published>2016-02-21T19:18:00-06:00</published><updated>2016-02-21T19:18:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-02-21:/contact.html</id><summary type="html">&lt;p&gt;Python developer who automates tasks, builds apps and writes about coding. Send me your project \ event \ questions. Collaborative inquiries welcome.
erickrumbold[at]gmail&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;, an investing and stocks blog&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.positivethoughts.pythonanywhere.com/"&gt;positivipy&lt;/a&gt;, text generation flask + mysql app built with fuzzywuzzy, ftfy, language_tool_python, textblob and markovify libraries&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Ask&lt;/a&gt; &lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Tame Impala,&lt;/a&gt; web2py …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python developer who automates tasks, builds apps and writes about coding. Send me your project \ event \ questions. Collaborative inquiries welcome.
erickrumbold[at]gmail&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;, an investing and stocks blog&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.positivethoughts.pythonanywhere.com/"&gt;positivipy&lt;/a&gt;, text generation flask + mysql app built with fuzzywuzzy, ftfy, language_tool_python, textblob and markovify libraries&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Ask&lt;/a&gt; &lt;a class="reference external" href="https://tameimpala.pythonanywhere.com/"&gt;Tame Impala,&lt;/a&gt; web2py + MongoDB Tame Impala lyrics search app&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mastacos.pythonanywhere.com/"&gt;mas tacos&lt;/a&gt;, proof of concept app with a US taco restaurant dataset&lt;/p&gt;
</content><category term="blog"></category></entry></feed>