<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-fi Python - coding, command prompt, data analysis, git, programming, software</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/coding-command-prompt-data-analysis-git-programming-software.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2020-01-25T05:06:00-06:00</updated><entry><title>"Git" The Basics: A Version Control Cheat Sheet</title><link href="https://lofipython.com/git-the-basics-a-git-version-control-cheat-sheet.html" rel="alternate"></link><published>2020-01-25T05:06:00-06:00</published><updated>2020-01-25T05:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-01-25:/git-the-basics-a-git-version-control-cheat-sheet.html</id><summary type="html">&lt;p&gt;&lt;em&gt;I am finally starting to understand&lt;/em&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git"&gt;git version control&lt;/a&gt;&lt;em&gt;! It makes developing a project on different computers easy. Some of these notes were picked up from the super informative&lt;/em&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt;&lt;em&gt;by Jake VanderPlas, author of the&lt;/em&gt;&lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/"&gt;Python Data Science Handbook&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;First,&lt;/em&gt;&lt;a class="reference external" href="https://git-scm.com/downloads"&gt;go here&lt;/a&gt;&lt;em&gt;, download â€¦&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;I am finally starting to understand&lt;/em&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Git"&gt;git version control&lt;/a&gt;&lt;em&gt;! It makes developing a project on different computers easy. Some of these notes were picked up from the super informative&lt;/em&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM"&gt;Reproducible Data Analysis in Jupyter video series&lt;/a&gt;&lt;em&gt;by Jake VanderPlas, author of the&lt;/em&gt;&lt;a class="reference external" href="https://jakevdp.github.io/PythonDataScienceHandbook/"&gt;Python Data Science Handbook&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;First,&lt;/em&gt;&lt;a class="reference external" href="https://git-scm.com/downloads"&gt;go here&lt;/a&gt;&lt;em&gt;, download and install git if you haven't yet. Alright, here are my go-to steps and commands for git:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beginning a New Project With Git&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create new repository on GitHub&lt;/li&gt;
&lt;li&gt;Add a README&lt;/li&gt;
&lt;li&gt;Add a Python gitignore&lt;/li&gt;
&lt;li&gt;Add a license (Jake V. used an MIT license)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Clone Any Repository from GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visit your new project, or any GitHub project, click the green &amp;quot;Clone or download&amp;quot; button and copy the link.&lt;/li&gt;
&lt;li&gt;In your terminal or command prompt, navigate to the directory where you want to clone your project.&lt;/li&gt;
&lt;li&gt;In terminal, enter: &lt;tt class="docutils literal"&gt;git clone PASTE_URL_HERE&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Now cd into your project folder.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Push Your Local Computer Changes to the Master Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's say you did some work on your computer and want to push the changes to GitHub. Enter these commands in terminal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git add .&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;-m&lt;/span&gt; &amp;quot;Add your commit note here&amp;quot;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git push origin master&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*Above: &lt;tt class="docutils literal"&gt;git add .&lt;/tt&gt; = stage all files in project directory for master&lt;/p&gt;
&lt;p&gt;**Substitute &lt;tt class="docutils literal"&gt;git add path\to\file\here&lt;/tt&gt; to stage only a single file to add to your master repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fetch Changes From Master Branch to Your Local Computer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I like to update my local computer with any master branch changes before beginning work on it. Enter these commands in terminal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git pull origin master&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Review Merge Conflicts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, your code may conflict with changes in the master branch. You'll find out if you try to push or pull changes and the auto-merge fails. Use &amp;quot;git status&amp;quot; to locate the files with the conflicts. Enter in your terminal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git status&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Then &lt;a class="reference external" href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line"&gt;follow these instructions&lt;/a&gt; to review the merge conflicts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/conflicts.html"&gt;Resolving Conflicts - Virtualenv Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or maybe you want to discard any local changes, then merge:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git fetch&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git checkout .&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git pull origin master&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Recovering from a Corrupted Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;git fsck &lt;span class="pre"&gt;--full&lt;/span&gt; &lt;span class="pre"&gt;--no-dangling&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html#recovering-from-repository-corruption"&gt;Additional Reading&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1"&gt;CS Visualized: Useful Git Commands&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lanraccoon.com/2018/8-git-commands-i-use-everyday/"&gt;8 Git Commands I Use Every Day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://who-t.blogspot.com/2009/12/on-commit-messages.html"&gt;On Commit Messages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Git-Workflows"&gt;Pandas Library Git Workflows&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, command prompt, data analysis, git, programming, software"></category><category term="github"></category><category term="terminal"></category><category term="version control"></category></entry></feed>