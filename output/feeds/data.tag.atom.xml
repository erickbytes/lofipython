<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - data</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/data.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2022-07-06T12:49:00-05:00</updated><entry><title>The Things They Don't Tell You About Ampersands and XML</title><link href="https://lofipython.com/the-things-they-dont-tell-you-about-ampersands-and-xml.html" rel="alternate"></link><published>2022-07-06T12:49:00-05:00</published><updated>2022-07-06T12:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-07-06:/the-things-they-dont-tell-you-about-ampersands-and-xml.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script that works at first. Hallelujah!&lt;/p&gt;
&lt;p&gt;Later on, I realize it doesn't work as well as I believed. It turns out, if I want a server to accept my XML document, &lt;a class="reference external" href="https://www.ibm.com/docs/en/was-liberty/base?topic=manually-xml-escape-characters"&gt;escaping certain characters&lt;/a&gt; might be required. The documentation didn't mention this. It was my first time using XML, how would I know?&lt;/p&gt;
&lt;p&gt;I noticed a script only worked for a handful of requests. It failed for most, returning a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"&gt;400 status code&lt;/a&gt;. Suspecting the issue was likely in my payload, I studied the data of the request bodies that failed compared to the others that succeeded. All of the payload bodies that failed contained text with an ampersand.&lt;/p&gt;
&lt;p&gt;Suspecting it might be an XML + ampersand related issue, I google &lt;a class="reference external" href="https://stackoverflow.com/questions/1328538/how-do-i-escape-ampersands-in-xml-so-they-are-rendered-as-entities-in-html"&gt;this Stack Overflow post&lt;/a&gt; which explains the ampersand escaping situation. There are a handful of characters that must be escaped. Otherwise, you might not be able to connect to the server.&lt;/p&gt;
&lt;p&gt;These are the things they often don't tell you. Those little details you must sometimes realize for yourself, unless someone bothers to mention it or write it down. Now you know something that cost me an hour or two of tinkering to realize!&lt;/p&gt;
&lt;div class="wp-image-7060 figure"&gt;
&lt;img alt="`Image Source &amp;lt;https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2022/07/xml-example-2.png?w=453" style="width: 453px; height: 521px;" /&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml"&gt;Image Source&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wanna read more on HTTP? Check out my guide on &lt;a class="reference external" href="https://pythonmarketer.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;making HTTP requests with Python&lt;/a&gt; to read more about HTTP requests.&lt;/p&gt;
</content><category term="APIs, coding, Google, programming"></category><category term="data"></category><category term="learning"></category><category term="problem solving"></category><category term="XML"></category></entry><entry><title>Analyzing Messi vs. Ronaldo with the FIFA API + jq + curl</title><link href="https://lofipython.com/pretty-print-the-ea-sports-fifa-ultimate-team-json-with-jq-curl.html" rel="alternate"></link><published>2022-01-10T23:15:00-06:00</published><updated>2022-01-10T23:15:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-10:/pretty-print-the-ea-sports-fifa-ultimate-team-json-with-jq-curl.html</id><summary type="html">&lt;p&gt;Who is the world's greatest footballer, Messi or Ronaldo? EA Sports surely has calculated the answer to this question in their player ratings. They rate peak Crisitiano Ronaldo, Lionel Messi and Luka Modrić at 99 overall, with Neymar and Lewandowski at 98. Anecdotally, Messi has won 7 &lt;a class="reference external" href="https://www.topendsports.com/sport/soccer/list-player-of-the-year-ballondor.htm"&gt;Ballon d'Or&lt;/a&gt;, the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Who is the world's greatest footballer, Messi or Ronaldo? EA Sports surely has calculated the answer to this question in their player ratings. They rate peak Crisitiano Ronaldo, Lionel Messi and Luka Modrić at 99 overall, with Neymar and Lewandowski at 98. Anecdotally, Messi has won 7 &lt;a class="reference external" href="https://www.topendsports.com/sport/soccer/list-player-of-the-year-ballondor.htm"&gt;Ballon d'Or&lt;/a&gt;, the highest individual football honor one can achieve each year. Ronaldo has won 5 B'allon d'Or. Modrić has won 1 Ballon d'Or. Lewandowski was runner up this year, but has never won the honor. Neymar has never won a Ballon d'Or.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://www.ea.com/games/fifa/fifa-22"&gt;FIFA&lt;/a&gt;, a player's video game representation is modeled intricately in a series of traits and specialties characterizing each player. The &lt;a class="reference external" href="https://www.easports.com/fifa/ultimate-team/api/fut/item"&gt;&amp;quot;Ultimate Team&amp;quot; EA Sports API&lt;/a&gt; is viewable as a plain json page or more cheekily with one line of &lt;a class="reference external" href="https://curl.se/"&gt;curl&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/stedolan/jq"&gt;jq, a &amp;quot;command line json processor&amp;quot;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl 'https://www.easports.com/fifa/ultimate-team/api/fut/item' | jq '.'
&lt;/pre&gt;
&lt;p&gt;Enter this in a &lt;a class="reference external" href="https://missing.csail.mit.edu/2020/shell-tools/"&gt;shell&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/jlevy/the-art-of-command-line"&gt;command line&lt;/a&gt;. The result is beautiful, readable, pretty printed json!&lt;/p&gt;
&lt;div class="section" id="messi-left-vs-ronaldo-right-fifa-player-ratings-1"&gt;
&lt;span id="messi-left-vs-ronaldo-right-fifa-player-ratings"&gt;&lt;/span&gt;&lt;h2&gt;Messi (Left) Vs. Ronaldo (Right) FIFA Player Ratings&lt;/h2&gt;
&lt;div class="tiled-gallery-gallery docutils container"&gt;
&lt;div class="tiled-gallery-row docutils container"&gt;
&lt;div class="tiled-gallery-col docutils container"&gt;
&lt;div class="figure"&gt;
&lt;img alt="Messi FIFA skill attributes" src="https://pythonmarketer.files.wordpress.com/2022/01/messi-fifa-attributes-cropped.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="tiled-gallery-col docutils container"&gt;
&lt;div class="figure"&gt;
&lt;img alt="Ronaldo FIFA skill attributes" src="https://pythonmarketer.files.wordpress.com/2022/01/ronaldo-attributes-fifa.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These ratings represent the players at their peak of their careers. Messi is a better dribbler, while Ronaldo has more power and strength. Messi has the edge in free kicks, curve in his shot and &amp;quot;longshots&amp;quot; 99 to 98 over Cristiano. They are tied at &amp;quot;finishing&amp;quot;, each with 99. Ronaldo has the &amp;quot;Power Free-Kick&amp;quot; trait, whereas Messi has &amp;quot;Chip Shot&amp;quot;, &amp;quot;Finesse Shot&amp;quot; and &amp;quot;Playmaker&amp;quot; traits giving him an edge.&lt;/p&gt;
&lt;p&gt;EA's ratings suggest that both are prominent goal scorers, with a slight edge to Messi in finesse and shooting from distance. However, there's something to be said for kicking the ball really damn hard. Ronaldo has superior raw shot power and a lethal combo of more powerful jump and stronger headers. All this combined with an &amp;quot;Aerial Threat&amp;quot; specialty enables Ronaldo to vault above and around defenders to smash in golazos off the volley. Ronaldo sizes up to 6' 2&amp;quot; (187 cm) vs. Messi's 5' 7&amp;quot; (170 cm) frame. This Portugese man definitely has an advantage in getting higher in the air. But the Argentinian is quite darty.&lt;/p&gt;
&lt;figure class="wp-block-embed is-type-rich is-provider-instagram wp-block-embed-instagram"&gt;&lt;div class="wp-block-embed-wrapper docutils container"&gt;
&lt;a class="reference external" href="https://www.instagram.com/p/Cc59jtvjk_0/"&gt;https://www.instagram.com/p/Cc59jtvjk_0/&lt;/a&gt;&lt;/div&gt;
&lt;figcaption&gt;&lt;p&gt;Messi has incredible accuracy from distance.&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Messi is a better passer all around and has perfect &amp;quot;vision&amp;quot;, great qualities for winning football games. Only in crossing does he have a lower passing rating. Ronaldo is also 10 points better at &amp;quot;penalties&amp;quot; or penalty kicks. The closer he gets to the goal, the more dangerous he is. Messi is more dangerous with the ball while dribbling, passing or shooting except when taking a PK.&lt;/p&gt;
&lt;p&gt;Advantages can be gained in many different aspects of soccer. EA has developed a fun dataset to model these all time greats across several football skill dimensions. In &lt;a class="reference external" href="https://www.ea.com/en-gb/games/fifa/fifa-22/ratings/ratings-database"&gt;2022's version of the game&lt;/a&gt;, Messi is rated a 93, with Cristiano 91. Clearly these two are worthy of top honors. Don't forget Robert Lewandowski, with a 92 rating, who consistently lights up the Champions League and Bundesliga.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jq ftw&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had never used jq before this. Really enjoyed the quick, stylish and practical view of some json. This cool terminal display and syntax highlighting was on my Chromebook shell. It's neat how easily you can pretty print json with jq. I rate it a 99 for json pretty printing on the FIFA scale. Read more in the &lt;a class="reference external" href="https://stedolan.github.io/jq/tutorial/"&gt;jq documentation&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content><category term="command prompt, productivity"></category><category term="command line"></category><category term="data"></category><category term="fifa"></category><category term="football"></category><category term="jq"></category><category term="json"></category></entry><entry><title>Create a Column of Values in Pandas with df.assign()</title><link href="https://lofipython.com/create-a-column-of-values-in-pandas-with-df-assign.html" rel="alternate"></link><published>2022-01-07T13:12:00-06:00</published><updated>2022-01-07T13:12:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-07:/create-a-column-of-values-in-pandas-with-df-assign.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/"&gt;Pandas&lt;/a&gt; is amazing, what else is there to say? Learning the nuances of its API have yielded tons of times where it helped me get stuff done.&lt;/p&gt;
&lt;p&gt;I recently picked up the &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.assign.html"&gt;pandas dataframe's &amp;quot;assign&amp;quot; function&lt;/a&gt; for creating a new column of values. This is an elegant way to set …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://pandas.pydata.org/docs/"&gt;Pandas&lt;/a&gt; is amazing, what else is there to say? Learning the nuances of its API have yielded tons of times where it helped me get stuff done.&lt;/p&gt;
&lt;p&gt;I recently picked up the &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.assign.html"&gt;pandas dataframe's &amp;quot;assign&amp;quot; function&lt;/a&gt; for creating a new column of values. This is an elegant way to set a column of values in tabular data with the pandas library. Below you'll see two ways to set a column of values in pandas. In the first way, I am chaining two assign functions together to create 2 new columns, &amp;quot;sound&amp;quot; and &amp;quot;type&amp;quot;. I prefer using assign because it looks better and it does not result in any warnings from pandas. Highly recommend getting familiar with pandas functions like assign and API nuances like &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/series.html?highlight=str%20accessors#accessors"&gt;Series accessors&lt;/a&gt; to up your tabular data game.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;cats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Garfield&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Meowth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cats&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# best way&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Meow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cartoon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# alternative way that also works, but with warnings from pandas&lt;/span&gt;
&lt;span class="c1"&gt;# df[&amp;quot;sound&amp;quot;] = &amp;quot;Meow&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;DataFrame.assign : Can evaluate an expression or function to create new values for a column.
pandas source code: &lt;a class="reference external" href="https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/core/frame.py#L4421-L4487"&gt;https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/core/frame.py#L4421-L4487&lt;/a&gt;&lt;/p&gt;
</content><category term="pandas, programming, python"></category><category term="cats"></category><category term="data"></category></entry><entry><title>A Guide To Making HTTP Requests To APIs With JSON &amp; Python</title><link href="https://lofipython.com/how-to-make-json-requests-with-python.html" rel="alternate"></link><published>2020-05-18T05:41:00-05:00</published><updated>2020-05-18T05:41:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-05-18:/how-to-make-json-requests-with-python.html</id><summary type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/li&gt;
&lt;li&gt;Testing and Exporting Python Request Code from Postman (Optional)&lt;/li&gt;
&lt;li&gt;Formatting Your Request&lt;/li&gt;
&lt;li&gt;Example GET and POST Requests&lt;/li&gt;
&lt;li&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/li&gt;
&lt;li&gt;Sidebar: requests.Session()&lt;/li&gt;
&lt;li&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;strong&gt;Terminology Clarification&lt;/strong&gt;: I will refer to &amp;quot;items&amp;quot; or &amp;quot;data&amp;quot; throughout this post. This could be substituted for contacts or whatever data you are looking for. For example, you might be fetching a page of contacts from your CRM. Or fetching your tweets from Twitter's API. Or searching the Google location API, you might look up an address and return geo-location coordinates.&lt;/blockquote&gt;
&lt;div class="section" id="api-http-lingo-you-should-know"&gt;
&lt;h2&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hypertext Transfer Protocol (HTTP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Per &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;Mozilla&lt;/a&gt;,&amp;quot;Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical&amp;nbsp;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;client-server model&lt;/a&gt;, with a client opening a connection to make a request, then waiting until it receives a response.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
HTTP: you = client. API = way to communicate with server&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Application Programming Interface (API)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;Per Wikipedia&lt;/a&gt;, the purpose of an API is to simplify &amp;quot;programming by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstraction_(software_engineering)"&gt;abstracting&lt;/a&gt; the underlying implementation and only exposing objects or actions the developer needs.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Representational State Transfer (REST)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; is an architectural style of web APIs. It is the dominant architecture that many APIs use. Simple Object Access Protocol (&lt;a class="reference external" href="https://smartbear.com/blog/test-and-monitor/soap-vs-rest-whats-the-difference/"&gt;SOAP&lt;/a&gt;) is another style I've heard of, but it seems less common nowadays.&lt;/p&gt;
&lt;p&gt;A REST API is built for interoperability and has properties like: &amp;quot;simplicity of a uniform interface&amp;quot; and &amp;quot;visibility of communication between components by service agents.&amp;quot; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Wikipedia&lt;/a&gt;] If an API follows REST, it has many good principles baked in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;``GET``, ``POST`` and ``PATCH``&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are three common types of request methods.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;GET&lt;/cite&gt;: &amp;nbsp;Read data returned, such as all of your tweets in &lt;a class="reference external" href="https://developer.twitter.com/en/docs"&gt;the Twitter API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;POST&lt;/cite&gt;: Create a new item, like writing a new tweet. Can also update existing data. Tweets aren't editable though!&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;PATCH&lt;/cite&gt;: Similar to &lt;cite&gt;POST&lt;/cite&gt;, this is typically used for updating data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;URL or &amp;quot;endpoint&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The website location to send your request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Values you pass to tell the API what you want. They are defined by the API specifications, which are usually &lt;a class="reference external" href="https://developers.activecampaign.com/reference"&gt;well documented&lt;/a&gt;. In python's &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library, they may be passed as &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt;. Sometimes they are passable directly within the endpoint url string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Body or &amp;quot;payload&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make a request, you send a payload to the url. Often this is a JSON string with the API's URL parameters and values, AKA the request body. If the &lt;a class="reference external" href="https://jira.readthedocs.io/"&gt;API is written specifically for Python&lt;/a&gt;, it might accept an actual Python dictionary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript Object Notation (JSON)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=KnAyziNnuI0"&gt;JSON&lt;/a&gt; is the data interchange standard for all languages. Usually it is the default way to pass data into and receive data from an API. If making a&amp;nbsp; &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, you can check your json object is formatted correctly by using a &lt;a class="reference external" href="https://jslint.com/"&gt;json linter&lt;/a&gt;. Or try Python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#module-json.tool"&gt;json.tool&lt;/a&gt;! You can also pretty print your JSON or python dictionary with the &lt;a class="reference external" href="https://docs.python.org/3/library/pprint.html"&gt;pprint&lt;/a&gt; module. If you're using json.dumps remember it has &lt;a class="reference external" href="https://docs.python.org/3/library/json.html"&gt;pretty printing accessible by keyword arguments&lt;/a&gt;! These features are accessible in the standard library. Isn't Python great? See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/09/15/python-101-an-intro-to-working-with-json/"&gt;Python 101 - An Intro to Working with JSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Headers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These usually contain website cookies and authorization info. They also may tell the API what kind of data you want back. JSON and XML are the two most common types of data to return. You can specify the return format in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers.&lt;/p&gt;
&lt;blockquote&gt;
If you need to parse an XML response, check out Python's stock &lt;a class="reference external" href="https://docs.python.org/3.8/library/xml.etree.elementtree.html"&gt;ElementTree API&lt;/a&gt;. I've only seen a few APIs using XML responses, such as the &lt;a class="reference external" href="https://www.usps.com/business/web-tools-apis/"&gt;USPS Address Validation API&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization varies widely. This is the level of identification you need to pass to the API to make a request. Public APIs might require none. Some just need a username and password. Others use the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OAuth"&gt;Oauth standard&lt;/a&gt;, which is a system involving credentials and tokens for extra security.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization Scheme Example [&lt;/strong&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Mozilla&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization: &amp;lt;auth-scheme&amp;gt; &amp;lt;authorisation-parameters&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# headers python dict example&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;basic &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;API data is commonly returned in multiple pages when there is a lot of data returned. Each page can be accessed one request at a time. Sometimes you can specify how many items you want on a page. But there is usually a maximum items per page limit like 100.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Status code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each request usually gives you a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;numeric code corresponding to happened&lt;/a&gt; when the server tried to handle your request. There is also usually a message returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also: Web Server Gateway Interface (WSGI, pronounced &amp;quot;Wis-Ghee&amp;quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;As described in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt;, the Python Web Server Gateway Interface (WSGI) is a way to make sure that web servers and python web applications can talk to each other.&amp;quot;&amp;nbsp; &lt;a class="reference external" href="https://docs.gunicorn.org/en/latest/install.html"&gt;Gunicorn&lt;/a&gt; is one of &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi"&gt;a few Python WSGI clients&lt;/a&gt;. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/04/30/useful-links-for-web2py-beginners/"&gt;web2py&lt;/a&gt; is another WSGI client and web framework I have used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nginx"&gt;Nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;Create, read, update and delete (CRUD)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-request-json"&gt;
&lt;h2&gt;Creating the Request JSON&lt;/h2&gt;
&lt;p&gt;I recommend using &lt;a class="reference external" href="https://www.postman.com/"&gt;Postman&lt;/a&gt; in most cases, depending on the complexity of the API. If the JSON syntax is straightforward, you can format your data as a python dictionary, then convert it to a JSON object with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.dumps"&gt;json module&lt;/a&gt;. But JSON can be tricky sometimes. You may also need to pass a dictionary of HTTP headers.&lt;/p&gt;
&lt;p&gt;Some APIs have &amp;quot;Postman Collections&amp;quot;, a set of Python (or any language) script templates for the API. In those cases, it might make sense to use those resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Path One: Make HTTP request with json &amp;amp; requests libraries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Format Python dict with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&amp;nbsp; Infer API requirements from documentation. Use requests for HTTP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path Two: Make HTTP request with Postman &amp;amp; requests library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Postman to generate the JSON payload. Plug headers and payload into requests. Use requests library for HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Postman has a friendly interface for plugging in all your pieces and tinkering with your request body until it works. Make it easier on yourself and use Postman, especially if there are collections. An alternative is to troubleshoot in Python if you are confident in your grasp of the API. I use both options depending on my familiarity with the API at hand.&lt;/p&gt;
&lt;p&gt;Once you have the request working, you may &lt;a class="reference external" href="https://learning.postman.com/docs/postman/sending-api-requests/generate-code-snippets/"&gt;export your Postman request to almost any language&lt;/a&gt;. For Python, you can sometimes export to the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt;,&amp;nbsp; &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;urllib&lt;/tt&gt; libraries. Hit the &amp;quot;code&amp;quot; button in Postman and then copy your code.&lt;/p&gt;
&lt;blockquote&gt;
If you choose not to use Postman, you can use the json library. See the use of &lt;tt class="docutils literal"&gt;json.dumps()&lt;/tt&gt;to convert a dictionary to a JSON object in Example #2 below&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="formatting-your-request"&gt;
&lt;h2&gt;Formatting Your Request&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Paste your Postman headers, payload and url into your existing code.&lt;/li&gt;
&lt;li&gt;You may want to use a dict or &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting&lt;/a&gt; to pass values to your request parameters or url.&lt;/li&gt;
&lt;li&gt;If the API uses a token or other form of authorization that needs to be refreshed intermittently, I usually have a function that returns a token. &lt;tt class="docutils literal"&gt;token = fetch_token()&lt;/tt&gt; Then put the token in the headers dict.&amp;nbsp; &lt;tt class="docutils literal"&gt;{&amp;quot;Authorization&amp;quot;: f&amp;quot;basic &lt;span class="pre"&gt;{token}&amp;quot;}&lt;/span&gt;&lt;/tt&gt; Finally pass your headers and payload to your&amp;nbsp; &lt;tt class="docutils literal"&gt;requests.get&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;requests.request&lt;/tt&gt; function along with the endpoint url. You're now ready to test the request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="python-installation"&gt;
&lt;h2&gt;Python Installation&lt;/h2&gt;
&lt;p&gt;You can install &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. Alternatively, &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; is included within the Python standard library. If you want to convert HTTP response data to a dataframe or csv, install &lt;tt class="docutils literal"&gt;pandas.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install requests&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-1-get-the-geolocation-details-of-any-public-location-with-the-google-api"&gt;
&lt;h2&gt;Example #1: &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; the geolocation details of any public location with the Google API&lt;/h2&gt;
&lt;p&gt;This was modified from another example of &lt;a class="reference external" href="https://www.geeksforgeeks.org/get-post-requests-using-python/"&gt;Google's Geolocation API&lt;/a&gt;. To use this, you need to &lt;a class="reference external" href="https://developers.google.com/maps/documentation/geolocation/intro"&gt;create a developer account with Google&lt;/a&gt; and paste your API keys below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="c1"&gt;# import pandas as pd&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Find the best double-cheeseburger + fries $7 can buy.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add_Google_API_Key_Here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Redhot Ranch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# optional: set a 5 second timeout for the http request&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# extracting latitude, longitude and formatted address of the first matching location&lt;/span&gt;
&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;formatted_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;formatted_address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# optional: convert response into a dataframe with pandas&lt;/span&gt;
&lt;span class="c1"&gt;# location_df = pd.json_normalize(data[&amp;#39;results&amp;#39;])&lt;/span&gt;
&lt;span class="c1"&gt;# location_df.to_csv(&amp;#39;Locations.csv&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Above you can see:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; makes it easy to see the server's text response also with &lt;tt class="docutils literal"&gt;response.text&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; also makes JSON encoding easy with &lt;tt class="docutils literal"&gt;response.json()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;I like to use &lt;tt class="docutils literal"&gt;pd.json_normalize()&lt;/tt&gt; to convert the response object to a dataframe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-encode-a-python-dictionary-to-json-string-and-post-to-a-hypothetical-api"&gt;
&lt;h2&gt;Example #2: Encode a Python dictionary to json string and &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; to a hypothetical API&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a simple dictionary with request body data and pretty inspect it with pprint.&lt;/li&gt;
&lt;li&gt;Convert it to encoded json string with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; the encoded JSON to the endpoint url with requests.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_dict_to_json_object&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create request body with fictional contact details.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;last_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sherman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;42 Wallaby Way&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;address_2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sydney&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NSW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AU&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# encode json str to utf-8&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_new_contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a fictional API request.&lt;/span&gt;
&lt;span class="sd"&gt;    Passing a json object to requests.&lt;/span&gt;
&lt;span class="sd"&gt;    Decoding server response with response.json(),&lt;/span&gt;
&lt;span class="sd"&gt;    Returning a contact id by calling the data&amp;#39;s keys.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;cache-control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no-cache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Postman-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;postman_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://SomeSoftwareAPI.com/contacts/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;contact_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contact_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# call dict keys to get their values&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contact_id&lt;/span&gt;

&lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convert_dict_to_json_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;contact_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_new_contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;requests.request keyword argument alternatives for passing data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;params&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples or bytes to send in the query string for the Request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json&lt;/strong&gt;&amp;nbsp;– (optional) A JSON serializable Python object to send in the body of the Request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/"&gt;requests API documentation&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status codes&lt;/a&gt; are your friend. They offer a hint at why your request is not working. If you see 200 or 201, that's a good sign. They're usually helpful, but sometimes they can be misleading.&lt;/li&gt;
&lt;li&gt;Ensure you are defining the correct content-type. I had an experience where Postman defined two conflicting &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers and it &lt;a class="reference external" href="https://github.com/postmanlabs/postman-code-generators/issues/215"&gt;caused my request to fail&lt;/a&gt;. The server's error message indicated the problem was in my JSON, so it took me a while to figure out the headers were the problem.&lt;/li&gt;
&lt;li&gt;Sometimes it makes a difference if your url has &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://&lt;/span&gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; in it. Usually &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; is preferred.**&amp;nbsp;**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;requests.Session()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might be able to improve performance by using a requests &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;&amp;quot;session&amp;quot; object&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;a session adds a &amp;quot;keep-alive&amp;quot; header to your HTTP connection.&lt;/span&gt;
&lt;span class="sd"&gt;It can be used to store cookies across requests.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://SomeSoftwareAPI.com/contacts/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPResponse.debuglevel:&lt;/strong&gt; A debugging hook. If &lt;tt class="docutils literal"&gt;`debuglevel&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel&lt;/a&gt;&amp;gt;`__ is greater than zero, messages will be printed to stdout as the response is read and parsed. &lt;strong&gt;-&lt;/strong&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;http.client Python Docs&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;http.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPConnection&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debuglevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add_Google_API_Key_Here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;90 Miles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I remember APIs seemed mysterious and daunting before I had used them. But like all things, they can be conquered with knowledge, understanding and tenacity to keep trying until you figure it out. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requests Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/api/"&gt;requests.request() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.get"&gt;requests.get() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.post"&gt;requests.post() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation"&gt;Google's HTTP Timing Explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Rolstenhouse/unofficial-apis"&gt;List of Interesting &amp;quot;Unofficial&amp;quot; APIs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Proxy_server"&gt;Proxy servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html"&gt;Making 1 million requests with python-aiohttp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Chicago, coding, HTTP, json, pandas, programming"></category><category term="api"></category><category term="data"></category><category term="python"></category><category term="requests"></category><category term="sandwiches"></category><category term="web"></category></entry><entry><title>Python File Handling Basics</title><link href="https://lofipython.com/python-file-handling-basics.html" rel="alternate"></link><published>2018-01-14T18:53:00-06:00</published><updated>2018-01-14T18:53:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-01-14:/python-file-handling-basics.html</id><summary type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file. &lt;a class="reference external" href="https://github.com/BurntSushi/nfldb/wiki/Python-&amp;amp;-pip-Windows-installation"&gt;You need to have Python 3 installed&lt;/a&gt;. In the same folder as your .py file, save a .txt file with some words in it. Alright, let's write some code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter your file name. e.g. words.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;file_handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;file_handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;In line 1, we ask the user to enter their file name with Python's raw_input function. When the program runs, the user enters their text file name with extension. This line stores the name in a variable called file_name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 2,&lt;/strong&gt; we open your text file and store it in a variable I have named file_handle. Think of the file handle as a bridge between your code and the text file. Quick point about the 'r' above: that tells the program to open the file in &amp;quot;Read&amp;quot; mode. There are several different file modes in programming. Some modes are just for reading an existing file, some are just for writing a new file, and some are capable of both. &lt;a class="reference external" href="https://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w/16208298"&gt;This Stack Overflow post&lt;/a&gt; is well written and details the differences between file modes. Once established, the file handle allows you to read the file's contents or write new contents to the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 3,&lt;/strong&gt;&amp;nbsp;we are calling the .readlines() method on our file handle. This method takes the file contents and stores them, line by line, into a list named &amp;quot;lines&amp;quot;. An alternative method is .read(), which opens the file and stores its contents as one string. Try switching this out in place of&amp;nbsp; .readlines() to check out the difference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4,&lt;/strong&gt; we are printing the stored lines to show them to the user. We now have the file contents, ready to be used however we please.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 5&lt;/strong&gt;, we are closing the file.&lt;/p&gt;
&lt;p&gt;Below, we are going to write a new file. Let's pretend we've done something worth saving with our lines and now want to save them to a new file. We will represent this as the variable &amp;quot;output&amp;quot; in the first line below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
file_name = input(&amp;quot;Enter any file name.&amp;quot;)
save_file = open(file_name, &amp;quot;w&amp;quot;)
save_file.write(&amp;quot;Here is some text to save in a file.&amp;quot;)
save_file.close()
&lt;/pre&gt;
&lt;p&gt;In line 1, we are using Python's input function to ask the user what to name the file and storing it in a variable named file_name.&lt;/p&gt;
&lt;p&gt;In line 2,&amp;nbsp; we are calling the open function again that we used in the first example, but this time, notice the &amp;quot;w&amp;quot;. This indicates that we are opening the file in &amp;quot;write&amp;quot; mode.&lt;/p&gt;
&lt;p&gt;In line 3, we are calling the .write() method on our file handle, named save_file, and passing it our text to be saved in our new file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4&lt;/strong&gt;, we are closing the file, completing the creation of our new file in the same folder as our .py program file.&lt;/p&gt;
&lt;p&gt;Your program is now ready to be run. Double-click your .py file to execute it.&lt;/p&gt;
&lt;p&gt;Before learning Python, file operations were a mystery to me. It took me a while to understand this clearly, and I wanted to share. Once you master these basic file operations, programming gets to be a lot more fun. Do try it out for yourself :D&lt;/p&gt;
</content><category term="coding, programming"></category><category term="data"></category><category term="python"></category><category term="software"></category></entry></feed>