<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - programming</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/programming.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2021-02-14T14:05:00-06:00</updated><entry><title>So You Want to Learn Python?</title><link href="https://lofipython.com/so-you-want-to-learn-python.html" rel="alternate"></link><published>2021-02-14T14:05:00-06:00</published><updated>2021-02-14T14:05:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-02-14:/so-you-want-to-learn-python.html</id><summary type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions&lt;/a&gt;. They are awesome! You can do so much with these. Learn to apply them. You won't regret it! See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2021/02/17/an-intro-to-pythons-built-in-functions/"&gt;An Intro to Python's Built-in Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#string-methods"&gt;String methods&lt;/a&gt;. Want to capitalize, lowercase or replace characters in text? How about checking if a &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str.isdigit"&gt;str.isdigit()&lt;/a&gt;? Get to know Python's string methods. I use these frequently. Also, the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.isdigit.html"&gt;pandas string method implementations&lt;/a&gt; are great for applying them to tabular data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#documentation-strings"&gt;Docstrings&lt;/a&gt;. I truly enjoy adding docstrings at the beginning of my functions. They add clarity and ease of understanding.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=C4Kc8xzcA68&amp;amp;ab_channel=EugeneYarmash"&gt;The Mighty Dictionary&lt;/a&gt;. Lists and tuples are useful too, but &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries"&gt;dictionaries&lt;/a&gt; are so handy with the ability to store and access key-value pairs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List Comprehensions&lt;/a&gt;. These allow you to perform transformations on lists in one line of code! I love the feeling when I apply a list comprehension that is concise, yet readable.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;. These can be used to apply a function &amp;quot;on the fly&amp;quot;. I love their succinctness. It took me a few years to become comfortable with them. Sometimes it makes sense to use a lambda expression instead of a regular function to transform data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#date-objects"&gt;Date Objects&lt;/a&gt;. Wielding date objects and formatting them to your needs is a pivotal Python skill. Once you have it down, it unlocks a lot of automation and scripting abilities when combined with libraries like &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html"&gt;pathlib&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/os.html?highlight=os#module-os"&gt;os&lt;/a&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html?highlight=glob#module-glob"&gt;glob&lt;/a&gt; for reading file metadata and then executing an action based on the date of the file, for example. I use &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.date.today"&gt;date.today()&lt;/a&gt; a lot when I want to fetch today's date and &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#available-types"&gt;timedelta&lt;/a&gt; to compare two dates. The datetime module is your friend, dive in. Must know for custom date formatting: strftime()&amp;nbsp;and&amp;nbsp;strptime(). See also: &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes"&gt;Time Format Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For tabular data, I often use &lt;tt class="docutils literal"&gt;pd.to_datetime()&lt;/tt&gt; to convert a series of strings to datetime objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install pandas with this command: python -m pip install pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USA Born&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1776-07-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WTC Bombings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2001-09-11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Biden Inauguration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2021-01-20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# convert a pandas series of strings to datetime objects&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="#%20convert%20a%20list%20of%20strings%20to%20a%20pandas%20series%20of%20datetime%20objects"&gt;Go here&lt;/a&gt; if you're having pip installation problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just the tip of the iceberg...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The amazing part of Python is that its community has developed an astonishing plethora of external libraries which can be &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;installed by pip&lt;/a&gt;. Usually I'll learn how to use new libraries after googling to find a well-written README on Github or helpful documentation. The language comes with an impressive line-up of baked-in &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;tools and libraries&lt;/a&gt; way beyond what I've mentioned here. But I think this is a great start. Get to know these common Python language features and you'll be surprised how much you can do!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Comprehensive Python Learning Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;How long did it take you to learn Python?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dabeaz-course/practical-python"&gt;Practical Python Programming&lt;/a&gt; (free course)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://google.github.io/styleguide/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/satwikkansal/wtfpython"&gt;What the f*ck Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pysanity.netlify.app/#testing"&gt;PySanity&lt;/a&gt;&lt;/p&gt;
</content><category term="programming"></category><category term="learning"></category><category term="python"></category><category term="skills"></category><category term="technology"></category></entry></feed>