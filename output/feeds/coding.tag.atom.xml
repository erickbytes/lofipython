<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - coding</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/coding.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2022-09-07T23:46:00-05:00</updated><entry><title>Beyond the Standard Library, An External Python Modules Starter Pack</title><link href="https://lofipython.com/30-external-python-libraries-starter-pack.html" rel="alternate"></link><published>2022-09-07T23:46:00-05:00</published><updated>2022-09-07T23:46:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-09-07:/30-external-python-libraries-starter-pack.html</id><summary type="html">&lt;p&gt;Here is a list of external Python modules you can install with &lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. These are not included with your Python version and need to be installed separately. In some cases, other options may be suitable. To keep the list shorter, I picked libraries that were chosen based on having at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a list of external Python modules you can install with &lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. These are not included with your Python version and need to be installed separately. In some cases, other options may be suitable. To keep the list shorter, I picked libraries that were chosen based on having at least one of these qualities:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most obvious library for its category&lt;/li&gt;
&lt;li&gt;a library I have experience using effectively&lt;/li&gt;
&lt;li&gt;provide a niche, useful functionality or tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In alphabetical order:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-block-columns docutils container"&gt;
&lt;/p&gt;&lt;div class="wp-block-column docutils container"&gt;
&lt;/p&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;: code formatting&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/chardet/"&gt;chardet&lt;/a&gt;: detect file encoding (useful for reading CSVs)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/diagrams/"&gt;diagrams&lt;/a&gt;: make cloud architecture diagrams&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/Django/"&gt;Django&lt;/a&gt;: web framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fastapi.tiangolo.com/#installation"&gt;fastapi&lt;/a&gt;: web framework for building APIs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/ffn/"&gt;ffn&lt;/a&gt;: financial function library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/Flask/"&gt;Flask:&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pygame/"&gt;ftfy&lt;/a&gt;: fix mojibake in text&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/fuzzywuzzy/"&gt;fuzzywuzzy&lt;/a&gt;: fuzzy matching library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/matplotlib/"&gt;matplotlib&lt;/a&gt;: data visualization&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/numpy/"&gt;numpy&lt;/a&gt;: array operations&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/openpyxl/"&gt;openpyxl&lt;/a&gt;: foundational Excel library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pandas/"&gt;pandas&lt;/a&gt;: working with tabular data&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pelican/"&gt;pelican&lt;/a&gt;: static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/INSTALL.rst"&gt;psutil&lt;/a&gt;: process and system utilities&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pygame/"&gt;pygame&lt;/a&gt;: video game creation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pyodbc/"&gt;pyodbc&lt;/a&gt;: Open Database Connection client&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;: sampling profiler to visualize your program&lt;/li&gt;
&lt;li&gt;pyheat: visualize code bottlenecks&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest/"&gt;pytest&lt;/a&gt;: testing framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytrends/"&gt;pytrends&lt;/a&gt;: research trends in the Google Trends API&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pytube3/"&gt;pytube3&lt;/a&gt;: YouTube video downloading library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/pywin32/"&gt;pywin32&lt;/a&gt;: Python for Win32 Extensions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt;: HTTP requests&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/scikit-learn/"&gt;scikit-learn&lt;/a&gt;: machine learning&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/soltrack/"&gt;soltrack&lt;/a&gt;: calculate the location of the sun&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/sqlfluff/"&gt;sqlfluff&lt;/a&gt;: SQL linter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/streamlit/streamlit"&gt;streamlit&lt;/a&gt;: build data apps&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/tqdm/"&gt;tqdm&lt;/a&gt;: add a progress bar to loops&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wxpython.org/pages/downloads/index.html"&gt;wxPython&lt;/a&gt;: Graphical User Interface&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/xlrd/"&gt;xlrd&lt;/a&gt;: supplementary Excel library&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/xmltodict/"&gt;xmltodict&lt;/a&gt;: convert XML to nested Python dicts&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;Python Documentation: Installing Python Modules&lt;/a&gt;&lt;/p&gt;
&lt;div class="wp-image-7164 figure"&gt;
&lt;img alt="python pip install shell" src="https://pythonmarketer.files.wordpress.com/2022/09/image.png?w=672" /&gt;
&lt;/div&gt;
</content><category term="programming, python"></category><category term="advanced python modules"></category><category term="coding"></category><category term="useful python libraries"></category></entry><entry><title>Automating pytest on Windows with a .bat file, Python, Task Scheduler and Box</title><link href="https://lofipython.com/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box.html" rel="alternate"></link><published>2020-03-21T01:47:00-05:00</published><updated>2020-03-21T01:47:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-03-21:/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Automatic pytest Testing and Failure Alert Monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is my solution to replace manually running pytest each day in command prompt. I want to automate running pytest every day, test if my automated python scripts ran smoothly and get notified if any tests fail.&lt;/p&gt;
&lt;p&gt;Installing &lt;a class="reference external" href="https://docs.pytest.org/en/latest/getting-started.html"&gt;pytest&lt;/a&gt; , a python testing library …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Automatic pytest Testing and Failure Alert Monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is my solution to replace manually running pytest each day in command prompt. I want to automate running pytest every day, test if my automated python scripts ran smoothly and get notified if any tests fail.&lt;/p&gt;
&lt;p&gt;Installing &lt;a class="reference external" href="https://docs.pytest.org/en/latest/getting-started.html"&gt;pytest&lt;/a&gt; , a python testing library:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install pytest
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;A Few Words on pytest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is a unit test framework in python. pytest expects you to write each test as a self-contained function. One python file can contain many different test functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Writing a Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's use &lt;strong&gt;test_file_date.py&lt;/strong&gt; as our test, which uses the &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html"&gt;glob&lt;/a&gt; module and &lt;a class="reference external" href="https://docs.python.org/2/library/os.path.html#os.path.getmtime"&gt;os.getmtime&lt;/a&gt; to get the csv with the most recent modification dateon my desktop. Then it tests if that date is today, in my case, for an expected daily file drop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_csv_date_equals_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The match format is for a Windows path with Unix style pattern matching.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
     &lt;span class="c1"&gt;# specify csv extension and folder&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/Desktop/*.csv&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# get most recent file&lt;/span&gt;
    &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;csv_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;csv_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;csv_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Here's the pytest text output when the test is passing:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
============================= test session starts =============================
platform win32 -- Python 3.8.1, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: C:\
collected 1 item

..\..\Users\erick\Desktop\test_file_date.py . [ 14%]
                                                                   [100%]

============================== 1 passed in 0.28s ==============================
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Creating a Task with Windows Task Scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you haven't used python with Windows Task Scheduler before, &lt;a class="reference external" href="https://lofipython.com/automated-python-with-windows-task-scheduler/"&gt;my previous post&lt;/a&gt; on creating a task may help you. We'll create two of them for our testing system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding Your Task Scheduler Program: a Windows .bat file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add your username to the text below and adjust the paths to your system. Then save a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Batch_file"&gt;Windows .bat file&lt;/a&gt; with this text, which points to your pytest.exe file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /c &amp;quot;C:\Users\your_username\Desktop\sandbox\Scripts\pytest.exe --capture=sys&amp;quot; ^
C:\Users\your_username\Desktop\test_file_date.py &amp;gt; C:\Users\your_username\Desktop\sandbox\Test_Results\Test_Results.txt
&lt;/pre&gt;
&lt;p&gt;This example is referencing an .exe within a hypothetical &amp;quot;sandbox&amp;quot; virtual environment, located on my Desktop. If you have a virtualenv or venv, check the Scripts folder. (Bin on Linux.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breaking this out, there are five .bat files parts:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /c &amp;quot;C:\Users\your_username\Desktop\sandbox\Scripts\pytest.exe --capture=sys&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Windows' &lt;a class="reference external" href="https://ss64.com/nt/cmd.html"&gt;cmd command&lt;/a&gt; takes a program, so we're passing pytest. &lt;a class="reference external" href="https://docs.pytest.org/en/latest/capture.html"&gt;The --capture=sys argument&lt;/a&gt; tells pytest to capture the test results. &lt;strong&gt;Note:&lt;/strong&gt; switching cmd /c to cmd /k forces the terminal to stay open when you are testing your bat file. You can double-click your .bat file to test run it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
^
&lt;/pre&gt;
&lt;p&gt;circumflex represents a line continuation in Windows batch files for better readability&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\test_file_date.py
&lt;/pre&gt;
&lt;p&gt;Next we're passing our python file as an argument to pytest, testing our file's modified date matches today's date.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This is a Windows redirect. It redirects the pytest output from sys to a text file, which is the last argument in our .bat file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\sandbox\Test_Results\Test_Results.txt
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Browse to select your .bat file for your Windows Task Scheduler task:&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="bat_task" class="alignnone size-full wp-image-2669" src="https://pythonmarketer.files.wordpress.com/2020/03/bat_task.jpg" style="width: 1032px; height: 590px;" /&gt;
&lt;p&gt;&lt;strong&gt;Reading the Tests and Triggering Alerts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Passing tests signal your scripts are running successfully. When things don't work, email alerts of the failure help us respond quickly.&lt;/p&gt;
&lt;p&gt;Let's set another task scheduler job to run &lt;strong&gt;read_test_results.py,&lt;/strong&gt; to run a few minutes after the first job each day. See this &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;example of running Python with Task Scheduler&lt;/a&gt; if you haven't triggered a python script from Task Scheduler before.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Automate pytest with Windows Task Scheduler. Use Task Scheduler run a batch file.&lt;/span&gt;
&lt;span class="sd"&gt;The batch file runs pytest and captures our pytest function results to sys.&lt;/span&gt;
&lt;span class="sd"&gt;If a text file contains a failure or error, write the test contents into a folder.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Automated_Testing_Alerts.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;-%b-%y %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Checking for failed tests...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/test_results/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;test_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.txt&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;txt_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;txt_file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FAILURES&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/send_failure_alert/&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;txt_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_Failed_Results_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.txt&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No failed tests found in file:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Setting up Email Alert Notifications on a Box Folder&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The above script checks the test results and creates a file with any failed tests in a different folder. I &lt;a class="reference external" href="https://support.box.com/hc/en-us/articles/360044194073-Manage-Notifications-for-Enterprise-Users"&gt;edited the folder's settings&lt;/a&gt; to email me when a new file is added, thanks to Box notifications. We use &lt;a class="reference external" href="http://www.box.com"&gt;Box&lt;/a&gt; for secure file sharing at my day current day job.&lt;/p&gt;
&lt;p&gt;Alternatively for those without Box, you could use 'ole trusty &lt;a class="reference external" href="https://docs.python.org/3/library/smtplib.html"&gt;smtplib&lt;/a&gt; to send the failure alerts with python. I chose the easier, ready to go option. Remember, &amp;quot;&lt;a class="reference external" href="https://zen-of-python.info/simple-is-better-than-complex.html"&gt;Simple is better than complex&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;Or the &lt;a class="reference external" href="https://github.com/mhammond/pywin32"&gt;pywin32 module&lt;/a&gt; has an interface to Outlook that is very handy. For an example of sending a Windows Outlook email, check the very end of &lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2020/05/06/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection/"&gt;this post I wrote on &amp;quot;Scripting Windows Like a Pro&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We now have an automated testing system with email monitoring alerts if our csv file date test fails, thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Windows Task Scheduler (two tasks running each day in succession)&lt;/li&gt;
&lt;li&gt;python/pytest&lt;/li&gt;
&lt;li&gt;a Windows .bat file&lt;/li&gt;
&lt;li&gt;Box (or smtplib or pywin32) email alerts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In Summation&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The first task runs a .bat file to run pytest and create a text file with daily automation test results.&lt;/li&gt;
&lt;li&gt;The second task runs a python file. Setting in motion:&lt;/li&gt;
&lt;li&gt;Checking the test result text files, looking for failed tests&lt;/li&gt;
&lt;li&gt;Creating a text file with any failing tests in a Box folder, if found&lt;/li&gt;
&lt;li&gt;Then Box emails me if any test fails.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Final Thoughts on the .bat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was the first time I successfully deployed a Windows batch file. It took me many tries and googling to properly format of the .bat file. They are worth understanding and seem to open up many possibilities on Windows. In this case it was a &amp;quot;glue&amp;quot; piece that allowed me to accomplish my goal, automated testing and alerts for my python scripts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Life is in the journey.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What we learn along the way shapes us. Learning to use these resources together has been a giant step towards writing more reliable python programs. It has improved my knowledge of Windows OS scripting, which can sometimes be a handy substitute or complement to python. Now, time to write more tests. Thanks for reading!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="_wp_link_placeholder"&gt;pytest plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest-csv/"&gt;pytest-csv&lt;/a&gt;: write test results to a csv with this plugin&lt;/p&gt;
&lt;p&gt;I wrote another post compiling peoples' thoughts on testing &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/05/a-collection-of-software-testing-opinions-for-python-and-beyond/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="automation, programming, software testing, Windows"></category><category term="coding"></category><category term="pytest"></category><category term="python"></category><category term="software development"></category></entry><entry><title>Automated Python With Windows Task Scheduler</title><link href="https://lofipython.com/automated-python-with-windows-task-scheduler.html" rel="alternate"></link><published>2018-11-25T19:44:00-06:00</published><updated>2018-11-25T19:44:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-11-25:/automated-python-with-windows-task-scheduler.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;So you want to run your Python scripts automatically, but how?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had heard of several popular scheduling libraries in Python like &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt;, &lt;a class="reference external" href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, and&amp;nbsp;&lt;a class="reference external" href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;. One of my requirements is to run the python file &amp;quot;in the background&amp;quot;, not in command prompt or an open window.&lt;/p&gt;
&lt;p&gt;Enter Windows Task …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;So you want to run your Python scripts automatically, but how?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had heard of several popular scheduling libraries in Python like &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt;, &lt;a class="reference external" href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, and&amp;nbsp;&lt;a class="reference external" href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;. One of my requirements is to run the python file &amp;quot;in the background&amp;quot;, not in command prompt or an open window.&lt;/p&gt;
&lt;p&gt;Enter Windows Task Scheduler, the de facto scheduler on Windows 7 computers. I have&amp;nbsp; scheduled a few scripts and it is working like a charm. In this post, I will schedule an example script to clean up my desktop at the beginning of each day. I have a habit of accumulating many Excel files there throughout the workday. This example automatically moves them into a folder.&lt;/p&gt;
&lt;p&gt;Other Windows scheduling alternatives worth mentioning include &lt;a class="reference external" href="http://thepythoncorner.com/dev/how-to-create-a-windows-service-in-python/"&gt;creating a Windows service&lt;/a&gt;, or using &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/taskschd/schtasks"&gt;schtasks&lt;/a&gt; if you prefer the command line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's how to schedule a Python script to run:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Search for Windows Task Scheduler in the start menu. Then select &amp;quot;Task Scheduler Library&amp;quot; to see all of the tasks Windows is running automatically.&lt;/li&gt;
&lt;li&gt;In the right toolbar, select &amp;quot;Create Basic Task&amp;quot; and give it a name and description. Note: I selected &amp;quot;Configure for: Windows 7, Windows Server 2008 R2&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="general" class="wp-image-1577 alignright" src="https://pythonmarketer.files.wordpress.com/2018/11/general.png" style="width: 481px; height: 361px;" /&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Set the time and frequency that the program will run in the &amp;quot;Triggers&amp;quot; tab.&lt;/li&gt;
&lt;li&gt;Under the &amp;quot;Actions&amp;quot; tab, select &amp;quot;Start a Program&amp;quot; from the dropdown. Under &amp;quot;Program/Script&amp;quot;, enter the path to your Python.exe file. I set mine to a Python executable located within my &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;, but yours might be found wherever you have Python installed.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
C:\Users\your_username\Desktop\36env\Scripts\python.exe
&lt;/pre&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Under &amp;quot;Add arguments (optional)&amp;quot;, add the path to your .py script, within quotes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;C:\Users\your_username\Desktop\36env\clean_desktop_excels.py&amp;quot;
&lt;/pre&gt;
&lt;img alt="actions" class="alignnone size-full wp-image-1578" src="http://pythonmarketer.files.wordpress.com/2018/11/bd0a9-actions-e1543177551739.png" style="width: 448px; height: 236px;" /&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Select additional conditions and settings as desired, such as &amp;quot;Wake the computer to run this task&amp;quot; and &amp;quot;Run with highest privileges&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am enjoying this simple, easy and convenient scheduling manager for Windows. I figured most of this out thanks to &lt;a class="reference external" href="https://www.esri.com/arcgis-blog/products/product/analytics/scheduling-a-python-script-or-model-to-run-at-a-prescribed-time/?rmedium=redirect&amp;amp;rsource=/esri/arcgis/2013/07/30/scheduling-a-scrip"&gt;this blog&lt;/a&gt;. Below is my script to clean my desktop each morning by moving my Excel files into a folder, using Python's stock &lt;a class="reference external" href="https://docs.python.org/3/library/shutil.html"&gt;shutil&lt;/a&gt; and os libraries. Set it and forget it, ya know what i mean? :D&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# Desktop Spreadsheet File Cleaner: get all Desktop files and folders&lt;/span&gt;
&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dir_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;excel_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dir_items&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.csv&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.xls&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/Excels&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;excel_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path_to_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;xl&lt;/span&gt;
    &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc721846(v=ws.11)?redirectedfrom=MSDN"&gt;Troubleshooting Windows Task Scheduler&lt;/a&gt; - Windows Documentation&lt;/p&gt;
</content><category term="automation, productivity, programming, python, Windows"></category><category term="coding"></category><category term="organization"></category></entry></feed>