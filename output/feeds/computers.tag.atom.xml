<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - computers</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/computers.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2020-07-15T00:24:00-05:00</updated><entry><title>Benefits of Go and Threads in Distributed Systems</title><link href="https://lofipython.com/benefits-of-go-and-threads-in-distributed-systems.html" rel="alternate"></link><published>2020-07-15T00:24:00-05:00</published><updated>2020-07-15T00:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-07-15:/benefits-of-go-and-threads-in-distributed-systems.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are my &lt;a class="reference external" href="https://www.youtube.com/watch?v=gA4YXUJX7t8&amp;amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB&amp;amp;index=3&amp;amp;t=0s"&gt;YouTube lecture&lt;/a&gt; notes from MIT's Distributed Systems course. Thank you MIT and Professor Morris!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB"&gt;MIT 6.824 Distributed Systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lecture 2: RPC and Threads - Feb 7, 2020&lt;/p&gt;
&lt;p&gt;Prof. Robert Morris (Spring 2020)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go is a popular programming language choice so my ears perked up when â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are my &lt;a class="reference external" href="https://www.youtube.com/watch?v=gA4YXUJX7t8&amp;amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB&amp;amp;index=3&amp;amp;t=0s"&gt;YouTube lecture&lt;/a&gt; notes from MIT's Distributed Systems course. Thank you MIT and Professor Morris!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB"&gt;MIT 6.824 Distributed Systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lecture 2: RPC and Threads - Feb 7, 2020&lt;/p&gt;
&lt;p&gt;Prof. Robert Morris (Spring 2020)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go is a popular programming language choice so my ears perked up when this lecture began. These notes were taken as the professor explains why he teaches his class in Go. He also mentioned he'd be able to teach it with Python or Java. He used C++ years ago.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The beginning of this lecture was a great summary of:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;key benefits of Golang&lt;/li&gt;
&lt;li&gt;what threads are and why they're great&lt;/li&gt;
&lt;li&gt;how Go, threads and async tie together&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Go is Good for Distributed Systems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go is concurrency-friendly. With concurrent threads, you can effectively split a task such as making web requests to a server into many threads, completing them simultaneously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Golang's Convenient Features and Benefits&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;convenient &lt;a class="reference external" href="https://golang.org/pkg/net/rpc/"&gt;Remote Procedure Call library&lt;/a&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;RPC&lt;/a&gt;) C++ lacks anything comparable?&lt;/li&gt;
&lt;li&gt;&amp;quot;Go is type-safe and memory-safe, unlike C++&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;garbage collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;the language is simple, unlike C++&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;good support for threads, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lock_(computer_science)"&gt;locking&lt;/a&gt; and synchronization between threads&amp;quot;&lt;/li&gt;
&lt;li&gt;in Go, &amp;quot;&lt;a class="reference external" href="https://golang.org/doc/effective_go.html#goroutines"&gt;goroutines&lt;/a&gt;&amp;quot; are threads&lt;/li&gt;
&lt;li&gt;professor's recommended reading to learn Go: &lt;a class="reference external" href="https://golang.org/doc/effective_go.html"&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why use threads?&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I/O Concurrency&lt;/li&gt;
&lt;li&gt;Multi-core &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parallel_computing#:~:text=Parallel%20computers%20can%20be%20roughly,work%20on%20the%20same%20task."&gt;Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convenience, e.g. &amp;quot;create 10 threads that sleep for a second and then do a little bit of work&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Threads are the main tool we're using to manage concurrency in programs.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Robert Morris&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contrast With&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Event-driven_programming#:~:text=In%20computer%20programming%2C%20event%2Ddriven,from%20other%20programs%20or%20threads."&gt;Event-driven Programming&lt;/a&gt;&lt;strong&gt;(&amp;quot;Asynchronomous&amp;quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A single thread, single loop that waits for an event.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Combining Threads and Event Driven Programming&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Create one thread for each procedure call.&amp;quot;... &amp;quot;On each of the threads run a stripped down event driven loop. Sort of one event loop per core. That results in parallelism and I/O concurrency.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Robert Morris&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Postface: Concurrent Python Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've rarely if ever used multiple threads in Python. Simply running a single threaded script seems sufficient for most of my tasks. Maybe I could speed up API requests by splitting into threads when making a few hundred thousand requests? Apparently I'm missing out on concurrent threading efficiency gains.&lt;/p&gt;
&lt;p&gt;I once experimented with the &lt;a class="reference external" href="https://docs.python.org/3.8/library/multiprocessing.html"&gt;multiprocessing&lt;/a&gt; module's &lt;a class="reference external" href="https://docs.python.org/3.8/library/multiprocessing.html#the-process-class"&gt;Process class&lt;/a&gt;, which worked on Linux but not Windows for me. I ended up taking an simpler, single thread approach instead. I've also heard of using multiprocessing &lt;a class="reference external" href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool"&gt;pool&lt;/a&gt; objects. There's also the &lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;asyncio&lt;/a&gt; library &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html"&gt;concurrent.futures&lt;/a&gt; modules to consider. The &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example"&gt;ProcessPoolExecutor&lt;/a&gt; looks promising.&lt;/p&gt;
&lt;p&gt;Python also has the &lt;a class="reference external" href="https://docs.python.org/3/library/queue.html"&gt;queue module.&lt;/a&gt; I haven't used it yet but at one point I watched a talk where &lt;a class="reference external" href="https://www.youtube.com/watch?v=_GP9OpZPUYc"&gt;Raymond Hettinger&lt;/a&gt; recommended queue as a good option if you want concurrency in Python.&lt;/p&gt;
&lt;p&gt;It seems there are many options available in Python but it's not clear which tools should be deployed and when. And your chosen concurrency strategy may add extra complexity. Handle with care. Or consider learning Go if you want to use threads to scale your distributed system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: Python Concurrency Success&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently deployed the &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor"&gt;ThreadPoolExecutor&lt;/a&gt; from the concurrent.futures module to efficiently move thousands of files to a new folder. So Python does have fairly accessible alternatives to concurrency. I guess I'll need to try Go sometime to compare!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;concurrent.futures&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Move files concurrently from the&lt;/span&gt;
&lt;span class="sd"&gt;current working directory to a new folder.&lt;/span&gt;

&lt;span class="sd"&gt;This script is adapted from the Python&lt;/span&gt;
&lt;span class="sd"&gt;ThreadPoolExecutor documentation:&lt;/span&gt;
&lt;span class="sd"&gt;https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown&lt;/span&gt;

&lt;span class="sd"&gt;disclaimer: I am new to concurrency. Not 100% sure&lt;/span&gt;
&lt;span class="sd"&gt;if I am using the ThreadPoolExecutor correctly&lt;/span&gt;
&lt;span class="sd"&gt;but it seems to work, by moving my files concurrently and fast.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;csvs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.csv&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;split_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;file_batches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;split_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_batches&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;csv_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;csv_D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dst_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://opensource.googleblog.com/2020/08/new-case-studies-about-googles-use-of-go.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+GoogleOpenSourceBlog+%28Google+Open+Source+Blog%29"&gt;New Case Studies About Google's Use of Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://go.dev/"&gt;go.dev&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, concurrency, data, education, Go, lectures notes, programming"></category><category term="computers"></category><category term="distributed systems"></category><category term="golang"></category><category term="MIT"></category><category term="python"></category><category term="rpc"></category></entry><entry><title>Installing Debian 9 Stretch Linux OS on a Dell Inspiron Laptop and Configuring the Wifi Network</title><link href="https://lofipython.com/installing-debian-9-stretch-linux-os-on-a-dell-inspiron-laptop-and-troubleshooting-wifi.html" rel="alternate"></link><published>2019-04-25T14:14:00-05:00</published><updated>2019-04-25T14:14:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-04-25:/installing-debian-9-stretch-linux-os-on-a-dell-inspiron-laptop-and-troubleshooting-wifi.html</id><summary type="html">&lt;p&gt;Yesterday, I converted an 11-year old Dell Inspiron E1505 from Windows XP to Debian 9 Stretch. I may have overwrote my Windows XP OS. I do not care if I lost it since it's a vulnerable and outdated OS, which is no longer supported by Microsoft. I encountered difficulty with â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, I converted an 11-year old Dell Inspiron E1505 from Windows XP to Debian 9 Stretch. I may have overwrote my Windows XP OS. I do not care if I lost it since it's a vulnerable and outdated OS, which is no longer supported by Microsoft. I encountered difficulty with getting the wifi to work on Debian, but was able to find a solution using &lt;a class="reference external" href="https://help.ubuntu.com/community/WICD"&gt;Wicd&lt;/a&gt;. Here are the steps I followed to do it all.&lt;/p&gt;
&lt;div class="section" id="using-the-debian-installer-loader"&gt;
&lt;h2&gt;Using The Debian Installer-Loader&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;First, back up your Windows computer files. Then download the &lt;a class="reference external" href="https://wiki.debian.org/DebianInstaller/Loader"&gt;Debian-Installer Loader&lt;/a&gt; Windows executable from the Debian wiki.&lt;/li&gt;
&lt;li&gt;Click the downloaded executable and &lt;img alt="IMG_20190423_184816999" class="wp-image-1785 alignright" src="http://pythonmarketer.files.wordpress.com/2019/04/97878-img_20190423_184816999-e1556211269262.jpg" style="width: 311px; height: 196px;" /&gt;follow instructions. I followed the default settings all the way through.&lt;/li&gt;
&lt;li&gt;You may need to choose your own partitioning settings to ensure Windows is preserved if desired.&lt;/li&gt;
&lt;li&gt;During installation, choose your Linux collection. I chose Xfce because it &lt;a class="reference external" href="https://www.slant.co/versus/1122/1124/~xfce_vs_gnome-3"&gt;seems to be highest ranked&lt;/a&gt; among Linux users and &amp;quot;not just helpful for older computers where few system resources are available, but also simply for those who want to get the most out of their systems.&amp;quot; Gnome and KDE are other popular options.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="IMG_20190423_184023738" class="wp-image-1784 aligncenter" src="http://pythonmarketer.files.wordpress.com/2019/04/46248-img_20190423_184023738-e1556211291659.jpg" style="width: 564px; height: 375px;" /&gt;
&lt;p&gt;&lt;strong&gt;After completing installation, restart your computer and select your new OS on boot-up. The following error codes displayed for me while starting up, signaling missing wifi firmware.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ERROR Failed to load firmware!
b43ssb0:0: firmware: failed to load b43/ucode5.fw (-2)
b43ssb0:0: firmware: failed to load b43-open/ucode5.fw (-2)
b43-phy0 ERROR: You must go to https://wireless.wiki.kernel.org/en/users/drivers/b43#devicefirmware and download the correct firmware for this driver version.
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;It took me a few boot-ups before I realized what this error message meant. In the rest of this post I am trying to figure out and fix what is wrong before I saw the error message. I enjoyed learning how to introspect Linux networks, but if I were trying to fix this problem again, I'd go to directly to&lt;/em&gt;&lt;a class="reference external" href="http://linuxwireless.sipsolutions.net/en/users/Drivers/b43/"&gt;this page&lt;/a&gt;&lt;em&gt;, which is linked to from the link in the error message, and try the solution there first.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-installation-setup"&gt;
&lt;h2&gt;Post Installation Setup&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Open up the terminal once you're into your new Desktop OS&lt;/strong&gt;&amp;nbsp;and enter the below commands.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
su -
apt-get install sudo -y usermod -aG sudo yourusername
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1) Enable yourself as root user.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Install sudo.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) Give yourself sudo user permission.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optional-replacing-network-manager-with-wicd"&gt;
&lt;h2&gt;Optional: Replacing Network-Manager With Wicd&lt;/h2&gt;
&lt;p&gt;This Debian 9 package ships with Network-Manager. After logging in, I wasn't sure why wifi was not working, so I decided to remove Network-Manager and install Wicd. (This was before I realized what the error code displayed on boot-up meant.) Wicd is a Linux network managing alternative and it's built with Python, by the way. I followed &lt;a class="reference external" href="https://help.ubuntu.com/community/WICD"&gt;these instructions&lt;/a&gt; to execute the below commands.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
uninstall nm
sudo apt-get install -d --reinstall network-manager network-manager-gnome
install wicd
sudo apt-get install wicd-gtk
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;After installing Wicd, my Ethernet connection was not working. This fixed it for me:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ifconfig eth0 up
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting-linux-wifi-inspecting-your-system"&gt;
&lt;h2&gt;Troubleshooting Linux Wifi &amp;amp; Inspecting Your System&lt;/h2&gt;
&lt;p&gt;Now, let's check for enabled network interfaces. &amp;quot;wlan0&amp;quot; is usually the name of the wireless interface. Does wlan0 show when you enter this command? If not, then you may need to update your wifi firmware. This was the case for me. Below is an output where wlan0 is correctly configured.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ifconfig
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;eth0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt; mtu 1500
ether 00:25:a5:cf:38:7d txqueuelen 1000 (Ethernet)
RX packets 0 bytes 0 (0.0 B)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 0 bytes 0 (0.0 B)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
device interrupt 17
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536
inet 127.0.0.1 netmask 255.0.0.0
inet6 ::1 prefixlen 128 scopeid 0x10
loop txqueuelen 1 (Local Loopback)
RX packets 4 bytes 240 (240.0 B)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 4 bytes 240 (240.0 B)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
wlan0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
inet 191.142.1.297 netmask 255.255.255.0 broadcast 182.138.5.255
inet6 2601:241:8c00:50ea:21a:92ff:fe0d:7531 prefixlen 64 scopeid 0x0
inet6 fe80::22a:42tf:fe0d:7531 prefixlen 64 scopeid 0x20 ether 00:2a:92:2d:45:51 txqueuelen 1000 (Ethernet)
RX packets 8509 bytes 4639778 (4.4 MiB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 6206 bytes 923792 (902.1 KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;Check wlan0 is not blocked on kill list.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo rfkill list all
&lt;/pre&gt;
&lt;p&gt;Some computers have a &amp;quot;kill switch&amp;quot; for wifi. This command lists any blocked interfaces. If it is blocked, &lt;a class="reference external" href="https://ubuntuforums.org/showthread.php?t=2298330"&gt;this thread&lt;/a&gt; might be useful. If nothing shows when you run this command, or if you see wlan0 is not blocked, carry on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Check which wifi controller you have.&lt;/strong&gt; &lt;a class="reference external" href="https://askubuntu.com/questions/55868/installing-broadcom-wireless-drivers"&gt;This thread&lt;/a&gt; &lt;strong&gt;provides more info on what this means.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
lspci -nn | grep -e 0200 -e 0280
&lt;/pre&gt;
&lt;p&gt;03:00.0 Ethernet controller [0200]: Broadcom Limited BCM4401-B0 100Base-TX [14e4:170c] (rev 02)
0b:00.0 Network controller [0280]: Broadcom Limited BCM4311 802.11b/g WLAN [14e4:4311] (rev 01)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Find your system architecture. This determines which firmware you should download in the next step.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo dpkg --print-architecture
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; &lt;a class="reference external" href="https://wireless.wiki.kernel.org/en/users/drivers/b43/firmware"&gt;read here&lt;/a&gt; &lt;strong&gt;to determine the right packages for your Linux system. Then download the appropriate missing wifi firmware. For Debian, I downloaded the two packages below.&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://packages.debian.org/stretch/b43-fwcutter"&gt;b43-fwcutter&lt;/a&gt; 2) &lt;a class="reference external" href="https://packages.debian.org/stretch/firmware-b43-installer"&gt;b43-installer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;cd&amp;quot; into the directory with .deb files. Run the below commands to install the new firmware, then reboot your computer. The last two commands are adapted from&lt;/strong&gt; &lt;a class="reference external" href="https://ubuntuforums.org/showthread.php?t=2203312&amp;amp;page=4"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo dpkg -i firmware-b43-installer_019-3_all.deb
sudo dpkg -i firmware-b43-fwcutter_019-3_i386.deb
sudo modprobe -r b43
sudo modprobe b43
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Edit Wicd preferences to set wlan0 as the wireless interface if needed.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="change_wicd_settings" class="alignnone wp-image-1779" src="https://pythonmarketer.files.wordpress.com/2019/04/change_wicd_settings.png" style="width: 380px; height: 357px;" /&gt;
&lt;p&gt;&lt;strong&gt;Success! Wireless networks are now showing.&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="wicd_success" class="alignnone wp-image-1780" src="https://pythonmarketer.files.wordpress.com/2019/04/wicd_success.png" style="width: 375px; height: 351px;" /&gt;
&lt;p&gt;&lt;strong&gt;Wrapping Up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd like to thank the awesome people who contributed to the Debian Installer-loader and all the help in Linux forums that enabled me figure this out. I'm new to the world of Linux but already enjoying diving into this operating system. Its ability to do just about anything from the command line are a lot of fun. I am now running two Linux systems, one on my Dell and another running Ubuntu that I installed on a Chromebook with &lt;a class="reference external" href="https://www.howtogeek.com/162120/how-to-install-ubuntu-linux-on-your-chromebook-with-crouton/"&gt;Crouton&lt;/a&gt;. Both have been relatively painless to set up. It this case, it turned a sluggish laptop into a very capable machine. They should call it Lit-nux :)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/erickbytes/status/1120864722855825409"&gt;https://twitter.com/erickbytes/status/1120864722855825409&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full Disclosure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This worked on my computer for a few days before the keyboard stopped working correctly on my computer. Typing became impossible because the keys didn't work or entered the wrong letters when pressed. I'm not sure what the cause of it was, but consider that before attempting this on a machine. Be prepared to lose it. If you really need the machine to be functional, it may not be a great idea to try this. This was attempted on an old beat up computer. I would try this method of porting a Windows machine to Linux again as a salvage project or on a low-risk Windows machine if I had one lying around.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Linux, software"></category><category term="computers"></category><category term="debian"></category><category term="operating system"></category><category term="os upgrade"></category><category term="Windows"></category></entry><entry><title>list(cool_python_things)</title><link href="https://lofipython.com/blog_post-listcool_python_things.html" rel="alternate"></link><published>2018-03-24T19:38:00-05:00</published><updated>2018-03-24T19:38:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-03-24:/blog_post-listcool_python_things.html</id><summary type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project contains&amp;nbsp;&lt;strong&gt;pytudes&lt;/strong&gt;â€”Python programs for perfecting programming skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt; - Fuzzy string matching python library, written â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project contains&amp;nbsp;&lt;strong&gt;pytudes&lt;/strong&gt;â€”Python programs for perfecting programming skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt; - Fuzzy string matching python library, written by SeatGeek&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://soundcloud.com/talkpython"&gt;Talk Python to Me&lt;/a&gt; - Python podcast&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.oreilly.com/programming/free/?imm_mid=0e20a9&amp;amp;cmp=em-prog-na-na-afterp_triggered_email_programming_resources"&gt;Free Programming Books from O'Reilly&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="coding, pandas, programming"></category><category term="computers"></category><category term="python"></category></entry><entry><title>How to Install Libraries and Enable the pip Installer in Python</title><link href="https://lofipython.com/how-to-python-pip-install-new-libraries.html" rel="alternate"></link><published>2018-01-20T17:50:00-06:00</published><updated>2018-01-20T17:50:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-01-20:/how-to-python-pip-install-new-libraries.html</id><summary type="html">&lt;p&gt;Python comes with a bunch of &lt;a class="reference external" href="https://docs.python.org/3/py-modindex.html"&gt;standard modules&lt;/a&gt;. My favorites are shutil, glob, datetime, time, os (operating system), re (regular expressions) and webbrowser. The standard library is loaded.&lt;/p&gt;
&lt;p&gt;Inevitably, you'll want to install new libraries from Python's rich ecosystem of external modules. Enter pip, Python's handy package manager and people's â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python comes with a bunch of &lt;a class="reference external" href="https://docs.python.org/3/py-modindex.html"&gt;standard modules&lt;/a&gt;. My favorites are shutil, glob, datetime, time, os (operating system), re (regular expressions) and webbrowser. The standard library is loaded.&lt;/p&gt;
&lt;p&gt;Inevitably, you'll want to install new libraries from Python's rich ecosystem of external modules. Enter pip, Python's handy package manager and people's champion.&lt;/p&gt;
&lt;p&gt;This post will teach you some Python history, show how to install pandas, and help you troubleshoot problems if it's not working. You'll find Windows and Linux commands for venv setup (recommended). With pip, you'll feel like Neo when installing new modules. Any skill is at your fingertips. It's like learning kung fu. There's probably a library for that!&lt;/p&gt;
&lt;img alt="i know kung fu" class="alignnone size-full wp-image-1321" src="http://pythonmarketer.files.wordpress.com/2018/01/19c0c-i-know-kung-fu-e1516470914221.png" style="width: 1277px; height: 532px;" /&gt;
&lt;p&gt;First, Some Python Version Caveats + History**
**
------------------------------------------------&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python 2 reached end of life on January 1st, 2020&lt;/strong&gt;. &lt;a class="reference external" href="https://www.python.org/doc/sunset-python-2/"&gt;Python 2 has officially been sunset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python comes with pip now, no setup is required. But certain versions such as Python 3.2 or the Python 2.7 that came stock on my improbably still functioning 2008 black Macbook, for example, may not have it installed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In December 2021, Python 3.6 reached&lt;/strong&gt;&lt;a class="reference external" href="https://devguide.python.org/devcycle/#end-of-life-branches"&gt;&amp;quot;end of life phase&amp;quot;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python 3.6 is &amp;quot;now effectively frozen&amp;quot;. Read more in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0494/"&gt;PEP 494&lt;/a&gt;. (Released Oct. 2022)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; use Python 3.7 to 3.11. This blog endorses using the lightning fast Python version &lt;a class="reference external" href="https://www.python.org/downloads/release/python-3110/"&gt;3.11.&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="enter-this-in-your-terminal"&gt;
&lt;h2&gt;Enter This in Your Terminal&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Pandas is a super useful library for wrangling spreadsheet data, AKA &amp;quot;tabular&amp;quot; data. If successful, you should see activity that looks similar to the below screenshot, where I am installing &lt;a class="reference external" href="https://openpyxl.readthedocs.io/en/stable/"&gt;openpyxl&lt;/a&gt;, an additional Python Excel library you'll likely want. You are good to go! This is the part where you get to feel like Neo! See &lt;a class="reference external" href="https://docs.python.org/3/installing/index.html"&gt;Installing Python Modules&lt;/a&gt; in the Python Documentation for more detailed instructions.&lt;/p&gt;
&lt;img alt="neo_pip" class="alignnone size-full wp-image-1322" src="http://pythonmarketer.files.wordpress.com/2018/01/de9d6-neo_pip-e1587604013861.png" style="width: 650px; height: 340px;" /&gt;
&lt;p&gt;&lt;strong&gt;To view all your installed libraries, enter:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Write a &amp;quot;requirements.txt&amp;quot; of installed libraries:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;You can list your outdated packages with the --outdated argument:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;outdated&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Use pip's -h help command line argument:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Take a look at this &lt;a class="reference external" href="https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/"&gt;list of 20 modules&lt;/a&gt; to get started. Here is another &lt;a class="reference external" href="https://github.com/vinta/awesome-python"&gt;more comprehensive list of libraries&lt;/a&gt; you can now install.&lt;/li&gt;
&lt;li&gt;Swing by the pip documentation &lt;a class="reference external" href="https://pip.pypa.io/en/stable/quickstart/"&gt;Quickstart&lt;/a&gt;&amp;nbsp;and &lt;a class="reference external" href="https://pip.pypa.io/en/stable/user_guide/"&gt;User Guide&lt;/a&gt; to learn some helpful commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/search/?q=time+travel"&gt;PyPI, the&amp;nbsp;Python Package Index&lt;/a&gt; is the official Python package repository.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://snarky.ca/why-you-should-use-python-m-pip/"&gt;Why you should use 'python -m pip'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://opensource.com/downloads/pip-cheat-sheet?utm_medium=Email&amp;amp;utm_campaign=weekly&amp;amp;sc_cid=7013a000002DAKPAA4"&gt;pip cheat sheet from opensource.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Congrats on figuring out how to install packages with pip, have fun!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="having-issues-try-upgrading-your-pip-version"&gt;
&lt;h2&gt;Having issues? Try upgrading your pip version.&lt;/h2&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="try-the-ensurepip-command"&gt;
&lt;h2&gt;Try the ensurepip command.&lt;/h2&gt;
&lt;p&gt;This command will install and upgrade pip to the newest version. New in Python 3.4:&lt;/p&gt;
&lt;div class="highlight-python3 notranslate docutils container"&gt;
&lt;div class="highlight docutils container"&gt;
&lt;div class="highlight-python3 notranslate docutils container"&gt;
&lt;div class="highlight docutils container"&gt;
&lt;pre class="literal-block"&gt;
python -m ensurepip --upgrade
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The&amp;nbsp;&lt;tt class="docutils literal"&gt;`ensurepip&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip"&gt;https://docs.python.org/3/library/ensurepip.html#module-ensurepip&lt;/a&gt;&amp;gt;`__&amp;nbsp;package provides support for bootstrapping the&amp;nbsp;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;&amp;nbsp;installer into an existing Python installation or virtual environment. This bootstrapping approach reflects the fact that&amp;nbsp;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; is an independent project with its own release cycle, and the latest available stable version is bundled with maintenance and feature releases of the CPython reference interpreter.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;ensurepip Python Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;You should follow best practice and&lt;/strong&gt; &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;create a virtual environment&lt;/a&gt; &lt;strong&gt;before installing libraries.&lt;/strong&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtualenv&lt;/a&gt;&lt;strong&gt;will help you out. To create with venv:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; venv add_env_name_here&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;After your environment is created, activate it with the first command below, then install a library on Ubuntu Linux:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cd add_env_path_here/bin &amp;amp; source activate&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, on Windows computers:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cd add_env_path_here\scripts &amp;amp; activate&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Know your OS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in installing pip on Linux, &lt;a class="reference external" href="https://www.tecmint.com/install-pip-in-linux/"&gt;try here&lt;/a&gt;. For Mac, &lt;a class="reference external" href="https://www.shellhacks.com/python-install-pip-mac-ubuntu-centos/"&gt;try here&lt;/a&gt;. Windows, Mac and Linux sometimes use different prefixes (e.g. python, py, python3) to run a python script. Which leads me to my next point...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting the prefix right can be tricky.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since this was written, I moved to Python 3.8. When I first moved from Python 2 to 3 on Windows, I somehow accidentally configured the following behavior: entering &lt;strong&gt;python some_program.py&lt;/strong&gt;&amp;nbsp;ran a .py file with Python 2. Whereas, entering &lt;strong&gt;py some_program.py&lt;/strong&gt;ran a .py file with Python 3.&lt;/p&gt;
&lt;p&gt;In the install command, the prefix is a reference to your Python executable. You may just need to alter your prefix to call it correctly. Here are some to try in place of &amp;quot;python&amp;quot;. Observe what happens when you run these command variations.Good luck!&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python3.11 &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pip3 install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-manually-enable-the-pip-installer"&gt;
&lt;h2&gt;How to Manually Enable the pip Installer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The rest of this post may be useful to you if you are:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Working on legacy Python 2 code or Python 3.3 or lower for which pip is not installed.&lt;/li&gt;
&lt;li&gt;Seeking to fix a faulty pip install that is not working properly.&lt;/li&gt;
&lt;li&gt;Curious to know how to manually set up pip.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Assumes Python is already&lt;/em&gt;&lt;a class="reference external" href="https://www.python.org/downloads/"&gt;installed&lt;/a&gt;&lt;em&gt;. If you're running Windows 10, I found it easy to install Python from the&lt;/em&gt;&lt;a class="reference external" href="https://www.microsoft.com/en-us/p/python-39/9p7qfqmjrfp7?activetab=pivot:overviewtab"&gt;Windows store&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download the&lt;/strong&gt;&lt;a class="reference external" href="https://bootstrap.pypa.io/get-pip.py"&gt;get-pip.py file&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to the link, right click the page and &amp;quot;Save As&amp;quot; a .py file to download. Then place the file where you want to access it. I placed mine in&amp;nbsp;C:Python27Libsite-packages&lt;/p&gt;
&lt;p&gt;You could also download the file with &lt;a class="reference external" href="https://curl.haxx.se/"&gt;curl&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;curl &lt;span class="pre"&gt;https://bootstrap.pypa.io/get-pip.py&lt;/span&gt; &lt;span class="pre"&gt;-o&lt;/span&gt; &lt;span class="pre"&gt;get-pip.pyt-pip.py&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;blockquote&gt;
If you are not sure where your site-packages folder is, type&lt;tt class="docutils literal"&gt;`python &lt;span class="pre"&gt;-m&lt;/span&gt; site&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory"&gt;https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory&lt;/a&gt;&amp;gt;`__into command prompt for file path ideas.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Run the get-pip.py file.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using command prompt's cd command with a Windows &amp;quot;&amp;amp;&amp;quot; operator to run the Python file in a Windows command prompt:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;cd &lt;span class="pre"&gt;c:\Python27\Lib\site-packages&lt;/span&gt; &amp;amp; python &lt;span class="pre"&gt;get-pip.py&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Or Linux terminal:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;cd &lt;span class="pre"&gt;/Python27/Lib/site-packages&lt;/span&gt; &amp;amp;&amp;amp; python &lt;span class="pre"&gt;get-pip.py&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;You should see some activity in command prompt that shows installation/updating of &amp;quot;setup&amp;quot; and &amp;quot;wheel&amp;quot;. When it finishes, you have installed pip.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type into command prompt at the same location:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install requests&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;This should install the Requests module into your Python libraries. Requests is an http module which is highly regarded almost universally by the Python community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading! Check out these other posts with pip installed library examples:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pythonmarketer.com/2022/01/30/fix-spelling-and-grammar-with-language_tool_python-and-textblob/"&gt;Fix Grammar and Spelling with language_tool_python and textblob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2018/08/25/gooey-gui-for-python-scripts/"&gt;gooey&lt;/a&gt; - GUI library&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2020/09/13/delete-all-your-tweets-with-tweepy-and-the-twitter-api/"&gt;tweepy&lt;/a&gt; - Twitter library&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pythonmarketer.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;A Guide to Making HTTP requests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2019/04/12/datasets-plotting-using-jupyter-pandas-and-matplotlib/"&gt;Plotting Datasets Using Jupyter, Pandas and Matplotlib&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming"></category><category term="command line"></category><category term="computers"></category><category term="matrix"></category><category term="neo"></category><category term="pip"></category><category term="python"></category><category term="python libraries"></category><category term="software"></category></entry></feed>