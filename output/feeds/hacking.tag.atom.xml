<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - hacking</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/hacking.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2024-10-17T16:42:00-05:00</updated><entry><title>How I Converted My Wordpress Blog to Pelican, A Checklist</title><link href="https://lofipython.com/how-i-converted-my-wordpress-blog-to-pelican.html" rel="alternate"></link><published>2024-10-17T16:42:00-05:00</published><updated>2024-10-17T16:42:00-05:00</updated><author><name>lofipython</name></author><id>tag:lofipython.com,2024-10-17:/how-i-converted-my-wordpress-blog-to-pelican.html</id><summary type="html">&lt;p&gt;Recently there has been a lot of noise online about the Wordpress website platform.
This blog is formerly a Wordpress blog, so I am in the unique position to share how
I moved this blog for anyone looking to get off Wordpress. I wrote an announcement post about
&lt;a class="reference external" href="https://lofipython.com/wordpress-to-pelican-blog-migration-complete"&gt;migrating my â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently there has been a lot of noise online about the Wordpress website platform.
This blog is formerly a Wordpress blog, so I am in the unique position to share how
I moved this blog for anyone looking to get off Wordpress. I wrote an announcement post about
&lt;a class="reference external" href="https://lofipython.com/wordpress-to-pelican-blog-migration-complete"&gt;migrating my wordpress blog in 2023&lt;/a&gt;.
This blog began as on the Wordpress free plan, then had few years as a paying customer of Automattic,
the corporate entity associated with Wordpress.org. The notes below are from my experience moving to a Python Pelican blog.&lt;/p&gt;
&lt;p&gt;Here is the checklist I wrote down when I made than transition:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Export posts to XML.&lt;/li&gt;
&lt;li&gt;Export all media.&lt;/li&gt;
&lt;li&gt;Convert posts to new blog format: Markdown or Restructured Text Edits.&lt;/li&gt;
&lt;li&gt;Set DNS redirect from old blog to new blog.&lt;/li&gt;
&lt;li&gt;Turn off search engine indexing for old blog.&lt;/li&gt;
&lt;li&gt;Update old blog with notice of new blog.&lt;/li&gt;
&lt;li&gt;Update urls from old domain to new domain.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class="docutils" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Export posts to XML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Go into the Wordpress settings and export posts. I selected XML format.&lt;/p&gt;
&lt;img alt="export blog from wordpress settings" src="https://lofipython.com/images/wordpress-export-tools.png" /&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Export all media.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wordpress allowed me to choose to export posts or media, so I exported all the images on my blog also.&lt;/p&gt;
&lt;img alt="export blog from content and media from  wordpress settings" src="https://lofipython.com/images/wordpress-export-tool-options.png" /&gt;
&lt;img alt="export blog from content and media from  wordpress settings" src="https://lofipython.com/images/wordpress-export-tool-options-details.png" /&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Convert posts to new blog format: Markdown or Restructured Text Edits.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pelican's import tool for wordpress converts your XML file to either .md or .rst files
based on which CLI argument you pass.&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Set DNS redirect from old blog to new blog.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I previously hosted my blog on a custom .com domain. When I stopped paying for the domain,
my domain reverted back to example.wordpress.com. However, you can pay a domain register a small
fee to forward traffic to your new domain. You can transfer old domain to services like Namecheap
or Cloudflare to set up a redirect. It's recommended to keep a redirect for at least 1 or 2 years
after moving to a new domain to catch any legacy backlinked traffic.&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Turn off search engine indexing for old blog.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One benefit of Wordpress from an SEO perspective is that they have search engine indexing control in the settings panel.
In the settings, you have the ability to tell search engines whether or not you should index your blog.
Once I got the hang of Pelican, I reviewed each converted post to fix links, grammar or
formatting errors from the conversion.&lt;/p&gt;
&lt;p&gt;I slowly moved them over in batches of 2 or 3 posts at a time. As I moved the posts to the new blog,
I set the old posts to private within the Wordpress CMS. I also changed their search engine indexing
settings to &amp;quot;Discourage search engines from indexing this site&amp;quot; and  &amp;quot;Prevent third-party sharing for example.wordpress.com&amp;quot;.
This allows people who might be searching for my old blog or following legacy links to have a chance
to track down the few posts available and hopefully find my new home on the web.&lt;/p&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Update old blog with notice of new blog.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Keep A Few Posts Exclusively on the Old Blog&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The benefit of Worpdress's free plan is that you can still keep some posts
and the original sub-domain live on their free plan. You can write your final post
on the old blog to let subscribers know you've moved.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update the Site Tagline on Your Old Blog&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I also set the old blog tagline, pointing readers to new blog:&lt;/p&gt;
&lt;p&gt;In Settings / General, you can edit the site tagline:&lt;/p&gt;
&lt;img alt="change blog headline in wordpress" src="https://lofipython.com/images/update-wordpress-site-tagline.png" /&gt;
&lt;img alt="blog moved announcement" src="https://lofipython.com/images/blog-headline-announcement.png" /&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;Update urls from old domain to new domain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's common practice to add a &amp;quot;CTA&amp;quot; or call to action at the end of a blog post. For me, that tends to be the related posts I've
written in the past. Any links that contain the old domain need to be swapped to the new one.&lt;/p&gt;
&lt;p&gt;For validating urls in my 100+ past posts, I also wrote a python script to help find broken links and .rst tags here:
&lt;a class="reference external" href="https://github.com/erickbytes/rst-url-validator"&gt;rst-url-validator Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install the Pelican, lxml, beautiful soup and feedparser Python libraries.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;pip install pelican
pip install BeautifulSoup4
pip install lxml
pip install feedparser&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Use the pelican-importer CLI to convert the XML to Markdown or reStructuredText&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I chose to use the default detting of the CLI to export to .rst. If you want to specify a folder to drop the contents,
use the -o argument. Use the -m argument to specify which output format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;Convert&lt;span class="w"&gt; &lt;/span&gt;CML&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;reStructuredText&lt;span class="w"&gt; &lt;/span&gt;Format&lt;span class="w"&gt; &lt;/span&gt;files.
&lt;span class="go"&gt;pelican-import --wpfile pymarketer.wordpress.2023-05-14.000.xml&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;Convert&lt;span class="w"&gt; &lt;/span&gt;XML&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;Markdown&lt;span class="w"&gt; &lt;/span&gt;files.
&lt;span class="go"&gt;pelican-import --wpfile pymarketer.wordpress.2023-05-14.000.xml -o ~/projects/example.com/content/blog -m MARKDOWN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/stable/importer.html"&gt;pelican-importer documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Moving From Wordpress Was Easy With Pelican&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I did thorough &lt;a class="reference external" href="a-brief-summary-of-promising-python-static-site-generatorsl"&gt;research into Python static site generators&lt;/a&gt;
before choosing Pelican. The benefits of Pelican include a
wordpress import CLI that makes it easy to quickly compile an an alternative MVP to move your blog from Wordpress.
Pelican is an obivous choice for static site generation in the Python ecosystem. After 17 months of using it,
I can safely say I'm happy with the decision!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tanis.codes/posts/deploy-hugo-website-to-cloudflare/?utm_source=pocket_shared"&gt;Deploy a Hugo website to Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://blog.okturtles.org/2024/10/convert-wordpress-to-static-site/"&gt;How to Convert a Wordpress blog to an Astro Static Site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/latest/"&gt;Pelican Documentation&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming, python, wordpress, blog"></category><category term="moving from Wordpress to Pelican"></category><category term="Wordpress migration checklist"></category><category term="hacking"></category></entry><entry><title>Making A YouTube Video Downloader With Python's Flask and pytube3 Libraries</title><link href="https://lofipython.com/making-a-youtube-video-downloader-with-pythons-flask-and-pytube3-libraries.html" rel="alternate"></link><published>2020-10-07T23:49:00-05:00</published><updated>2020-10-07T23:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-10-07:/making-a-youtube-video-downloader-with-pythons-flask-and-pytube3-libraries.html</id><summary type="html">&lt;p&gt;How do you download YouTube videos? The easiest answer is to google sites that have youtube downloader videos.
But then I thought, I wonder if I can make something?&lt;/p&gt;
&lt;p&gt;Boredom, my curiosity and some googling turned up the &lt;a class="reference external" href="https://github.com/get-pytube/pytube3"&gt;pytube3 library&lt;/a&gt;, &amp;quot;A lightweight, dependency-free Python 3 library (and command-line utility) for â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do you download YouTube videos? The easiest answer is to google sites that have youtube downloader videos.
But then I thought, I wonder if I can make something?&lt;/p&gt;
&lt;p&gt;Boredom, my curiosity and some googling turned up the &lt;a class="reference external" href="https://github.com/get-pytube/pytube3"&gt;pytube3 library&lt;/a&gt;, &amp;quot;A lightweight, dependency-free Python 3 library (and command-line utility) for downloading YouTube Videos.&amp;quot; Lo and behold, 3 hours of experimentation later, I made a video downloader with Python. ðŸ˜ƒ&lt;/p&gt;
&lt;p&gt;I used pytube3 with &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; and &lt;a class="reference external" href="https://www.pythonanywhere.com/"&gt;pythonanywhere&lt;/a&gt; to accomplish the task. I was pleasantly surprised at how it came together and simply worked! Here's how to make a primitive YouTube video downloader.&lt;/p&gt;
&lt;p&gt;Install the pytube library in the pythonanywhere bash console with &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3.8 install --user pytube3 --upgrade
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If you're not using pythonanywhere, install Flask (it's already included in pythonanywhere)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install flask
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;youtube_downloader&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Render HTML form to accept YouTube URL.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;Title&amp;gt;YouTube Downloader&amp;lt;/Title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Enter URL to download YouTube Vids!&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;div class=&amp;quot;form&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;form action=&amp;quot;/download_video&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;URL&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/download_video&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_video&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;First pytube downloads the file locally in pythonanywhere:&lt;/span&gt;
&lt;span class="sd"&gt;    /home/your_username/video_name.mp4&lt;/span&gt;

&lt;span class="sd"&gt;    Then use Flask&amp;#39;s send_file() to download the video&lt;/span&gt;
&lt;span class="sd"&gt;    to the user&amp;#39;s Downloads folder.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;youtube_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;download_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_attachment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed download&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Video download failed!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7185 figure"&gt;
&lt;img alt="download video" src="https://pythonmarketer.files.wordpress.com/2022/09/download.png?w=952" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Minimum Viable Prototype Achieved&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is more of a proof of concept than workable solution. It works for many videos I tried. It occasionally had trouble downloading certain videos. I tested it successfully on videos of up to 10 minutes. Maybe it works more consistently if the file size is smaller? Or there is a bug on certain types of videos? For me, some videos of only a few minutes failed, so your results may vary. The videos that failed returned errors like &lt;tt class="docutils literal"&gt;KeyError: 'cipher'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;KeyError: 'url'&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Honorable Mentions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ytdl-org/youtube-dl/blob/master/README.md#installation"&gt;youtube-dl&lt;/a&gt;: Command-line program to download videos from YouTube.com and other video sites&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/YouTubeDownload/YouTubeDownload"&gt;YoutubeDownload&lt;/a&gt;: GUI and CLI for downloading YouTube video/audio&lt;/p&gt;
</content><category term="coding, flask, programming, python, web development"></category><category term="curiosity"></category><category term="hacking"></category><category term="prototyping"></category><category term="videos"></category></entry></feed>