<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - hacking</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/hacking.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2024-02-16T12:33:00-06:00</updated><entry><title>Make Your Python Installs Faster With uv</title><link href="https://lofipython.com/make-your-python-installs-faster-with-uv.html" rel="alternate"></link><published>2024-02-16T12:33:00-06:00</published><updated>2024-02-16T12:33:00-06:00</updated><author><name>lofipython</name></author><id>tag:lofipython.com,2024-02-16:/make-your-python-installs-faster-with-uv.html</id><summary type="html">&lt;p&gt;For a several years, pip and &lt;a class="reference external" href="https://pypi.org/project/pip-tools/"&gt;pip-tools documentation&lt;/a&gt; have become distinguished in Python packaging
for their usability and ubiquity. Recently there has been some interesting new developments
in the realm of Python packaging tools. In a trend that started around 2022, there has been an
ongoing &amp;quot;Rustification&amp;quot; of Python tooling â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a several years, pip and &lt;a class="reference external" href="https://pypi.org/project/pip-tools/"&gt;pip-tools documentation&lt;/a&gt; have become distinguished in Python packaging
for their usability and ubiquity. Recently there has been some interesting new developments
in the realm of Python packaging tools. In a trend that started around 2022, there has been an
ongoing &amp;quot;Rustification&amp;quot; of Python tooling.&lt;/p&gt;
&lt;p&gt;First, rye was released in pursuit of a &amp;quot;cargo for Python&amp;quot;. Cargo is Rust's package manager. It seems to
have inspired Python developers to keep trying to improve on what we have with pip.&lt;/p&gt;
&lt;p&gt;While this was happening, in secret the creator of ruff was also working on yet another hybrid
Rust + Python package manager named uv. There's seemingly no end to this man's projects!
ruff quickly supplanted the incumbent Python linters to become a favorite among Python developers.
Could lightning strike twice for the creator of ruff? Seems he won't be a one-hit wonder when it
comes to developing hit Python packages.&lt;/p&gt;
&lt;blockquote&gt;
uv is 8-10x faster than pip and pip-tools without caching, and 80-115x faster
when running with a warm cache
- Charlie Marsh, Astral Blog, &lt;a class="reference external" href="https://astral.sh/blog/uv"&gt;https://astral.sh/blog/uv&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Improving Python packaging is an audacious and challenging task. Part of the problem
is that out of the box Python installs can be tough to reason about for new Python developers.
Not to mention the labor of explaining the purpose of virtual environments in Python coding via venv.
One perk of uv is that it includes virtual environments in its workflow.&lt;/p&gt;
&lt;p&gt;For more experienced developers, uv is a way you can make your code run much faster if you
need to install a Python package everytime it runs. For example, if you're running a Python script
on a Docker image, Python needs to install your packages everytime the image is run. In this case,
a modest 8x speedup might shave off a shocking amount of time it takes your code to execute. Now,
imagine an 80-115x speedup with caching. That's an incredible improvement we can now make with uv!&lt;/p&gt;
&lt;blockquote&gt;
uv is designed as a drop-in replacement for pip and pip-tools, and is
ready for production use today in projects built around those workflows.
- Charlie Marsh, Astral Blog, &lt;a class="reference external" href="https://astral.sh/blog/uv"&gt;https://astral.sh/blog/uv&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;This seems like an instance where two developers identified the same core problem
and are now combining their efforts. Sounds like a win for all Python developers. Armin Ronacher, the
creator of the Flask web framework and Charlie Marsch with the proven success of ruff are converging
to tackle one of Python's biggest pain points. It sounds like they could be merged into a python packaging
super tool at some point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Will Rye retired for uv?&lt;/strong&gt;
Not today, but the desire is that these tools eventually converge into one.
- Rye Grows with uv, Armin Ronacher, &lt;a class="reference external" href="https://lucumr.pocoo.org/2024/2/15/rye-grows-with-uv/"&gt;https://lucumr.pocoo.org/2024/2/15/rye-grows-with-uv/&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Per Armin's recent blog post, Rye is probably not the final solution. He thinks rye will get absorbed
into a more fleshed out project like uv. It sounds like Python packaging will continue evolving and improving,
a welcome sight for Pythonistas!&lt;/p&gt;
&lt;img alt="optimize python installs with uv" src="https://lofipython.com/images/uv-install-benchmarks.png" /&gt;
&lt;p&gt;&lt;strong&gt;Install uv and rye&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;pip install uv
pip install rye

&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;Alternative&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;uv&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;curl -LsSf https://astral.sh/uv/install.sh | sh
&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;Alternative&lt;span class="w"&gt; &lt;/span&gt;Install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rye&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;Linux&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;Mac&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="go"&gt;curl -sSf https://rye-up.com/get | bash&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Create a Virtual Environment With uv&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;uv venv  # Create a virtual environment at .venv.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Installing a New Module With uv&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;uv pip install requests&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;pip sync a requirements.txt file with uv&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;uv pip sync requirements.txt  # Install from a requirements.txt file.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Optional: Configure rye on Top of uv&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;rye config --set-bool behavior.use-uv=true&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Create new Python project With Rye&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;rye init my-project
rye pin 3.10
rye add black
rye sync
rye run black&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;uv and rye Documentation Links&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://astral.sh/blog/uv"&gt;uv: Python Packaging in Rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/astral-sh/uv"&gt;uv Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://lucumr.pocoo.org/2024/2/15/rye-grows-with-uv/"&gt;Rye Grows with uv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://rye-up.com/guide/basics/#working-with-the-project"&gt;Rye User Guide&lt;/a&gt;&lt;/p&gt;
&lt;img alt="optimizing code with uv tweet" src="https://lofipython.com/images/uv-tweet.png" /&gt;
</content><category term="coding, programming, python"></category><category term="api"></category><category term="making stuff with python"></category><category term="hacking"></category></entry><entry><title>Making A YouTube Video Downloader With Python's Flask and pytube3 Libraries</title><link href="https://lofipython.com/making-a-youtube-video-downloader-with-pythons-flask-and-pytube3-libraries.html" rel="alternate"></link><published>2020-10-07T23:49:00-05:00</published><updated>2020-10-07T23:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-10-07:/making-a-youtube-video-downloader-with-pythons-flask-and-pytube3-libraries.html</id><summary type="html">&lt;p&gt;How do you download YouTube videos? The easiest answer is to google sites like &lt;a class="reference external" href="https://y2mate.guru/en8/"&gt;y2mate&lt;/a&gt; that work for downloading videos. But then I thought, I wonder if I can make something?&lt;/p&gt;
&lt;p&gt;Boredom, my curiosity and some googling turned up the &lt;a class="reference external" href="https://github.com/get-pytube/pytube3"&gt;pytube3 library&lt;/a&gt;, &amp;quot;A lightweight, dependency-free Python 3 library (and command-line â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do you download YouTube videos? The easiest answer is to google sites like &lt;a class="reference external" href="https://y2mate.guru/en8/"&gt;y2mate&lt;/a&gt; that work for downloading videos. But then I thought, I wonder if I can make something?&lt;/p&gt;
&lt;p&gt;Boredom, my curiosity and some googling turned up the &lt;a class="reference external" href="https://github.com/get-pytube/pytube3"&gt;pytube3 library&lt;/a&gt;, &amp;quot;A lightweight, dependency-free Python 3 library (and command-line utility) for downloading YouTube Videos.&amp;quot; Lo and behold, 3 hours of experimentation later, I made a video downloader with Python. ðŸ˜ƒ&lt;/p&gt;
&lt;p&gt;I used pytube3 with &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; and &lt;a class="reference external" href="https://www.pythonanywhere.com/"&gt;pythonanywhere&lt;/a&gt; to accomplish the task. I was pleasantly surprised at how it came together and simply worked! Here's how to make a primitive YouTube video downloader.&lt;/p&gt;
&lt;p&gt;Install the pytube library in the pythonanywhere bash console with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3.8 install --user pytube3 --upgrade
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If you're not using pythonanywhere, install Flask (it's already included in pythonanywhere)&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pip install flask
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;youtube_downloader&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Render HTML form to accept YouTube URL.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;html_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;Title&amp;gt;YouTube Downloader&amp;lt;/Title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Enter URL to download YouTube Vids!&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;div class=&amp;quot;form&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;form action=&amp;quot;/download_video&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;URL&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                    &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_page&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/download_video&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_video&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;First pytube downloads the file locally in pythonanywhere:&lt;/span&gt;
&lt;span class="sd"&gt;    /home/your_username/video_name.mp4&lt;/span&gt;

&lt;span class="sd"&gt;    Then use Flask&amp;#39;s send_file() to download the video&lt;/span&gt;
&lt;span class="sd"&gt;    to the user&amp;#39;s Downloads folder.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;youtube_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;download_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_attachment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed download&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Video download failed!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="wp-image-7185 figure"&gt;
&lt;img alt="download video" src="https://pythonmarketer.files.wordpress.com/2022/09/download.png?w=952" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Minimum Viable Prototype Achieved&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is more of a proof of concept than workable solution. It works for many videos I tried. It occasionally had trouble downloading certain videos. I tested it successfully on videos of up to 10 minutes. Maybe it works more consistently if the file size is smaller? Or there is a bug on certain types of videos? For me, some videos of only a few minutes failed, so your results may vary. The videos that failed returned errors like &lt;tt class="docutils literal"&gt;KeyError: 'cipher'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;KeyError: 'url'&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Honorable Mentions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ytdl-org/youtube-dl/blob/master/README.md#installation"&gt;youtube-dl&lt;/a&gt;: Command-line program to download videos from YouTube.com and other video sites&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/YouTubeDownload/YouTubeDownload"&gt;YoutubeDownload&lt;/a&gt;: GUI and CLI for downloading YouTube video/audio&lt;/p&gt;
</content><category term="coding, flask, programming, python, web development"></category><category term="curiosity"></category><category term="hacking"></category><category term="prototyping"></category><category term="videos"></category></entry></feed>