<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-fi Python - coding, programming, web development</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/coding-programming-web-development.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2021-07-28T23:31:00-05:00</updated><entry><title>8 Promising Python Static Site Generators</title><link href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators.html" rel="alternate"></link><published>2021-07-28T23:31:00-05:00</published><updated>2021-07-28T23:31:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-07-28:/a-brief-summary-of-promising-python-static-site-generators.html</id><summary type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for this Wordpress blog. Or maybe I'll spin up a new one!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Why Statics?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most &amp;quot;modern&amp;quot; websites are &lt;em&gt;dynamic&lt;/em&gt; in the sense that the contents of the site live in a database, and are converted into presentation-ready HTML only when a user wants to see the page. That's great. However, it presents some minor issues that static site generators try to solve.&lt;/p&gt;
&lt;p&gt;In a static site, the whole site, every page, &lt;em&gt;everything&lt;/em&gt;, is created before the first user even sees it and uploaded to the server as a simple folder full of HTML files (and images, CSS, etc).&lt;/p&gt;
&lt;p&gt;The Nikola Handbook - &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;https://getnikola.com/handbook.html#why-static&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="static-site-generator-python-libraries"&gt;
&lt;h2&gt;Static Site Generator Python Libraries&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;listed in largest to smallest order by # of Github project stars&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Github - 11K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seems to be the front running static site generator in Python's ecosystem. It contains a convenient pelican-importer tool to import existing content from WordPress, Dotclear, or RSS feeds. Enjoying the modular nature of the &lt;a class="reference external" href="https://github.com/pelican-plugins"&gt;pelican-plugins&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lektor&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/lektor/lektor"&gt;Github - 3.5K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intriguing CMS project touting a &amp;quot;Python API&amp;quot;, &lt;a class="reference external" href="https://www.getlektor.com/plugins/"&gt;plugins for tools like Webpack&lt;/a&gt; and talented maintainers including the author of Flask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cactus&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/eudicots/Cactus"&gt;Github - 3.5K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Simple but powerful &lt;a class="reference external" href="http://mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html"&gt;static website generator&lt;/a&gt; using Python and the &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/templates/"&gt;Django template system&lt;/a&gt;... typical users would be designers that are tech-savvy, want to use templates, but don't like to mess with setting up django or S3.&amp;quot; (Mac OS) &lt;a class="reference external" href="https://vimeo.com/46999791"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nikola&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getnikola/nikola"&gt;Github - 2.2K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Viable option to host your site with the informative &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;Nikola Handbook&lt;/a&gt; walking you through each step. &lt;a class="reference external" href="https://plugins.getnikola.com/"&gt;Plugins&lt;/a&gt; for &lt;a class="reference external" href="https://plugins.getnikola.com/v7/notebook_shortcode/"&gt;Jupyter Notebooks&lt;/a&gt;, &lt;a class="reference external" href="https://getnikola.com/handbook.html#post-processing-filters"&gt;post processing filters&lt;/a&gt;, a &lt;a class="reference external" href="https://getnikola.com/handbook.html#importing-your-wordpress-site-into-nikola"&gt;Wordpress importer&lt;/a&gt; command line tool and about &lt;a class="reference external" href="https://themes.getnikola.com/"&gt;40 ready to go themes&lt;/a&gt; to find the perfect style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Makesite&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/sunainapai/makesite"&gt;Github - 1.6K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offers less configuration, using only a single makesite.py file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hyde&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/hyde/hyde"&gt;Github - 1.6K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Port from &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, a &lt;a class="reference external" href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; static site generator. It has since formed its own &amp;quot;evil twin&amp;quot; identity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mynt&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/Anomareh/mynt"&gt;Github - 400 stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Designed to give you all the features of a CMS with none of the often rigid implementations of those features.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Staticjinja&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/staticjinja/staticjinja"&gt;Github - 250 Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Minimalist Python library for building static websites with Jinja.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://PyLadies.com"&gt;PyLadies.com&lt;/a&gt;, &lt;a class="reference external" href="https://pyladies.com/"&gt;created with Mynt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FullStackPython.com, &lt;a class="reference external" href="https://github.com/mattmakai/fullstackpython.com"&gt;created with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GetLektor.com, &lt;a class="reference external" href="https://github.com/lektor/lektor-website"&gt;created with Lektor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gohugoio/hugo"&gt;Hugo&lt;/a&gt;, a Go static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website.html"&gt;How to Build a Low-tech&amp;nbsp;Website?&lt;/a&gt; (featuring Pelican)&lt;/li&gt;
&lt;li&gt;One convenient way to serve your static files up on the web is with a &lt;a class="reference external" href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/#:~:text=A%20content%20delivery%20network%20(CDN,stylesheets%2C%20images%2C%20and%20videos."&gt;CDN&lt;/a&gt; like &lt;a class="reference external" href="https://developers.cloudflare.com/pages/framework-guides/deploy-anything/"&gt;Cloudflare Pages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can research more projects on &lt;a class="reference external" href="https://jamstack.org/generators/"&gt;Jamstack&lt;/a&gt;, a site I found helpful for finding these libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;! I launched a Pelican blog about investing with Cloudflare pages. It's my first live static blog. Read more about it &lt;a class="reference external" href="https://pythonmarketer.com/2022/07/08/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, web development"></category><category term="creating your own blog"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>Starting to Almost Kinda Think About Creating a Web App</title><link href="https://lofipython.com/starting-to-almost-kinda-think-about-creating-a-web-app.html" rel="alternate"></link><published>2016-03-03T03:56:00-06:00</published><updated>2016-03-03T03:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-03-03:/starting-to-almost-kinda-think-about-creating-a-web-app.html</id><summary type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to&amp;nbsp;learn about&amp;nbsp;web frameworks. A web framework consists of software designed to aid in web development. They make it easier to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to&amp;nbsp;learn about&amp;nbsp;web frameworks. A web framework consists of software designed to aid in web development. They make it easier to create a website or web app - if you know how to use them. Unfortunately, there is a learning curve to using the frameworks but thankfully there is plenty o' documentation to go around to help you.&lt;/p&gt;
&lt;p&gt;Here are the two&amp;nbsp;&lt;a class="reference external" href="https://www.airpair.com/python/posts/django-flask-pyramid"&gt;Python Frameworks&lt;/a&gt; I've chosen to investigate (there are many out here on the webs):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django - widely used, great community support, comes with just about everything built in. Can be used for smaller apps or multi-page/app websites.&lt;/li&gt;
&lt;li&gt;Flask - a &amp;quot;microframework&amp;quot; used for smaller apps. Possibly more manageable for someone beginning a smaller project (me!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as a beginnerish-level coder, I've chosen to start with Flask; I also found &lt;a class="reference external" href="http://opentechschool.github.io/python-flask/"&gt;this sweet guide&lt;/a&gt; that I think will help. Maybe someday I will graduate to Django, it sounds like a great framework.&amp;nbsp;I've also decided that first I need to &lt;a class="reference external" href="https://www.coursera.org/specializations/web-design"&gt;brush up on my HTML&lt;/a&gt; - And according to a lot of what I've read it doesn't hurt to know CSS/Javascript. So this whole &amp;quot;build a web app&amp;quot; idea will continue, albeit with some hurdles to clear first.&lt;/p&gt;
&lt;p&gt;Edit: I ended up choosing web2py, which I hadn't even considered when I wrote this originally! Here's a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/22/choosing-a-web-development-path/"&gt;post about why I chose it&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, programming, web development"></category><category term="django"></category><category term="flask"></category><category term="python"></category><category term="web apps"></category></entry></feed>