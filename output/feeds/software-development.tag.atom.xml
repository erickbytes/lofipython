<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-fi Python - software development</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/software-development.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2019-12-05T03:06:00-06:00</updated><entry><title>A Collection of Software Testing Opinions for Python and Beyond</title><link href="https://lofipython.com/a-collection-of-software-testing-opinions-for-python-and-beyond.html" rel="alternate"></link><published>2019-12-05T03:06:00-06:00</published><updated>2019-12-05T03:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-12-05:/a-collection-of-software-testing-opinions-for-python-and-beyond.html</id><summary type="html">&lt;div class="section" id="i-am-a-beginner-to-testing-my-code-i-wanted-to-write-about-testing-to-better-understand-it-while-shaping-this-link-fest-masquerading-as-an-essay-i-collected-great-ideas-from-people-who-are-way-more-experienced-than-me-you-ll-find-a-few-of-my-thoughts-a-pytest-example-i-use-to-monitor-files-ideas-for-unit-testing-property-testing-test-driven-development-and-many-other-commonly-used-software-tests"&gt;
&lt;h2&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="i-am-a-beginner-to-testing-my-code-i-wanted-to-write-about-testing-to-better-understand-it-while-shaping-this-link-fest-masquerading-as-an-essay-i-collected-great-ideas-from-people-who-are-way-more-experienced-than-me-you-ll-find-a-few-of-my-thoughts-a-pytest-example-i-use-to-monitor-files-ideas-for-unit-testing-property-testing-test-driven-development-and-many-other-commonly-used-software-tests"&gt;
&lt;h2&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example I use to monitor files, ideas for unit testing, property testing, test driven development and many other commonly used software tests.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;An Introductory Rant on Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over several years as a programmer, I've slowly grasped the landscape of testing in software development. After moving beyond my first few tutorials and projects, it seemed very noisy to sort out. Examples provided are usually simple assertions that seem tough to relate to a real use case. It might be easy test the wrong things. Plus, some don't do it at all! The quality of the tests is more important than the quantity. But what makes a quality test? Where's the balance between testing every minute detail of a program and not at all?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yeah. And the worst thing that happens is that you get people that just stop&amp;nbsp;&lt;em&gt;thinking&lt;/em&gt;&amp;nbsp;about what they’re doing. “This is the principle, to always write unit tests, so I’m always going to write unit tests,” and then they’re just not thinking about how they’re spending their time, and they wind up wasting a lot of it.&lt;/p&gt;
&lt;p&gt;Joel Spolsky, &lt;a class="reference external" href="https://www.joelonsoftware.com/2009/01/"&gt;Stack Overflow Podcast #38&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementing software tests is a best practice for maintaining code, but seems ambiguous to someone who has not tested any code before. I guess the best way is to &lt;a class="reference external" href="https://github.com/iodide-project/pyodide/tree/master/test"&gt;read open source projects with test suites&lt;/a&gt;, but those can be tough to find. How do you know &lt;a class="reference external" href="https://docs.python-guide.org/writing/reading/"&gt;a good test suite&lt;/a&gt; when you see it? Maybe the maintainers went rogue and off the deep end with tests. Online, everybody says you should test your code, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Emperor%27s_New_Clothes"&gt;is the emperor wearing any clothes?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a beginner stumbling across articles on testing, these questions were tough to answer. As with most things in programming, figuring out the right question to ask is a challenge in itself. &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python-3"&gt;Codeacademy&lt;/a&gt; and &lt;a class="reference external" href="https://www.coursera.org/specializations/python"&gt;Coursera&lt;/a&gt; never mentioned anything about writing tests. On the other hand, &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django&lt;/a&gt; includes testing in its tutorial and documentation. Also, most languages come with built-in testing tools. Python has the &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why test at all? First, some solid benefits of software testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;With tests on your code in place, you can implement changes and have confidence the code still works if the tests pass. This gives developers more confidence to iterate and improve an application.&lt;/li&gt;
&lt;li&gt;Detect problems faster. Passing tests are a good indicator that your programs are actually doing what they're supposed to do. If they don't pass, you likely found a bug you might have missed otherwise.&lt;/li&gt;
&lt;li&gt;When you find a bug, you either need to amend your code, or your tests. write a test for that bug and then fix it. Either that, or you need to be amend your tests. You've just improved the quality of your test suite.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://daedtech.com/dont-learn-to-code-learn-to-automate/"&gt;Automation&lt;/a&gt;. If you are writing tests, those tests can be automated. If you are manually checking the results of your program, you're missing a chance to automate those checks away. I haven't applied it yet, but have heard the &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;Tox library&lt;/a&gt; may be useful to automate tests related to Python packaging. For more on automating tests, see this PyCon talk, &lt;a class="reference external" href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;Three Excellent Python Tools to Automate Repetitive Tasks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test Driven Development can decrease the time spent debugging code. This claim sometimes lacks empirical evidence, supporting evidence tends to be anecdotal.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;A good unit test, therefore, is one that helps enforce the contract to which the function is committed.&lt;/p&gt;
&lt;p&gt;If a good unit test breaks, the contract is violated and should be either explicitly amended (by changing the documentation and tests), or fixed (by fixing the code and leaving the tests as is).&lt;/p&gt;
&lt;p&gt;A good unit test is also&amp;nbsp;&lt;em&gt;strict&lt;/em&gt;. It does its best to ensure the output is valid. This helps it catch more bugs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Moshe Zadka, &lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pytest and Unit Testing in Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is where the Python hits the pavement. Unit tests are generally liked, although some prefer property tests or integration tests because they think the scope of unit tests is too narrow. The &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library is Python's default testing framework. However nowadays, &lt;a class="reference external" href="https://docs.pytest.org/en/latest/contents.html"&gt;pytest&lt;/a&gt; seems to be the preferred unit testing framework for Python. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; is another popular framework I've read about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pytest Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://realpython.com/interview-brian-okken/"&gt;Interview with the author of Pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;Pytest Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/7"&gt;Pytest Features That You Need In Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://love-python.blogspot.com/2017/10/table-driven-unit-test-in-python.html"&gt;Table Driven Unit Testing With pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Pf1ADyUKOrE"&gt;Reproducible Data Analysis in Jupyter, Part 6/10: Unit Testing with PyTest&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Tests start to lose signal when &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;Mock&lt;/a&gt; becomes routine instead of a reluctant workaround. - Brandon Rhodes, &lt;a class="reference external" href="http://S0No2zSJmks"&gt;When Python Practices Go Wrong&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing in Python \ General Unit Testing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Testing"&gt;Testing Conventions for the Pandas Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kanoki.org/2019/11/18/how-to-create-dataframe-for-testing/"&gt;How to Create a Dataframe for Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing//"&gt;Improve Your Python: Understanding Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kbroman.org/blog/2015/12/07/write-unit-tests/"&gt;Write Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2013/12/08/tdd-unit-tests-and-the-passage-of-time/"&gt;Writing Unit Tests for Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2014/02/19/5-unit-testing-mistakes/"&gt;5 Unit Testing Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/unit-tests-are-not-tests/"&gt;Unit Tests Are Not Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hakibenita.com/the-best-new-feature-in-unittest-you-didnt-know-you-need"&gt;The Best New Feature in unittest You Didn't Know You Need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html"&gt;The Flawed Theory Behind Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django Introduction to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/python-doctests/"&gt;Python Doc Tests&lt;/a&gt; Turn docstrings into tests, unique to Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;I think&amp;nbsp;&lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;hypothesis&lt;/a&gt;&amp;nbsp;is probably underrated—some libraries are hesitant to incorporate it into their testing frameworks, but I think the property-based testing has real potential to catch scenarios humans would have a hard time anticipating, or at least that would take a long time to properly plan for. I find that hypothesis almost always adds a few useful test cases I hadn’t thought of that will require special error handling, for example.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2020/01/13/pydev-of-the-week-tyler-reddy/"&gt;Tyler Reddy&lt;/a&gt;, SciPy Release Manager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Integration \ Property Tests&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.juliobiason.me/books/things-i-learnt/integration-tests/"&gt;Unit Tests Are Good, Integration Tests Are Gooder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/pbt-contracts/"&gt;PROPERTY TESTS + CONTRACTS = INTEGRATION TESTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contract-examples/"&gt;Finding Property Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contracts/"&gt;Contracts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditional, or example-based, testing specifies the behavior of your software by writing examples of it—each test sets up a single concrete scenario and asserts how the software should behave in that scenario. Property-based tests take these concrete scenarios and generalize them by focusing on which features of the scenario are essential and which are allowed to vary. This results in cleaner tests that better specify the software’s behavior—and that better uncover bugs missed by traditional&amp;nbsp;testing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;David Maciver, &lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assertions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assertions are generally accepted as welcome additions to your code.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.regehr.org/archives/1091"&gt;Use of Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.squarefree.com/2014/02/03/fuzzers-love-assertions/"&gt;Fuzzers Love Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/assert.html#assert"&gt;pytest Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, the safety and restraints that these code carabiners provide actually give you &lt;strong&gt;more freedom&lt;/strong&gt; to take risks in your coding. If you want to try out some risky feature, refactoring, or external library, you know something is wrong as soon as one of your assertions or tests fail and can undo back to an earlier working state.&lt;/p&gt;
&lt;p&gt;Phillip J. Guo, &lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eventually, you'll discover the evangelists preaching Test Driven Development. There are certain discussions which polarize us in the software development world, such as the appropriate scenarios to deploy this system of development.&lt;/p&gt;
&lt;p&gt;Opinions vary widely on the merits and appropriate application of TDD. I'm admittedly skeptical but do see the merits of TDD. But which flavor? Where do unit tests and integration tests fit in? How many tests should I write? What exactly should I be testing? &lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;This essay&lt;/a&gt; claims anyone pair programming software with an expected life of 3 or more years should use Test Driven Development.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2019/09/29/when-tdd-is-not-a-good-fit/"&gt;When TDD is Not a Good Fit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neverworkintheory.org/2016/10/05/test-driven-development.html"&gt;Test Driven Development vs. Test Last Development&lt;/a&gt; [Study]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=DQBf6li1hww"&gt;Why TDD Is Crap&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/why-tdd-isnt-crap/"&gt;Why TDD Isn't Crap&lt;/a&gt; [Response Blog to Video]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.arp242.net/testing.html"&gt;Testing Isn't Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;Is Pair Programming + TDD worth it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Test Driven Development is a tool for continuously evaluating hypotheses.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?time_continue=170&amp;amp;v=UOOuW5tqT8M&amp;amp;feature=emb_logo"&gt;James Shore, Assert(JS) Con 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;General Testing Ideas and Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python-guide.org/writing/tests/"&gt;Testing Your Code&lt;/a&gt;, The Hitchhiker's Guide to Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.liw.fi/posts/2019/06/29/dijkstra_was_only_partially_correct_about_testing/"&gt;The Point of Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://rachelbythebay.com/w/2013/01/30/test/"&gt;Connecting Bug Fixing to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.jamesshore.com/In-the-News/Thinking-In-Tests.html"&gt;Thinking in Tests&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.drmaciver.com/2015/04/some-empirically-derived-testing-principles/"&gt;Some empirically derived testing principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://danluu.com/tests-v-reason/"&gt;Testing Vs. Informal Reasoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.nelhage.com/2016/12/how-i-test/"&gt;How I Write Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Xu5EhKVZdV8"&gt;Stop Mocking, Start Testing&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;a class="reference external" href="https://python-guide-es.readthedocs.io/es/latest/writing/reading.html"&gt;Each one of these projects is a paragon of Python coding.&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/development/what-its-like-to-be-a-developer-at/"&gt;What it's Like to Be a Developer at...&lt;/a&gt;&amp;nbsp;[Testing Practices Described]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;Hammock Driven Development&lt;/a&gt; [YouTube] Not so much testing focused, but including because I really enjoyed this talk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other common tests types:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unit test: when it fails, it tells you what piece of your code needs to be fixed.&lt;/p&gt;
&lt;p&gt;Integration test: when it fails, it tells you that the pieces of your application are not working together as expected.&lt;/p&gt;
&lt;p&gt;Acceptance test: when it fails, it tells you that the application is not doing what the customer expects it to do.&lt;/p&gt;
&lt;p&gt;Regression test: when it fails, it tells you that the application no longer behaves the way it used to.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/7672511/unit-test-integration-test-regression-test-acceptance-test"&gt;Mathias, Stack Overflow Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing maturity level progression:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No tests&lt;/li&gt;
&lt;li&gt;Occasional, slow, unreliable tests&lt;/li&gt;
&lt;li&gt;Semi-comprehensive integration tests&lt;/li&gt;
&lt;li&gt;Fast, comprehensive unit tests comprise the bulk of testing&lt;ul&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Composable subsystem design&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Real-time test feedback (ideally integrated into the editor)&lt;/li&gt;
&lt;li&gt;Tests are extremely reliable or&amp;nbsp;&lt;a class="reference external" href="http://andyfriesen.com/2015/06/17/testable-io-in-haskell.html"&gt;guaranteed reliable by the type system&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;With tooling that tracks the reliability of tests and provides that feedback to authors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fuzzing, statistically automated microbenchmarking, rich testing frameworks for every language and every platform, and a company culture of writing the appropriate number of unit tests and high-value integration tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chadaustin.me/2019/11/two-years-at-dropbox/"&gt;ChadAustin.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I recently wrote my first unit tests with pytest. Below is a script named test_file_date.py. It tests if the day of month of the most recently changed file in a directory matches today's day. To install pytest, enter into command prompt or terminal:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pytest&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_file_date.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import glob
import os
from datetime import datetime, date

# The dir_query format is for a Windows path with Unix style pattern matching.
def test_csv_date_equals_today():
    dir_query = 'C:\\Users\\your_username\\Desktop\\*.csv' # specify csv extension and folder
    file_path = sorted(glob.iglob(dir_query), key=os.path.getmtime)[-1] # get most recent file
    file_timestamp = os.path.getmtime(file_path)
    file_date = datetime.fromtimestamp(file_timestamp)
    print(file_date.day)
    print(date.today().day)
    assert file_date.day == date.today().day
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Run the test with pytest by entering:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;pytest test_file_date.py&lt;/tt&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;I write programs for personal productivity and to &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;automate processes&lt;/a&gt; at my company. The scope of problems my code solves has grown with my programming ability. I'm now reaching the point where I can apply tests to my advantage. However, sometimes I'll write a quick-hitter script for which I can't justify writing tests. Beyond those cases, testing can help if you pick the right style for your project. More so for recurring, automated processes.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It feels pretty cool when your tests run and you know with more certainty whether a part of your program is getting the job done or not. After setting up my first test with pytest, I have leveled up to novice tester, instead of blissfully not knowing what I don't know about testing. That's a step in the right direction.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, productivity, programming, python, software testing"></category><category term="pytest"></category><category term="software development"></category><category term="test driven development"></category></entry><entry><title>Gooey GUI for Python Scripts</title><link href="https://lofipython.com/gooey-gui-for-python-scripts.html" rel="alternate"></link><published>2018-08-25T16:32:00-05:00</published><updated>2018-08-25T16:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-08-25:/gooey-gui-for-python-scripts.html</id><summary type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of are Tkinter (comes in the standard library), wxPython, PyQT, easygui, &lt;a class="reference external" href="https://github.com/hoffstadt/DearPyGui"&gt;DearPyGui&lt;/a&gt; and PySimpleGUI. I &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/29/tkinter-and-python-libraries/"&gt;explored Tkinter&lt;/a&gt; back when I first got into Python. It was more intricate and offered more control over the look of your app, and took longer to pick up. Gooey is more of a pre-packaged GUI library.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/chriskiehl/Gooey"&gt;Gooey Github page&lt;/a&gt; was most useful to me and helped me to do what I needed. The script posted &lt;a class="reference external" href="http://pbpython.com/pandas-gui.html"&gt;in this blog&lt;/a&gt; helped as well. I needed to enable a human to supply three files and enter a number. Gooey was a good match for this. The library has two branches:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;some basic widgets piggyback off the &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2015/10/08/a-intro-to-argparse/"&gt;argparse&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;another part of the library uses a function called the GooeyParser. The GooeyParser offers more advanced widgets, like a file chooser. This was exactly what I was looking to use to pull in files for my script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Installing Gooey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Argparse comes stock with Python. You can install Gooey via the &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip installer&lt;/a&gt;. Open command prompt or terminal and enter:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install Gooey&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Below is a basic argparse/Gooey combination script. The argparse version offers a handful of widgets such as checkboxes and dropdown, but I had trouble getting them to work with the GooeyParser (used in 2nd script).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from argparse import ArgumentParser
from gooey import Gooey

&amp;#64;Gooey(program_name='Email Campaign Reporting Generator', default_size=(575, 600))
def get_args():
    &amp;quot;&amp;quot;&amp;quot;Demonstrating python's vars built-in to store arguments in a python dict.&amp;quot;&amp;quot;&amp;quot;
    parser = ArgumentParser(description='A simple argument parser', epilog='This is where you might put example usage')
    parser.add_argument('Name', action='store', required=True, help='Help text for option X')
    parser.add_argument('Email', help='Help text for option Y', default=False)
    parser.add_argument('Campaign Number', help='Help text for option Z', type=int)
    parser.add_argument('Campaign Segment', choices=['A', 'B','All'], default='a', nargs='?')
    user_inputs = vars(parser.parse_args())
    print(user_inputs)
    name = user_inputs['Name']
    campaign_number = user_inputs['Campaign Number']
    return parser.parse_args()

if __name__ == '__main__':
    get_args()
&lt;/pre&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Side note: Check out Python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#vars"&gt;vars() built-in&lt;/a&gt; function above. It returns the input data as a dictionary called user_inputs. Then we can get the values via the dictionary's keys. Pretty nifty!&lt;/blockquote&gt;
&lt;p&gt;The &amp;#64;Gooey() part of the code is an advanced function known as a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0318/"&gt;decorator in Python&lt;/a&gt;. Put simply, decorators are functions that modify the function to which they are attached.&lt;/p&gt;
&lt;p&gt;Below is my script that uses the more advanced GooeyParser for its &amp;quot;FileChooser&amp;quot; widget. Gooey allows you to group widgets together and set how many widgets per line with the gooey_options={} parameter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from gooey import Gooey, GooeyParser

&amp;#64;Gooey(program_name='Email Campaign Reporting Generator', default_size=(575, 600))
def get_args():
    &amp;quot;&amp;quot;&amp;quot;
    Adding two argument groups, each accepting two arguments.
    Using gooey_options to set layout.
    &amp;quot;&amp;quot;&amp;quot;
    parser = GooeyParser(description='Export campaign report spreadsheets and upload below.')
    top_group = parser.add_argument_group(gooey_options={'show_border': False,'columns': 1})
    top_group.add_argument('Contact List', help='Upload Send List (.xlsx)', widget='FileChooser')
    top_group.add_argument('Opens List', help='Upload Opens List (.xlsx)', widget='FileChooser')
    top_group.add_argument('Unsubscribe List', help='Upload Unsubscribe List (.xlsx)', widget='FileChooser')
    bottom_group = parser.add_argument_group(gooey_options={'show_border': False,'columns': 1, 'required':False})
    bottom_group.add_argument('Campaign ID', action='store', help=&amp;quot;Number found in the Campaign 'Reports' tab&amp;quot;)
    bottom_group.add_argument('Campaign Segment', action='store', help='Enter A, B, or All. All lists supplied must match segment.')
    user_inputs = vars(parser.parse_args())
    name = user_inputs['Name']
    return parser.parse_args()

if __name__ == '__main__':
    get_args()
&lt;/pre&gt;
&lt;p&gt;Overall, Gooey knows what it wants to be, an easy to use GUI framework for Python. It does it well. Here's a screenshot of my program's shiny GUI:&lt;/p&gt;
&lt;img alt="gooey_gui_shot_2" class="alignnone size-full wp-image-1431" src="https://pythonmarketer.files.wordpress.com/2018/08/gooey_gui_shot_2.png" style="width: 578px; height: 603px;" /&gt;
&lt;p&gt;Now that I have a GUI on top of my program and it delivers the expected output file, I'm hoping to take it one step further by packaging it up as a Windows .exe file. This would allow it to run as a desktop app on any Windows computer without the need to install Python or library dependencies. I've only begun exploring options to do this but a few libraries I've heard of are pyinstaller, cx_Freeze and Py2Exe. Updates coming if I figure it out. Cheers :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I did figure out how to compile my Gooey app to a Windows application with Pyinstaller. You can&amp;nbsp;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/20/packaging-python-as-a-windows-app/"&gt;read more on how I did it here&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, data, product development, programming, software"></category><category term="gooey"></category><category term="gui"></category><category term="python"></category><category term="software development"></category></entry></feed>