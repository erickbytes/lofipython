<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - python</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/python.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2022-07-08T01:20:00-05:00</updated><entry><title>Launching a Live Static Site Blog via Pelican, Github and Cloudflare Pages</title><link href="https://lofipython.com/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages.html" rel="alternate"></link><published>2022-07-08T01:20:00-05:00</published><updated>2022-07-08T01:20:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-07-08:/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages.html</id><summary type="html">&lt;p&gt;Proud to announce my newest side project blog, Diversified Bullish, is live at &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;. It is made with &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html#"&gt;Pelican&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin/tree/311a5208c030ea62d85bbca952e31b6775a50c2c"&gt;Blue Penguin theme&lt;/a&gt;. I'm planning to write about stocks and investing there moving forward in addition to this blog which focuses on Python programming.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/erickbytes/divbull/tree/main/divbull.com"&gt;divbull.com Github …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Proud to announce my newest side project blog, Diversified Bullish, is live at &lt;a class="reference external" href="http://divbull.com"&gt;divbull.com&lt;/a&gt;. It is made with &lt;a class="reference external" href="https://docs.getpelican.com/en/latest/quickstart.html#"&gt;Pelican&lt;/a&gt; and the &lt;a class="reference external" href="https://github.com/jody-frankowski/blue-penguin/tree/311a5208c030ea62d85bbca952e31b6775a50c2c"&gt;Blue Penguin theme&lt;/a&gt;. I'm planning to write about stocks and investing there moving forward in addition to this blog which focuses on Python programming.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/erickbytes/divbull/tree/main/divbull.com"&gt;divbull.com Github repo&lt;/a&gt; serves the static files generated by Pelican via &lt;a class="reference external" href="https://pages.cloudflare.com/"&gt;Cloudflare pages&lt;/a&gt;. It's free, unless you purchase a domain. I purchased my .com domain with &lt;a class="reference external" href="https://www.namecheap.com/support/knowledgebase/article.aspx/9607/2210/how-to-set-up-dns-records-for-your-domain-in-cloudflare-account/"&gt;Namecheap&lt;/a&gt; before I learned about Cloudflare pages. I followed &lt;a class="reference external" href="https://developers.cloudflare.com/pages/get-started/"&gt;these instructions&lt;/a&gt; to set up my new financial blog. If you're interested, you can subscribe to an &lt;a class="reference external" href="https://divbull.com/feeds/all.atom.xml"&gt;RSS feed here&lt;/a&gt; to follow when I post something new.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The dashboard provides a number of framework-specific presets. These presets provide the default build command and build output directory values for the selected framework. If you are unsure what the correct values are for this section, refer to &lt;a class="reference external" href="https://developers.cloudflare.com/pages/platform/build-configuration/"&gt;Build configuration&lt;/a&gt;. &lt;strong&gt;If you do not need a build step, leave the Build command field blank.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.cloudflare.com/pages/get-started/"&gt;https://developers.cloudflare.com/pages/get-started/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="wp-image-7113 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/07/cloudflare-deployment-details-1.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;Working in the Cloudflare pages build dashboard is sweet. It took me about 5 failed Pelican &lt;a class="reference external" href="https://developers.cloudflare.com/pages/platform/build-configuration/"&gt;build commands&lt;/a&gt; to get the site to deploy. Finally, I was able to get the site build to complete by leaving the build command blank. Cloudflare was able to scoop up my Pelican &amp;quot;output&amp;quot; folder contents and render the blog. How cool. I feel like I've done the impossible, launching a passable quality blog with top shelf tools this quickly for under $10!&lt;/p&gt;
&lt;p&gt;Initially, I spent a few hours getting to know Pelican. Once I correctly installed a theme I liked, I banged out a few philosophical financial musings to give the blog some posts. Then I had the static files generated but no clue how to serve them. Enter Cloudflare pages, a free option to host a blog.&lt;/p&gt;
&lt;p&gt;Connecting the repo to Cloudflare pages, adding the files to the repo and finding the correct build command added a few more hours. In total, it took me about 1-2 days to make a live site since I did not know about Pelican or Cloudflare pages when I began playing with a Pelican blog in April. This was my first static site launch!&lt;/p&gt;
&lt;div class="wp-image-7115 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/07/cloudflare-build-settings.png?w=528" /&gt;
&lt;p class="caption"&gt;Generating a Blue Penguin themed Pelican blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="wp-image-7086 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2022/07/pelican-blog-dev.png?w=1024" /&gt;
&lt;p class="caption"&gt;Head over to &lt;a class="reference external" href="https://divbull.com"&gt;divbull.com&lt;/a&gt; to see this Pelican, Github and Cloudflare pages stack in action.&lt;/p&gt;
&lt;div class="legend"&gt;
Like static site generators? Check out &lt;a class="reference external" href="https://pythonmarketer.com/2021/07/28/a-brief-summary-of-promising-python-static-site-generators/"&gt;this post about static site generator libraries in Python&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
</content><category term="internet, investing, personal finance, programming, writing"></category><category term="blog"></category><category term="cloudflare pages"></category><category term="pelican"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>An Ode to Code</title><link href="https://lofipython.com/an-ode-to-code.html" rel="alternate"></link><published>2022-05-09T21:13:00-05:00</published><updated>2022-05-09T21:13:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-05-09:/an-ode-to-code.html</id><summary type="html">&lt;p&gt;Making time to code can be done every day. Carve out those little moments where you can automate tedious tasks or study up on that &lt;a class="reference external" href="https://github.com/tqdm/tqdm"&gt;hot new Python library&lt;/a&gt; that takes your quality to another level.&lt;/p&gt;
&lt;p&gt;Take time to reorganize and refactor in &lt;a class="reference external" href="https://atom.io/"&gt;your favorite text editor&lt;/a&gt;. Break your script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Making time to code can be done every day. Carve out those little moments where you can automate tedious tasks or study up on that &lt;a class="reference external" href="https://github.com/tqdm/tqdm"&gt;hot new Python library&lt;/a&gt; that takes your quality to another level.&lt;/p&gt;
&lt;p&gt;Take time to reorganize and refactor in &lt;a class="reference external" href="https://atom.io/"&gt;your favorite text editor&lt;/a&gt;. Break your script, then break it again. Break it until it works. Absorb your new abilities as a machine literate human and build skills on top of skills. Make a breakthrough. The code is great. It makes sense. Another tweak here, another tweak there. Run &lt;a class="reference external" href="https://github.com/psf/black"&gt;black&lt;/a&gt; on it and then have a go at &lt;a class="reference external" href="https://peps.python.org/pep-0008/"&gt;PEP-8&lt;/a&gt; to brush up on your style. More tweaks, and need to add some &lt;a class="reference external" href="https://peps.python.org/pep-0257/"&gt;docstrings&lt;/a&gt; for more clarity.&lt;/p&gt;
&lt;p&gt;Another one bites the dust. Who knows where your skills could grow. Following the code is a delightful road. Some days it's hard. Some days it's easy. But it's fulfilling if you treat it like a locksmith does keys. Knowledge is flowing. The craft is built in each moment. Challenges overcome. Battles won. New innovations to munge.&lt;/p&gt;
&lt;p&gt;Code is the medium to communicate with machines and leverage their efficiency for convenient means. Tighter the web we weave with transistors and screens, the more we'll need dignified intermediaries of man and machine. Here's to the good code and the bad code we all will write. May we never let something stop our logical flights to code a better dream.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="growth"></category><category term="python"></category></entry><entry><title>Fix Spelling and Grammar with language_tool_python and textblob</title><link href="https://lofipython.com/fix-spelling-and-grammar-with-language_tool_python-and-textblob.html" rel="alternate"></link><published>2022-01-30T16:28:00-06:00</published><updated>2022-01-30T16:28:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-30:/fix-spelling-and-grammar-with-language_tool_python-and-textblob.html</id><summary type="html">&lt;p&gt;Below are two practical Python libraries for text processing. This function uses &lt;a class="reference external" href="https://textblob.readthedocs.io/en/dev/api_reference.html?highlight=correct#textblob.blob.TextBlob.correct"&gt;textblob's spelling correction&lt;/a&gt; along with &lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python&lt;/a&gt;, which applies grammatical corrections via the &lt;a class="reference external" href="https://languagetool.org/http-api/swagger-ui/#!/default/post_check"&gt;Language Tool API&lt;/a&gt;. I added these text processing transformations into my &lt;a class="reference external" href="https://www.positivipy.com/"&gt;concept text generation app&lt;/a&gt;. These are free, public APIs up to around 20 requests per …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Below are two practical Python libraries for text processing. This function uses &lt;a class="reference external" href="https://textblob.readthedocs.io/en/dev/api_reference.html?highlight=correct#textblob.blob.TextBlob.correct"&gt;textblob's spelling correction&lt;/a&gt; along with &lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python&lt;/a&gt;, which applies grammatical corrections via the &lt;a class="reference external" href="https://languagetool.org/http-api/swagger-ui/#!/default/post_check"&gt;Language Tool API&lt;/a&gt;. I added these text processing transformations into my &lt;a class="reference external" href="https://www.positivipy.com/"&gt;concept text generation app&lt;/a&gt;. These are free, public APIs up to around 20 requests per second. You can send both text and receive back an improved version of your text, ideally altering and improving your writing.&lt;/p&gt;
&lt;p&gt;I found 2 errors when I piped the text of this post into the below code: the proper noun &amp;quot;textblob&amp;quot; corrected to &amp;quot;text blow's&amp;quot; and the word &amp;quot;app&amp;quot; corrected to &amp;quot;pp&amp;quot;. Be sure to proof your results. Regardless, I like having these two Python tools in my bag!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://textblob.readthedocs.io/en/dev/install.html"&gt;Install textblob&lt;/a&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;a class="reference external" href="https://pypi.org/project/language-tool-python/"&gt;language_tool_python&lt;/a&gt;&lt;strong&gt;with these&lt;/strong&gt;&lt;a class="reference external" href="https://pythonmarketer.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;&lt;strong&gt;commands:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tool&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;textblob&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;textblob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download_corpora&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;language_tool_python&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textblob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_spelling_and_grammar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; returns str: text transformed by language tool and text blob
    1) Apply language tool API correction
    Language Tool Public API: https://dev.languagetool.org/public-http-api
    https://languagetool.org/http-api/swagger-ui/#!/default/post_check
    python library: https://pypi.org/project/language-tool-python/

    2) Apply textblob's spell check to the text&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="c1"&gt;# use the public API, language English&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;language_tool_python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LanguageToolPublicAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'en-US'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;tool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Language is incredble. Fascinatng how hoomans have so many.&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;transformed_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fix_spelling_and_grammar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformed_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; Language is incredible. Fascinating how humans have so many.&lt;/span&gt;
&lt;/pre&gt;
</content><category term="APIs, data, programming, writing"></category><category term="language"></category><category term="language tool"></category><category term="python"></category><category term="text"></category><category term="textblob"></category></entry><entry><title>Experiencing Flow While Coding</title><link href="https://lofipython.com/experiencing-flow-while-coding.html" rel="alternate"></link><published>2022-01-08T15:29:00-06:00</published><updated>2022-01-08T15:29:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-08:/experiencing-flow-while-coding.html</id><summary type="html">&lt;p&gt;Yesterday, I experienced a flow state where I became manically obsessed with perfecting a script I was working on. I think it's beautiful code, about 100 lines long without &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt;. It solves a real need and it felt great to write it. Some scripts feel terrible to write and you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, I experienced a flow state where I became manically obsessed with perfecting a script I was working on. I think it's beautiful code, about 100 lines long without &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt;. It solves a real need and it felt great to write it. Some scripts feel terrible to write and you know they're bad. However, this one felt like one of the best I've ever written.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;Flow&lt;/a&gt; seems like a mythical, unattainable state these days as portrayed in media, but we can all agree... we love it. When you're in flow, you know it and you feel a grace in improving your work. For coders, maybe it's by wrapping up a few lines here and there into functions. &lt;a class="reference external" href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;, reordering, handling loose ends or edge cases, writing docstrings with supporting documentation and clarifying that you really understand what's happening... these things are all mundane at times but critical to writing reliable code.&lt;/p&gt;
&lt;p&gt;While doing these typical tasks, you're attaining skill and mastery, one of the highest dopamine hits humans can register legally in all 50 states. You know how much better this iteration of code is than when you first learned to write software. You take bits and pieces from past projects and fit them all together into a cohesive, purposeful program. For example, I was tickled to use Python's &lt;a class="reference external" href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files"&gt;readlines() file reading function&lt;/a&gt; to get the last line of a text file. I learned about this function in my first ever free &lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;Python course on Coursera&lt;/a&gt;, 7 years ago. Thanks again Dr. Chuck!&lt;/p&gt;
&lt;p&gt;This time, I realized my flow when researching &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601 time format strings&lt;/a&gt; and guiding them into an HTTP request with the &lt;a class="reference external" href="https://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt;. A new solution emerged, regurgitated from a prior project and mashed up into a more refined form to satisfy the project's requirements. I combined old and new ideas into a better solution than I had ever thought, a fitting complement for the &lt;a class="reference external" href="https://pythonmarketer.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;API&lt;/a&gt; at hand. Time will tell if the solution will actually work as well as I hope.&lt;/p&gt;
&lt;p&gt;Flow is real. You can find work that puts you in a flow state, and it doesn't have to be super interesting work to get there. The learning process pays rewards in competency when exposure to different domains combine. Einstein knew a form of this as &lt;a class="reference external" href="https://evernote.com/blog/einsteins-unique-approach-to-thinking/#:~:text=He%20viewed%20taking%20music%20breaks,come%20up%20with%20new%20ideas."&gt;&amp;quot;combinatory play&amp;quot;&lt;/a&gt;. Repetition enhances this effect and solidifies your foundation. Flow makes it fun! Only rarely do I feel the highest level of engrossment in my work. I sensed I was flowing on this recent project. You can find these types of challenges too. Keep searching for your flow!&lt;/p&gt;
</content><category term="APIs, coding, HTTP, productivity, programming"></category><category term="flow state"></category><category term="python"></category><category term="skills"></category></entry><entry><title>ftfy, The Wonky Text Fixing Python Library</title><link href="https://lofipython.com/ftfy-the-wonky-text-fixing-python-library.html" rel="alternate"></link><published>2022-01-06T11:44:00-06:00</published><updated>2022-01-06T11:44:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-01-06:/ftfy-the-wonky-text-fixing-python-library.html</id><summary type="html">&lt;p&gt;Every Python programmer has undoubtedly come across some crazy characters. The &lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/"&gt;ftfy library &amp;quot;Fixes Text For You&amp;quot;&lt;/a&gt; and acts like a swiss army knife when you've got questionable characters breaking your script. In my case, an HTTP request was failing because of weird cryptic letters hiding in the data when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every Python programmer has undoubtedly come across some crazy characters. The &lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/"&gt;ftfy library &amp;quot;Fixes Text For You&amp;quot;&lt;/a&gt; and acts like a swiss army knife when you've got questionable characters breaking your script. In my case, an HTTP request was failing because of weird cryptic letters hiding in the data when it was only supposed to be an apostrophe. This library fixed my text and made it appear flawless. I really like ftfy because it solves a common problem, fixing &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mojibake#:~:text=Mojibake%20(%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91%3B%20IPA%3A,from%20a%20different%20writing%20system."&gt;mojibake&lt;/a&gt;&amp;quot; or mangled characters. It's a good tool to have when you see these types of issues!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/ftfy/"&gt;Install with pip&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ftfy&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="wp-image-6448 figure"&gt;
&lt;img alt="source: `ftfy documentation &amp;lt;https://ftfy.readthedocs.io/en/latest/avoid.html&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2022/01/ftfy-example-1.png?w=819" /&gt;
&lt;p class="caption"&gt;source: &lt;a class="reference external" href="https://ftfy.readthedocs.io/en/latest/avoid.html"&gt;ftfy documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;See also: &lt;a class="reference external" href="https://docs.python.org/3/howto/unicode.html"&gt;Python Unicode How To&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, programming"></category><category term="ftfy"></category><category term="python"></category><category term="text cleaning"></category></entry><entry><title>Memory Monitoring Python Libraries + Tools</title><link href="https://lofipython.com/tools-tips-to-beat-memoryerror-in-your-python-scripts.html" rel="alternate"></link><published>2021-12-19T11:57:00-06:00</published><updated>2021-12-19T11:57:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-12-19:/tools-tips-to-beat-memoryerror-in-your-python-scripts.html</id><summary type="html">&lt;p&gt;If you write Python code, there's probably been a time or two when you saw the dreaded &lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#MemoryError"&gt;&amp;quot;MemoryError&amp;quot;&lt;/a&gt;. This happens after one of your Python scripts stops because your computer has no spare &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; to execute it. I recently experienced this frustration whilst trying to write hundreds of thousands of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you write Python code, there's probably been a time or two when you saw the dreaded &lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#MemoryError"&gt;&amp;quot;MemoryError&amp;quot;&lt;/a&gt;. This happens after one of your Python scripts stops because your computer has no spare &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; to execute it. I recently experienced this frustration whilst trying to write hundreds of thousands of csv files. However, this time I grasped for tools that support smarter memory management. Now, I can watch my computer's memory bounce around with the Windows Resource Monitor. Python has quite a few memory profiling libraries for monitoring memory too!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Libraries and Guides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/c-api/memory.html"&gt;Memory Management Overview&lt;/a&gt;, Python documentation&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pythonprofilers/memory_profiler"&gt;Memory Profiler&lt;/a&gt;: &amp;quot;monitor memory usage of Python code&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt;: &amp;quot;Cross-platform lib for process and system monitoring in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;: &amp;quot;Sampling profiler for Python programs&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/joerick/pyinstrument"&gt;pyinstrument&lt;/a&gt;: &amp;quot;🚴 Call stack profiler for Python. Shows you why your code is slow!&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/plasma-umass/scalene"&gt;Scalene&lt;/a&gt;: &amp;quot;a high-performance, high-precision CPU, GPU, and memory profiler for Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;G&lt;/a&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;lances&lt;/a&gt;: &amp;quot;Glances an Eye on your system. A top/htop alternative for GNU/Linux, BSD, Mac OS and Windows operating systems.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/sumerc/yappi"&gt;Yappi&lt;/a&gt;: &amp;quot;Yet Another Python Profiler, but this time thread&amp;amp;coroutine&amp;amp;greenlet aware.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pythonspeed/filprofiler"&gt;Fil&lt;/a&gt;: &amp;quot;A Python memory profiler for data processing and scientific computing applications&amp;quot; (&lt;a class="reference external" href="https://www.youtube.com/watch?v=2nKvzVIUjLE&amp;amp;ab_channel=PyninsulaOfficial"&gt;Video&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pyutils/line_profiler"&gt;line_profiler&lt;/a&gt;: &amp;quot;Line-by-line profiling for Python&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/vpelletier/pprofile"&gt;pprofile&lt;/a&gt;: &amp;quot;Line-granularity, thread-aware deterministic and statistic pure-python profiler&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/zhuyifei1999/guppy3/"&gt;Guppy 3&lt;/a&gt;: &amp;quot;Python programming environment and heap analysis toolset&amp;quot;&lt;/p&gt;
&lt;p&gt;S&lt;em&gt;ee also:&lt;/em&gt; &lt;a class="reference external" href="https://docs.python.org/3/library/profile.html"&gt;The Python Profilers&lt;/a&gt;, Python documentation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPython standard distribution comes with three deterministic profilers.&amp;nbsp;&lt;tt class="docutils literal"&gt;cProfile&lt;/tt&gt;,&amp;nbsp;&lt;tt class="docutils literal"&gt;Profile&lt;/tt&gt;&amp;nbsp;and&amp;nbsp;&lt;tt class="docutils literal"&gt;hotshot&lt;/tt&gt;.&amp;nbsp;&lt;tt class="docutils literal"&gt;cProfile&lt;/tt&gt;&amp;nbsp;is implemented as a C module based on&amp;nbsp;&lt;tt class="docutils literal"&gt;lsprof&lt;/tt&gt;,&amp;nbsp;&lt;tt class="docutils literal"&gt;Profile&lt;/tt&gt;&amp;nbsp;is in pure Python and&amp;nbsp;&lt;tt class="docutils literal"&gt;hotshot&lt;/tt&gt;&amp;nbsp;can be seen as a small subset of a cProfile.&lt;/p&gt;
&lt;p&gt;Yappi Github, &lt;a class="reference external" href="https://github.com/sumerc/yappi"&gt;https://github.com/sumerc/yappi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; &lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Windows_Task_Manager#:~:text=The%20program%20can%20be%20started,typing%20taskmgr%20in%20the%20File"&gt;Task Manager&lt;/a&gt;: Windows process management tool with some memory analytics&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.tableau.com/current/server/en-us/perf_collect_perfmon.htm"&gt;Collect Data in Windows with Performance Monitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Resource_Monitor"&gt;Resource Monitor&lt;/a&gt;: Windows tool with Memory, CPU, Disk and Network monitoring tabs&lt;/p&gt;
&lt;div class="wp-image-6300 figure"&gt;
&lt;img alt="Resource Monitor can stop processes from running and view in use, standby (Cached) and free memory. This shows 7 Python scripts running and 49% of total memory is being consumed. Looks like we are running steady and safely below &amp;quot;MemoryError&amp;quot; overflow. We might be able to add a few more scripts with 51% of RAM available!" src="https://pythonmarketer.files.wordpress.com/2021/12/resource-monitor-labels-full.jpg?w=796" /&gt;
&lt;p class="caption"&gt;Resource Monitor can stop processes from running and view in use, standby (Cached) and free memory. This shows 7 Python scripts running and 49% of total memory is being consumed. Looks like we are running steady and safely below &amp;quot;MemoryError&amp;quot; overflow. We might be able to add a few more scripts with 51% of RAM available!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Memory Tips and Guides&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://towardsdatascience.com/memory-management-in-python-6bea0c8aecc9"&gt;Memory Management in Python&lt;/a&gt;, Towards Data Science: this article shows some memory efficient ways to write your code.&lt;/li&gt;
&lt;li&gt;Use only the data you need. Any data you read in and aren't using is held in memory. The &lt;a class="reference external" href="https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"&gt;usecols argument&lt;/a&gt; in pandas is a great way to read a csv and only use the columns you need.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonspeed.com/articles/chunking-pandas/"&gt;Reading data in chunks&lt;/a&gt; with the &lt;a class="reference external" href="https://github.com/pandas-dev/pandas/blob/v1.3.5/pandas/io/parsers/readers.py#L491-L586"&gt;chunksize argument&lt;/a&gt; is another way to reduce memory usage for large datasets.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonspeed.com/articles/pandas-dataframe-series-memory-usage/"&gt;Measuring the memory usage of a Pandas dataframe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some tools are line oriented, others are function oriented. If your code contains large functions, you might favor a line based profiling tool.&lt;/li&gt;
&lt;li&gt;Be aware of the overhead some memory tools may incur. memory_profile was clocked with a whopping 270x slowdown per the Scalene PyCon talk below. The talk shows an awesome comparison of these Python profiling libraries:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="wp-image-6330 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/12/scalene-pycon-us-2021-memory-library-comparison.png?w=1024" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Recommended Reading&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/64"&gt;Profiling and Analyzing Performance of Python Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pymotw.com/2/profile/"&gt;profile, cProfile, and pstats – Performance analysis of Python programs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/64"&gt;Profiling and Analyzing Performance of Python Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.tecmint.com/command-line-tools-to-monitor-linux-performance/"&gt;20 Linux Memory Management Command Line Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;Random-access Memory (RAM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://computersciencewiki.org/index.php/Cache_memory"&gt;Cache Memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you'll see &amp;quot;MemoryError&amp;quot; depends on your computer's hardware, the size of your dataset and what operations you need to script out. Generally speaking, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Input/output"&gt;I/O&lt;/a&gt; or file reads and writes are more expensive operations.&lt;/p&gt;
&lt;p&gt;The tools in this post will help you anticipate how much computing power you have available, monitor your memory consumption more closely and avoid pushing your computer past its limits. You can do things like reading data in chunks and only using the columns you need to reduce your memory consumption. Realizing these tools and strategies can make getting things done with Python a smoother ride.&lt;/p&gt;
</content><category term="coding, computing, pandas, performance, programming"></category><category term="memory profiling"></category><category term="monitoring"></category><category term="python"></category><category term="RAM"></category><category term="Windows"></category></entry><entry><title>8 Promising Python Static Site Generators</title><link href="https://lofipython.com/a-brief-summary-of-promising-python-static-site-generators.html" rel="alternate"></link><published>2021-07-28T23:31:00-05:00</published><updated>2021-07-28T23:31:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-07-28:/a-brief-summary-of-promising-python-static-site-generators.html</id><summary type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A static site generator creates static HTML and markdown files to serve as a website. They're commonly used to host blogs but not exclusively. I recently researched my options to roll a static site in Python. I'm assessing a few of them as a potential future self-hosted blogging solution for this Wordpress blog. Or maybe I'll spin up a new one!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Why Statics?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most &amp;quot;modern&amp;quot; websites are &lt;em&gt;dynamic&lt;/em&gt; in the sense that the contents of the site live in a database, and are converted into presentation-ready HTML only when a user wants to see the page. That's great. However, it presents some minor issues that static site generators try to solve.&lt;/p&gt;
&lt;p&gt;In a static site, the whole site, every page, &lt;em&gt;everything&lt;/em&gt;, is created before the first user even sees it and uploaded to the server as a simple folder full of HTML files (and images, CSS, etc).&lt;/p&gt;
&lt;p&gt;The Nikola Handbook - &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;https://getnikola.com/handbook.html#why-static&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="static-site-generator-python-libraries"&gt;
&lt;h2&gt;Static Site Generator Python Libraries&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;listed in largest to smallest order by # of Github project stars&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Github - 11K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seems to be the front running static site generator in Python's ecosystem. It contains a convenient pelican-importer tool to import existing content from WordPress, Dotclear, or RSS feeds. Enjoying the modular nature of the &lt;a class="reference external" href="https://github.com/pelican-plugins"&gt;pelican-plugins&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lektor&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/lektor/lektor"&gt;Github - 3.5K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intriguing CMS project touting a &amp;quot;Python API&amp;quot;, &lt;a class="reference external" href="https://www.getlektor.com/plugins/"&gt;plugins for tools like Webpack&lt;/a&gt; and talented maintainers including the author of Flask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cactus&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/eudicots/Cactus"&gt;Github - 3.5K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Simple but powerful &lt;a class="reference external" href="http://mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html"&gt;static website generator&lt;/a&gt; using Python and the &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/templates/"&gt;Django template system&lt;/a&gt;... typical users would be designers that are tech-savvy, want to use templates, but don't like to mess with setting up django or S3.&amp;quot; (Mac OS) &lt;a class="reference external" href="https://vimeo.com/46999791"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nikola&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/getnikola/nikola"&gt;Github - 2.2K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Viable option to host your site with the informative &lt;a class="reference external" href="https://getnikola.com/handbook.html#why-static"&gt;Nikola Handbook&lt;/a&gt; walking you through each step. &lt;a class="reference external" href="https://plugins.getnikola.com/"&gt;Plugins&lt;/a&gt; for &lt;a class="reference external" href="https://plugins.getnikola.com/v7/notebook_shortcode/"&gt;Jupyter Notebooks&lt;/a&gt;, &lt;a class="reference external" href="https://getnikola.com/handbook.html#post-processing-filters"&gt;post processing filters&lt;/a&gt;, a &lt;a class="reference external" href="https://getnikola.com/handbook.html#importing-your-wordpress-site-into-nikola"&gt;Wordpress importer&lt;/a&gt; command line tool and about &lt;a class="reference external" href="https://themes.getnikola.com/"&gt;40 ready to go themes&lt;/a&gt; to find the perfect style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Makesite&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/sunainapai/makesite"&gt;Github - 1.6K Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offers less configuration, using only a single makesite.py file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hyde&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/hyde/hyde"&gt;Github - 1.6K stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Port from &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, a &lt;a class="reference external" href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; static site generator. It has since formed its own &amp;quot;evil twin&amp;quot; identity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mynt&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/Anomareh/mynt"&gt;Github - 400 stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Designed to give you all the features of a CMS with none of the often rigid implementations of those features.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Staticjinja&lt;/strong&gt; | &lt;a class="reference external" href="https://github.com/staticjinja/staticjinja"&gt;Github - 250 Stars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Minimalist Python library for building static websites with Jinja.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://PyLadies.com"&gt;PyLadies.com&lt;/a&gt;, &lt;a class="reference external" href="https://pyladies.com/"&gt;created with Mynt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FullStackPython.com, &lt;a class="reference external" href="https://github.com/mattmakai/fullstackpython.com"&gt;created with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GetLektor.com, &lt;a class="reference external" href="https://github.com/lektor/lektor-website"&gt;created with Lektor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gohugoio/hugo"&gt;Hugo&lt;/a&gt;, a Go static site generator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website.html"&gt;How to Build a Low-tech&amp;nbsp;Website?&lt;/a&gt; (featuring Pelican)&lt;/li&gt;
&lt;li&gt;One convenient way to serve your static files up on the web is with a &lt;a class="reference external" href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/#:~:text=A%20content%20delivery%20network%20(CDN,stylesheets%2C%20images%2C%20and%20videos."&gt;CDN&lt;/a&gt; like &lt;a class="reference external" href="https://developers.cloudflare.com/pages/framework-guides/deploy-anything/"&gt;Cloudflare Pages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can research more projects on &lt;a class="reference external" href="https://jamstack.org/generators/"&gt;Jamstack&lt;/a&gt;, a site I found helpful for finding these libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;! I launched a Pelican blog about investing with Cloudflare pages. It's my first live static blog. Read more about it &lt;a class="reference external" href="https://pythonmarketer.com/2022/07/08/launching-a-live-static-blog-via-pelican-github-and-cloudflare-pages/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, web development"></category><category term="creating your own blog"></category><category term="python"></category><category term="static site generator"></category></entry><entry><title>Pick Stocks Intelligently with ffn</title><link href="https://lofipython.com/pick-stocks-like-a-pro-with-ffn.html" rel="alternate"></link><published>2021-01-16T23:21:00-06:00</published><updated>2021-01-16T23:21:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-01-16:/pick-stocks-like-a-pro-with-ffn.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;How do you calculate stock valuation metrics like&lt;/strong&gt;&lt;a class="reference external" href="https://www.investopedia.com/terms/s/sharperatio.asp"&gt;Sharpe ratio&lt;/a&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently I've been reading about common &lt;a class="reference external" href="https://www.suredividend.com/ratios-metrics/"&gt;stock valuation metrics&lt;/a&gt; and wondered how I can apply them to my stock portfolio. I started reading about different metrics, sketching formulas and entertained writing a script to calculate these metrics. But Python has …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;How do you calculate stock valuation metrics like&lt;/strong&gt;&lt;a class="reference external" href="https://www.investopedia.com/terms/s/sharperatio.asp"&gt;Sharpe ratio&lt;/a&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently I've been reading about common &lt;a class="reference external" href="https://www.suredividend.com/ratios-metrics/"&gt;stock valuation metrics&lt;/a&gt; and wondered how I can apply them to my stock portfolio. I started reading about different metrics, sketching formulas and entertained writing a script to calculate these metrics. But Python has no shortage of finance-related libraries. After some furious googling I found &lt;a class="reference external" href="https://github.com/pmorissette/ffn"&gt;ffn&lt;/a&gt;, a way better option than rolling my own formulas. It's a &amp;quot;financial function&amp;quot; library, installable with pip.&lt;/p&gt;
&lt;p&gt;It will be interesting to observe how these metrics vary in my portfolio and learn more of &lt;a class="reference external" href="http://pmorissette.github.io/ffn/ffn.html"&gt;ffn's API&lt;/a&gt;. I like that they use &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;pandas dataframes&lt;/a&gt; within their library because I'm already familiar with them. At minimum, it's good to understand what stock formulas purport to measure and what it means if the measure is low or high. It makes sense to compare stocks in similar industries or competitors like &lt;a class="reference external" href="https://finance.yahoo.com/quote/NKE/"&gt;NKE&lt;/a&gt; and &lt;a class="reference external" href="https://finance.yahoo.com/quote/ADDYY?p=ADDYY&amp;amp;.tsrc=fin-srch"&gt;ADDYY&lt;/a&gt;. This is a neat tool for stock nerds who want to level up their stock analysis, make smart decisions and ideally pad the portfolio!&lt;/p&gt;
&lt;p&gt;The funny thing is... my lowest university grade was a &amp;quot;C&amp;quot; in my only Finance class. It wasn't easy for me to grasp. But with Python it's a little more interesting and easier to apply. Anyone can level up their finance skills thanks to a cornucopia of finance calculation libraries in the Python ecosystem.&lt;/p&gt;
&lt;p&gt;Recommended Reading: &lt;a class="reference external" href="https://pmorissette.github.io/ffn/index.html#a-brief-introduction"&gt;A Brief Introduction - ffn documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install ffn with pip:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install ffn&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Here's the code to get stock data with &lt;a class="reference external" href="https://pmorissette.github.io/ffn/quick.html"&gt;ffn&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ffn&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# ffn.get returns a pandas dataframe of market data.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="s1"&gt;'tsla,spot,nflx,nke,addyy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'2019-01-01'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'2020-12-31'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calc_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="wp-image-5165 figure"&gt;
&lt;img alt="" src="https://pythonmarketer.files.wordpress.com/2021/01/2019-2020-top-stock.jpg?w=794" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;side note on the pyfolio library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I first considered using pyfolio to pull stock data. It is not &amp;quot;out of the box&amp;quot; ready per se to deliver the results pictured in their &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2021/01/16/pick-stocks-like-a-pro-with-pyfolio/"&gt;&amp;quot;single stock&amp;quot; example&lt;/a&gt; documentation. You'd need to find another way to fetch your market data or somehow patch the Yahoo Finance API within pyfolio. I preferred &lt;a class="reference external" href="http://pmorissette.github.io/ffn/quick.html"&gt;ffn&lt;/a&gt;, mostly because it worked right away after pip installing it and running the above code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2023 Update:&lt;/strong&gt; ffn and pyfolio depend on the Yahoo Finance API, which changes sometimes break these libraries. Troubleshooting traceback errors may be required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try these other Python financial analysis libraries:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://financetrain.com/best-python-librariespackages-finance-financial-data-scientists/"&gt;Best Python Libraries/Packages for Finance and Financial Data Scientists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/statistics.html"&gt;python's built-in statistics module&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/mementum/backtrader"&gt;Backtrader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/bpsmith/tia"&gt;tia: Toolkit for integration and analysis&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/peerchemist/finta"&gt;FinTA (Financial Technical Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pydata.github.io/pandas-datareader/index.html"&gt;pandas-datareader&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/matplotlib/mplfinance#usage"&gt;mplfinance&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/robertmartin8/PyPortfolioOpt"&gt;PyPortfolioOpt&lt;/a&gt; - &lt;a class="reference external" href="https://github.com/mrjbq7/ta-lib"&gt;TA-Lib Python Port&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/erickbytes/finsou.py"&gt;finsou.py&lt;/a&gt; (CLI written by me)&lt;/p&gt;
&lt;p&gt;see more: &lt;a class="reference external" href="https://github.com/wilsonfreitas/awesome-quant"&gt;awesome-quant&lt;/a&gt;` &amp;lt;&lt;a class="reference external" href="https://github.com/bpsmith/tia#overview"&gt;https://github.com/bpsmith/tia#overview&lt;/a&gt;&amp;gt;`__&lt;/p&gt;
&lt;div class="wp-image-5037 figure"&gt;
&lt;img alt="Image credit, ActiveState: https://www.activestate.com/blog/top-10-python-packages-for-finance-and-financial-modeling/" src="https://pythonmarketer.files.wordpress.com/2021/01/top10financepackages-1200x675-1.png?w=1024" /&gt;
&lt;p class="caption"&gt;Image credit, ActiveState: &lt;a class="reference external" href="https://www.activestate.com/blog/top-10-python-packages-for-finance-and-financial-modeling/"&gt;https://www.activestate.com/blog/top-10-python-packages-for-finance-and-financial-modeling/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="investing"></category><category term="money"></category><category term="personal finance"></category><category term="python"></category><category term="stock formulas"></category><category term="stocks"></category></entry><entry><title>A Guide To Making HTTP Requests To APIs With JSON &amp; Python</title><link href="https://lofipython.com/how-to-make-json-requests-with-python.html" rel="alternate"></link><published>2020-05-18T05:41:00-05:00</published><updated>2020-05-18T05:41:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-05-18:/how-to-make-json-requests-with-python.html</id><summary type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This contains all of my best API-related knowledge picked up since learning how to use them. All APIs have their own style, quirks and unique requirements. This post explains general terminology, tips and examples if you're looking to tackle your first API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's what is covered:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/li&gt;
&lt;li&gt;Testing and Exporting Python Request Code from Postman (Optional)&lt;/li&gt;
&lt;li&gt;Formatting Your Request&lt;/li&gt;
&lt;li&gt;Example GET and POST Requests&lt;/li&gt;
&lt;li&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/li&gt;
&lt;li&gt;Sidebar: requests.Session()&lt;/li&gt;
&lt;li&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;strong&gt;Terminology Clarification&lt;/strong&gt;: I will refer to &amp;quot;items&amp;quot; or &amp;quot;data&amp;quot; throughout this post. This could be substituted for contacts or whatever data you are looking for. For example, you might be fetching a page of contacts from your CRM. Or fetching your tweets from Twitter's API. Or searching the Google location API, you might look up an address and return geo-location coordinates.&lt;/blockquote&gt;
&lt;div class="section" id="api-http-lingo-you-should-know"&gt;
&lt;h2&gt;API &amp;amp; HTTP Lingo You Should Know&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hypertext Transfer Protocol (HTTP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Per &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;Mozilla&lt;/a&gt;,&amp;quot;Hypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical&amp;nbsp;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;client-server model&lt;/a&gt;, with a client opening a connection to make a request, then waiting until it receives a response.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
HTTP: you = client. API = way to communicate with server&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Application Programming Interface (API)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;Per Wikipedia&lt;/a&gt;, the purpose of an API is to simplify &amp;quot;programming by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstraction_(software_engineering)"&gt;abstracting&lt;/a&gt; the underlying implementation and only exposing objects or actions the developer needs.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Representational State Transfer (REST)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; is an architectural style of web APIs. It is the dominant architecture that many APIs use. Simple Object Access Protocol (&lt;a class="reference external" href="https://smartbear.com/blog/test-and-monitor/soap-vs-rest-whats-the-difference/"&gt;SOAP&lt;/a&gt;) is another style I've heard of, but it seems less common nowadays.&lt;/p&gt;
&lt;p&gt;A REST API is built for interoperability and has properties like: &amp;quot;simplicity of a uniform interface&amp;quot; and &amp;quot;visibility of communication between components by service agents.&amp;quot; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Wikipedia&lt;/a&gt;] If an API follows REST, it has many good principles baked in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;``GET``, ``POST`` and ``PATCH``&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are three common types of request methods.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;: &amp;nbsp;Read data returned, such as all of your tweets in &lt;a class="reference external" href="https://developer.twitter.com/en/docs"&gt;the Twitter API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;: Create a new item, like writing a new tweet. Can also update existing data. Tweets aren't editable though!&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt;: Similar to &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, this is typically used for updating data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;URL or &amp;quot;endpoint&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The website location to send your request&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Values you pass to tell the API what you want. They are defined by the API specifications, which are usually &lt;a class="reference external" href="https://developers.activecampaign.com/reference"&gt;well documented&lt;/a&gt;. In python's &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library, they may be passed as &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt;. Sometimes they are passable directly within the endpoint url string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Body or &amp;quot;payload&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make a request, you send a payload to the url. Often this is a JSON string with the API's URL parameters and values, AKA the request body. If the &lt;a class="reference external" href="https://jira.readthedocs.io/"&gt;API is written specifically for Python&lt;/a&gt;, it might accept an actual Python dictionary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript Object Notation (JSON)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=KnAyziNnuI0"&gt;JSON&lt;/a&gt; is the data interchange standard for all languages. Usually it is the default way to pass data into and receive data from an API. If making a&amp;nbsp; &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, you can check your json object is formatted correctly by using a &lt;a class="reference external" href="https://jslint.com/"&gt;json linter&lt;/a&gt;. Or try Python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#module-json.tool"&gt;json.tool&lt;/a&gt;! You can also pretty print your JSON or python dictionary with the &lt;a class="reference external" href="https://docs.python.org/3/library/pprint.html"&gt;pprint&lt;/a&gt; module. If you're using json.dumps remember it has &lt;a class="reference external" href="https://docs.python.org/3/library/json.html"&gt;pretty printing accessible by keyword arguments&lt;/a&gt;! These features are accessible in the standard library. Isn't Python great? See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/09/15/python-101-an-intro-to-working-with-json/"&gt;Python 101 - An Intro to Working with JSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Headers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These usually contain website cookies and authorization info. They also may tell the API what kind of data you want back. JSON and XML are the two most common types of data to return. You can specify the return format in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers.&lt;/p&gt;
&lt;blockquote&gt;
If you need to parse an XML response, check out Python's stock &lt;a class="reference external" href="https://docs.python.org/3.8/library/xml.etree.elementtree.html"&gt;ElementTree API&lt;/a&gt;. I've only seen a few APIs using XML responses, such as the &lt;a class="reference external" href="https://www.usps.com/business/web-tools-apis/"&gt;USPS Address Validation API&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization varies widely. This is the level of identification you need to pass to the API to make a request. Public APIs might require none. Some just need a username and password. Others use the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OAuth"&gt;Oauth standard&lt;/a&gt;, which is a system involving credentials and tokens for extra security.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Authorization Scheme Example [&lt;/strong&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Mozilla&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authorization: &amp;lt;auth-scheme&amp;gt; &amp;lt;authorisation-parameters&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
# headers python dict example
headers = {&amp;quot;Authorization&amp;quot;: f&amp;quot;basic {token}&amp;quot;}
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;API data is commonly returned in multiple pages when there is a lot of data returned. Each page can be accessed one request at a time. Sometimes you can specify how many items you want on a page. But there is usually a maximum items per page limit like 100.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Status code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each request usually gives you a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;numeric code corresponding to happened&lt;/a&gt; when the server tried to handle your request. There is also usually a message returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also: Web Server Gateway Interface (WSGI, pronounced &amp;quot;Wis-Ghee&amp;quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;As described in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt;, the Python Web Server Gateway Interface (WSGI) is a way to make sure that web servers and python web applications can talk to each other.&amp;quot;&amp;nbsp; &lt;a class="reference external" href="https://docs.gunicorn.org/en/latest/install.html"&gt;Gunicorn&lt;/a&gt; is one of &lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi"&gt;a few Python WSGI clients&lt;/a&gt;. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/04/30/useful-links-for-web2py-beginners/"&gt;web2py&lt;/a&gt; is another WSGI client and web framework I have used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nginx"&gt;Nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;Create, read, update and delete (CRUD)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-request-json"&gt;
&lt;h2&gt;Creating the Request JSON&lt;/h2&gt;
&lt;p&gt;I recommend using &lt;a class="reference external" href="https://www.postman.com/"&gt;Postman&lt;/a&gt; in most cases, depending on the complexity of the API. If the JSON syntax is straightforward, you can format your data as a python dictionary, then convert it to a JSON object with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.dumps"&gt;json module&lt;/a&gt;. But JSON can be tricky sometimes. You may also need to pass a dictionary of HTTP headers.&lt;/p&gt;
&lt;p&gt;Some APIs have &amp;quot;Postman Collections&amp;quot;, a set of Python (or any language) script templates for the API. In those cases, it might make sense to use those resources.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Path One: Make HTTP request with json &amp;amp; requests libraries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Format Python dict with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&amp;nbsp; Infer API requirements from documentation. Use requests for HTTP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path Two: Make HTTP request with Postman &amp;amp; requests library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Postman to generate the JSON payload. Plug headers and payload into requests. Use requests library for HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Postman has a friendly interface for plugging in all your pieces and tinkering with your request body until it works. Make it easier on yourself and use Postman, especially if there are collections. An alternative is to troubleshoot in Python if you are confident in your grasp of the API. I use both options depending on my familiarity with the API at hand.&lt;/p&gt;
&lt;p&gt;Once you have the request working, you may &lt;a class="reference external" href="https://learning.postman.com/docs/postman/sending-api-requests/generate-code-snippets/"&gt;export your Postman request to almost any language&lt;/a&gt;. For Python, you can sometimes export to the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt;,&amp;nbsp; &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;urllib&lt;/tt&gt; libraries. Hit the &amp;quot;code&amp;quot; button in Postman and then copy your code.&lt;/p&gt;
&lt;blockquote&gt;
If you choose not to use Postman, you can use the json library. See the use of &lt;tt class="docutils literal"&gt;json.dumps()&lt;/tt&gt;to convert a dictionary to a JSON object in Example #2 below&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="formatting-your-request"&gt;
&lt;h2&gt;Formatting Your Request&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Paste your Postman headers, payload and url into your existing code.&lt;/li&gt;
&lt;li&gt;You may want to use a dict or &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting&lt;/a&gt; to pass values to your request parameters or url.&lt;/li&gt;
&lt;li&gt;If the API uses a token or other form of authorization that needs to be refreshed intermittently, I usually have a function that returns a token. &lt;tt class="docutils literal"&gt;token = fetch_token()&lt;/tt&gt; Then put the token in the headers dict.&amp;nbsp; &lt;tt class="docutils literal"&gt;{&amp;quot;Authorization&amp;quot;: f&amp;quot;basic &lt;span class="pre"&gt;{token}&amp;quot;}&lt;/span&gt;&lt;/tt&gt; Finally pass your headers and payload to your&amp;nbsp; &lt;tt class="docutils literal"&gt;requests.get&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;requests.request&lt;/tt&gt; function along with the endpoint url. You're now ready to test the request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="python-installation"&gt;
&lt;h2&gt;Python Installation&lt;/h2&gt;
&lt;p&gt;You can install &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; with &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip&lt;/a&gt;. Alternatively, &lt;tt class="docutils literal"&gt;http.client&lt;/tt&gt; is included within the Python standard library. If you want to convert HTTP response data to a dataframe or csv, install &lt;tt class="docutils literal"&gt;pandas.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install requests&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pandas&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-1-get-the-geolocation-details-of-any-public-location-with-the-google-api"&gt;
&lt;h2&gt;Example #1: &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; the geolocation details of any public location with the Google API&lt;/h2&gt;
&lt;p&gt;This was modified from another example of &lt;a class="reference external" href="https://www.geeksforgeeks.org/get-post-requests-using-python/"&gt;Google's Geolocation API&lt;/a&gt;. To use this, you need to &lt;a class="reference external" href="https://developers.google.com/maps/documentation/geolocation/intro"&gt;create a developer account with Google&lt;/a&gt; and paste your API keys below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import requests
# import pandas as pd

&amp;quot;&amp;quot;&amp;quot;Find the best double-cheeseburger + fries $7 can buy.&amp;quot;&amp;quot;&amp;quot;
payload = {&amp;quot;key&amp;quot;:&amp;quot;Add_Google_API_Key_Here&amp;quot;, &amp;quot;address&amp;quot;:&amp;quot;Redhot Ranch&amp;quot;}
# optional: set a 5 second timeout for the http request
r = requests.get(url=&amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;,
                 params=payload,
                 timeout=5)
print(r.text)
print(r.status_code)
data = r.json()

# extracting latitude, longitude and formatted address of the first matching location
latitude = data['results'][0]['geometry']['location']['lat']
longitude = data['results'][0]['geometry']['location']['lng']
formatted_address = data['results'][0]['formatted_address']
print(longitude)
print(latitude)
print(formatted_address)

# optional: convert response into a dataframe with pandas
# location_df = pd.json_normalize(data['results'])
# location_df.to_csv('Locations.csv')
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Above you can see:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; makes it easy to see the server's text response also with &lt;tt class="docutils literal"&gt;response.text&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; also makes JSON encoding easy with &lt;tt class="docutils literal"&gt;response.json()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;I like to use &lt;tt class="docutils literal"&gt;pd.json_normalize()&lt;/tt&gt; to convert the response object to a dataframe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-encode-a-python-dictionary-to-json-string-and-post-to-a-hypothetical-api"&gt;
&lt;h2&gt;Example #2: Encode a Python dictionary to json string and &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; to a hypothetical API&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a simple dictionary with request body data and pretty inspect it with pprint.&lt;/li&gt;
&lt;li&gt;Convert it to encoded json string with &lt;tt class="docutils literal"&gt;json.dumps&lt;/tt&gt; from the standard library's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html#json.loads"&gt;json module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; the encoded JSON to the endpoint url with requests.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
import pprint
import json
import requests

def convert_dict_to_json_object():
    &amp;quot;&amp;quot;&amp;quot;Create request body with fictional contact details.&amp;quot;&amp;quot;&amp;quot;
    payload = {
        &amp;quot;first_name&amp;quot;:&amp;quot;P&amp;quot;,
        &amp;quot;last_name&amp;quot;:&amp;quot;Sherman&amp;quot;,
        &amp;quot;address&amp;quot;:&amp;quot;42 Wallaby Way&amp;quot;,
        &amp;quot;address_2&amp;quot;:&amp;quot;&amp;quot;,
        &amp;quot;city&amp;quot;:&amp;quot;Sydney&amp;quot;,
        &amp;quot;state&amp;quot;:&amp;quot;NSW&amp;quot;,
        &amp;quot;country&amp;quot;:&amp;quot;AU&amp;quot;,
        &amp;quot;zip&amp;quot;:&amp;quot;2000&amp;quot;
        }
    pprint.pprint(payload)
    json_str = json.dumps(payload, ensure_ascii=True)
    # encode json str to utf-8
    return json_str.encode(&amp;quot;utf-8&amp;quot;)

def create_new_contact(json_str):
    &amp;quot;&amp;quot;&amp;quot;
    This is a fictional API request.
    Passing a json object to requests.
    Decoding server response with response.json(),
    Returning a contact id by calling the data's keys.
    &amp;quot;&amp;quot;&amp;quot;
    headers = {
        &amp;quot;Authorization&amp;quot;: f&amp;quot;Bearer {token}&amp;quot;,
        &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
        &amp;quot;cache-control&amp;quot;: &amp;quot;no-cache&amp;quot;,
        &amp;quot;Postman-Token&amp;quot;: f&amp;quot;{postman_token}&amp;quot;
        }
    r = requests.request(method=&amp;quot;POST&amp;quot;,
                         url=&amp;quot;https://SomeSoftwareAPI.com/contacts/&amp;quot;,
                         data=json_str,
                         headers=headers)
    data = r.json()
    print(data.keys())
    contact_id = data['contact_id'] # call dict keys to get their values
    return contact_id

json_str = convert_dict_to_json_object()
contact_id = create_new_contact(json_str)
&lt;/pre&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;requests.request keyword argument alternatives for passing data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;params&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples or bytes to send in the query string for the&amp;nbsp;&lt;tt class="docutils literal"&gt;`Request&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.Request"&gt;https://2.python-requests.org/en/master/api/#requests.Request&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;&amp;nbsp;– (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the&amp;nbsp;&lt;tt class="docutils literal"&gt;`Request&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.Request"&gt;https://2.python-requests.org/en/master/api/#requests.Request&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json&lt;/strong&gt;&amp;nbsp;– (optional) A JSON serializable Python object to send in the body of the&amp;nbsp;&lt;tt class="docutils literal"&gt;`Request&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.Request"&gt;https://2.python-requests.org/en/master/api/#requests.Request&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/"&gt;requests API documentation&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Gotchyas&amp;quot; To Avoid&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status codes&lt;/a&gt; are your friend. They offer a hint at why your request is not working. If you see 200 or 201, that's a good sign. They're usually helpful, but sometimes they can be misleading.&lt;/li&gt;
&lt;li&gt;Ensure you are defining the correct content-type. I had an experience where Postman defined two conflicting &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content-type&lt;/span&gt;&lt;/tt&gt; headers and it &lt;a class="reference external" href="https://github.com/postmanlabs/postman-code-generators/issues/215"&gt;caused my request to fail&lt;/a&gt;. The server's error message indicated the problem was in my JSON, so it took me a while to figure out the headers were the problem.&lt;/li&gt;
&lt;li&gt;Sometimes it makes a difference if your url has &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://&lt;/span&gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; in it. Usually &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&lt;/span&gt;&lt;/tt&gt; is preferred.**&amp;nbsp;**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;requests.Session()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might be able to improve performance by using a requests &lt;a class="reference external" href="https://requests.readthedocs.io/en/master/user/advanced/"&gt;&amp;quot;session&amp;quot; object&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;
a session adds a &amp;quot;keep-alive&amp;quot; header to your HTTP connection.
It can be used to store cookies across requests.
&amp;quot;&amp;quot;&amp;quot;
import requests
s = requests.Session()
for page in range(0, 2):
    url = f&amp;quot;https://SomeSoftwareAPI.com/contacts/{str(page)}&amp;quot;
    r = s.get(url)
    print(r.text)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Dig deeper into requests by raising your HTTPConnection.debuglevel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPResponse.debuglevel:&lt;/strong&gt; A debugging hook. If &lt;tt class="docutils literal"&gt;`debuglevel&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel&lt;/a&gt;&amp;gt;`__ is greater than zero, messages will be printed to stdout as the response is read and parsed. &lt;strong&gt;-&lt;/strong&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel"&gt;http.client Python Docs&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from http.client import HTTPConnection
import requests
HTTPConnection.debuglevel = 1
payload = {&amp;quot;key&amp;quot;:&amp;quot;Add_Google_API_Key_Here&amp;quot;, &amp;quot;address&amp;quot;:&amp;quot;90 Miles&amp;quot;}
url = &amp;quot;https://maps.googleapis.com/maps/api/geocode/json&amp;quot;
r = requests.get(url=url, params=payload, timeout=5)
print(r.text)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I remember APIs seemed mysterious and daunting before I had used them. But like all things, they can be conquered with knowledge, understanding and tenacity to keep trying until you figure it out. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requests Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://requests.readthedocs.io/en/master/api/"&gt;requests.request() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.get"&gt;requests.get() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2.python-requests.org/en/master/api/#requests.post"&gt;requests.post() API documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supplementary Reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation"&gt;Google's HTTP Timing Explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Rolstenhouse/unofficial-apis"&gt;List of Interesting &amp;quot;Unofficial&amp;quot; APIs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Proxy_server"&gt;Proxy servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html"&gt;Making 1 million requests with python-aiohttp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Chicago, coding, HTTP, json, pandas, programming"></category><category term="api"></category><category term="data"></category><category term="python"></category><category term="requests"></category><category term="sandwiches"></category><category term="web"></category></entry><entry><title>Gooey GUI for Python Scripts</title><link href="https://lofipython.com/gooey-gui-for-python-scripts.html" rel="alternate"></link><published>2018-08-25T16:32:00-05:00</published><updated>2018-08-25T16:32:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-08-25:/gooey-gui-for-python-scripts.html</id><summary type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GUI stands for &amp;quot;Graphical User Interface&amp;quot;, aka the part of a program designed for human interaction. Adding a GUI to a Python script allows anyone to run it without having to code or use the command line.&lt;/p&gt;
&lt;p&gt;There are several GUI libraries in Python. A few I have heard of are Tkinter (comes in the standard library), wxPython, PyQT, easygui, &lt;a class="reference external" href="https://github.com/hoffstadt/DearPyGui"&gt;DearPyGui&lt;/a&gt; and PySimpleGUI. I &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/29/tkinter-and-python-libraries/"&gt;explored Tkinter&lt;/a&gt; back when I first got into Python. It was more intricate and offered more control over the look of your app, and took longer to pick up. Gooey is more of a pre-packaged GUI library.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/chriskiehl/Gooey"&gt;Gooey Github page&lt;/a&gt; was most useful to me and helped me to do what I needed. The script posted &lt;a class="reference external" href="http://pbpython.com/pandas-gui.html"&gt;in this blog&lt;/a&gt; helped as well. I needed to enable a human to supply three files and enter a number. Gooey was a good match for this. The library has two branches:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;some basic widgets piggyback off the &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2015/10/08/a-intro-to-argparse/"&gt;argparse&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;another part of the library uses a function called the GooeyParser. The GooeyParser offers more advanced widgets, like a file chooser. This was exactly what I was looking to use to pull in files for my script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Installing Gooey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Argparse comes stock with Python. You can install Gooey via the &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/01/20/how-to-python-pip-install-new-libraries/"&gt;pip installer&lt;/a&gt;. Open command prompt or terminal and enter:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install Gooey&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Below is a basic argparse/Gooey combination script. The argparse version offers a handful of widgets such as checkboxes and dropdown, but I had trouble getting them to work with the GooeyParser (used in 2nd script).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from argparse import ArgumentParser
from gooey import Gooey

&amp;#64;Gooey(program_name='Email Campaign Reporting Generator', default_size=(575, 600))
def get_args():
    &amp;quot;&amp;quot;&amp;quot;Demonstrating python's vars built-in to store arguments in a python dict.&amp;quot;&amp;quot;&amp;quot;
    parser = ArgumentParser(description='A simple argument parser', epilog='This is where you might put example usage')
    parser.add_argument('Name', action='store', required=True, help='Help text for option X')
    parser.add_argument('Email', help='Help text for option Y', default=False)
    parser.add_argument('Campaign Number', help='Help text for option Z', type=int)
    parser.add_argument('Campaign Segment', choices=['A', 'B','All'], default='a', nargs='?')
    user_inputs = vars(parser.parse_args())
    print(user_inputs)
    name = user_inputs['Name']
    campaign_number = user_inputs['Campaign Number']
    return parser.parse_args()

if __name__ == '__main__':
    get_args()
&lt;/pre&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Side note: Check out Python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#vars"&gt;vars() built-in&lt;/a&gt; function above. It returns the input data as a dictionary called user_inputs. Then we can get the values via the dictionary's keys. Pretty nifty!&lt;/blockquote&gt;
&lt;p&gt;The &amp;#64;Gooey() part of the code is an advanced function known as a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0318/"&gt;decorator in Python&lt;/a&gt;. Put simply, decorators are functions that modify the function to which they are attached.&lt;/p&gt;
&lt;p&gt;Below is my script that uses the more advanced GooeyParser for its &amp;quot;FileChooser&amp;quot; widget. Gooey allows you to group widgets together and set how many widgets per line with the gooey_options={} parameter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from gooey import Gooey, GooeyParser

&amp;#64;Gooey(program_name='Email Campaign Reporting Generator', default_size=(575, 600))
def get_args():
    &amp;quot;&amp;quot;&amp;quot;
    Adding two argument groups, each accepting two arguments.
    Using gooey_options to set layout.
    &amp;quot;&amp;quot;&amp;quot;
    parser = GooeyParser(description='Export campaign report spreadsheets and upload below.')
    top_group = parser.add_argument_group(gooey_options={'show_border': False,'columns': 1})
    top_group.add_argument('Contact List', help='Upload Send List (.xlsx)', widget='FileChooser')
    top_group.add_argument('Opens List', help='Upload Opens List (.xlsx)', widget='FileChooser')
    top_group.add_argument('Unsubscribe List', help='Upload Unsubscribe List (.xlsx)', widget='FileChooser')
    bottom_group = parser.add_argument_group(gooey_options={'show_border': False,'columns': 1, 'required':False})
    bottom_group.add_argument('Campaign ID', action='store', help=&amp;quot;Number found in the Campaign 'Reports' tab&amp;quot;)
    bottom_group.add_argument('Campaign Segment', action='store', help='Enter A, B, or All. All lists supplied must match segment.')
    user_inputs = vars(parser.parse_args())
    name = user_inputs['Name']
    return parser.parse_args()

if __name__ == '__main__':
    get_args()
&lt;/pre&gt;
&lt;p&gt;Overall, Gooey knows what it wants to be, an easy to use GUI framework for Python. It does it well. Here's a screenshot of my program's shiny GUI:&lt;/p&gt;
&lt;img alt="gooey_gui_shot_2" class="alignnone size-full wp-image-1431" src="https://pythonmarketer.files.wordpress.com/2018/08/gooey_gui_shot_2.png" style="width: 578px; height: 603px;" /&gt;
&lt;p&gt;Now that I have a GUI on top of my program and it delivers the expected output file, I'm hoping to take it one step further by packaging it up as a Windows .exe file. This would allow it to run as a desktop app on any Windows computer without the need to install Python or library dependencies. I've only begun exploring options to do this but a few libraries I've heard of are pyinstaller, cx_Freeze and Py2Exe. Updates coming if I figure it out. Cheers :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I did figure out how to compile my Gooey app to a Windows application with Pyinstaller. You can&amp;nbsp;&lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/20/packaging-python-as-a-windows-app/"&gt;read more on how I did it here&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, data, product development, programming, software"></category><category term="gooey"></category><category term="gui"></category><category term="python"></category><category term="software development"></category></entry><entry><title>list(cool_python_things)</title><link href="https://lofipython.com/blog_post-listcool_python_things.html" rel="alternate"></link><published>2018-03-24T19:38:00-05:00</published><updated>2018-03-24T19:38:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-03-24:/blog_post-listcool_python_things.html</id><summary type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project contains&amp;nbsp;&lt;strong&gt;pytudes&lt;/strong&gt;—Python programs for perfecting programming skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt; - Fuzzy string matching python library, written …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/norvig/pytudes"&gt;pytudes&lt;/a&gt; - &amp;quot;This project contains&amp;nbsp;&lt;strong&gt;pytudes&lt;/strong&gt;—Python programs for perfecting programming skills.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.makeartwithpython.com/blog/video-synthesizer-in-python/?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;Building a video synthesizer in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/overview"&gt;Running micropython on a microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - Super awesome excel and data analysis library. The talk, &amp;quot;&lt;a class="reference external" href="https://www.youtube.com/watch?v=5JnMutdy6Fw"&gt;Pandas from the Ground Up&lt;/a&gt;&amp;quot; by Brandon Rhodes is great!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/"&gt;Fuzzy Wuzzy&lt;/a&gt; - Fuzzy string matching python library, written by SeatGeek&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://soundcloud.com/talkpython"&gt;Talk Python to Me&lt;/a&gt; - Python podcast&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.oreilly.com/programming/free/?imm_mid=0e20a9&amp;amp;cmp=em-prog-na-na-afterp_triggered_email_programming_resources"&gt;Free Programming Books from O'Reilly&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="coding, pandas, programming"></category><category term="computers"></category><category term="python"></category></entry><entry><title>Python File Handling Basics</title><link href="https://lofipython.com/python-file-handling-basics.html" rel="alternate"></link><published>2018-01-14T18:53:00-06:00</published><updated>2018-01-14T18:53:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2018-01-14:/python-file-handling-basics.html</id><summary type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The basis of many great programs revolve around a simple set of operations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file.&lt;/li&gt;
&lt;li&gt;Do something with the file contents.&lt;/li&gt;
&lt;li&gt;Save the new file for the user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python is nice and simple for this.&amp;nbsp;Paste the below lines into a &lt;a class="reference external" href="https://www.google.com/search?q=text+editor&amp;amp;oq=text+edit&amp;amp;aqs=chrome.0.0j69i57j0l4.2054j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;text editor&lt;/a&gt; and save as a .py file. &lt;a class="reference external" href="https://github.com/BurntSushi/nfldb/wiki/Python-&amp;amp;-pip-Windows-installation"&gt;You need to have Python 3 installed&lt;/a&gt;. In the same folder as your .py file, save a .txt file with some words in it. Alright, let's write some code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
file_name = input(&amp;quot;Enter your file name. e.g. words.txt&amp;quot;)
file_handle = open(file_name, &amp;quot;r&amp;quot;)
lines = file_handle.readlines()
print (lines)
file_handle.close()
&lt;/pre&gt;
&lt;p&gt;In line 1, we ask the user to enter their file name with Python's raw_input function. When the program runs, the user enters their text file name with extension. This line stores the name in a variable called file_name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 2,&lt;/strong&gt; we open your text file and store it in a variable I have named file_handle. Think of the file handle as a bridge between your code and the text file. Quick point about the 'r' above: that tells the program to open the file in &amp;quot;Read&amp;quot; mode. There are several different file modes in programming. Some modes are just for reading an existing file, some are just for writing a new file, and some are capable of both. &lt;a class="reference external" href="https://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w/16208298"&gt;This Stack Overflow post&lt;/a&gt; is well written and details the differences between file modes. Once established, the file handle allows you to read the file's contents or write new contents to the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 3,&lt;/strong&gt;&amp;nbsp;we are calling the .readlines() method on our file handle. This method takes the file contents and stores them, line by line, into a list named &amp;quot;lines&amp;quot;. An alternative method is .read(), which opens the file and stores its contents as one string. Try switching this out in place of&amp;nbsp; .readlines() to check out the difference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4,&lt;/strong&gt; we are printing the stored lines to show them to the user. We now have the file contents, ready to be used however we please.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 5&lt;/strong&gt;, we are closing the file.&lt;/p&gt;
&lt;p&gt;Below, we are going to write a new file. Let's pretend we've done something worth saving with our lines and now want to save them to a new file. We will represent this as the variable &amp;quot;output&amp;quot; in the first line below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
file_name = input(&amp;quot;Enter any file name.&amp;quot;)
save_file = open(file_name, &amp;quot;w&amp;quot;)
save_file.write(&amp;quot;Here is some text to save in a file.&amp;quot;)
save_file.close()
&lt;/pre&gt;
&lt;p&gt;In line 1, we are using Python's input function to ask the user what to name the file and storing it in a variable named file_name.&lt;/p&gt;
&lt;p&gt;In line 2,&amp;nbsp; we are calling the open function again that we used in the first example, but this time, notice the &amp;quot;w&amp;quot;. This indicates that we are opening the file in &amp;quot;write&amp;quot; mode.&lt;/p&gt;
&lt;p&gt;In line 3, we are calling the .write() method on our file handle, named save_file, and passing it our text to be saved in our new file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In line 4&lt;/strong&gt;, we are closing the file, completing the creation of our new file in the same folder as our .py program file.&lt;/p&gt;
&lt;p&gt;Your program is now ready to be run. Double-click your .py file to execute it.&lt;/p&gt;
&lt;p&gt;Before learning Python, file operations were a mystery to me. It took me a while to understand this clearly, and I wanted to share. Once you master these basic file operations, programming gets to be a lot more fun. Do try it out for yourself :D&lt;/p&gt;
</content><category term="coding, programming"></category><category term="data"></category><category term="python"></category><category term="software"></category></entry><entry><title>Should You Go To Programming School?</title><link href="https://lofipython.com/should-i-go-to-programming-school.html" rel="alternate"></link><published>2017-07-28T23:45:00-05:00</published><updated>2017-07-28T23:45:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2017-07-28:/should-i-go-to-programming-school.html</id><summary type="html">&lt;p&gt;There is no one-size-fits-all answer. Below are some thoughts that may help you decide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What are your programming goals? Get a coding job? Create an app or website? Become more productive at your current job?&lt;/li&gt;
&lt;li&gt;What is your current experience level? Are you starting fresh or do you already know …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;There is no one-size-fits-all answer. Below are some thoughts that may help you decide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What are your programming goals? Get a coding job? Create an app or website? Become more productive at your current job?&lt;/li&gt;
&lt;li&gt;What is your current experience level? Are you starting fresh or do you already know a language or two?&lt;/li&gt;
&lt;li&gt;Do you have money saved up? Otherwise, you might need to take out a loan.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A computer science degree is typically most expensive. Coding bootcamps are a lower cost option that pack a wide curriculum into a few weeks or months, but they can still be pricey. The cheapest option is to take a piecemeal approach through various online courses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;School Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wholistic approach. You get the ins and outs of programming from a proven curriculum.&lt;/li&gt;
&lt;li&gt;Community. You learn with other students and from experienced teachers.&lt;/li&gt;
&lt;li&gt;Job placement. Often various schools and bootcamps will connect you to a company.&lt;/li&gt;
&lt;li&gt;Credentials. You gain confidence and the backing of your skills by an established institution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Potential Downsides&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tuition Money. A lot of&amp;nbsp;what you need to know is available for free or cheap on the web.&lt;/li&gt;
&lt;li&gt;Skill level match. Some bootcamps are oriented for beginners, others are more advanced. If you do a bootcamp, make sure it fits your skill level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you want a coding job&lt;/strong&gt;, school makes sense. The bootcamps look to be effective if you can handle the up-front investment. It's possible to land a job without schooling but much tougher. I am currently considering &lt;a class="reference external" href="https://www.fullstackacademy.com/"&gt;Full Stack Academy&lt;/a&gt;. and &lt;a class="reference external" href="http://www.codingdojo.com/"&gt;Coding Dojo&lt;/a&gt;. There are many out there. CodeAcademy is a popular route as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to make an app or website&lt;/strong&gt;, the school or the non-school route may both work. For the non-school route, the following languages are good places to start: &lt;em&gt;(note - not a comprehensive list, these are my picks.)&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web App or Website: HTML, CSS,&amp;nbsp;Python, Javascript&lt;/li&gt;
&lt;li&gt;Web App or Website Framework:&amp;nbsp; Flask, Django, py4web, Ruby on Rails, React&lt;/li&gt;
&lt;li&gt;iOS app: Swift plus Apple's Xcode environment, Beeware (python library)&lt;/li&gt;
&lt;li&gt;Android App: Java or Kotlin, Beeware&lt;/li&gt;
&lt;li&gt;General Coding: Python or Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you want to be more productive at work&lt;/strong&gt;, I recommend learning Python. More on Python and where to start &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/02/22/marketer-slash-programmer/"&gt;here&lt;/a&gt;.&amp;nbsp;&lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff With Python&lt;/a&gt; is a great resource for boosting your productivity also.&lt;/p&gt;
&lt;p&gt;It's not easy to decide whether or not school is for you. I'm still unsure after a year and a half of programming on the side. No matter what, continue to learn multiple languages and strive for a better grasp of the ones you know. Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My decision: continue self-study and learning online for free.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 8 months after writing this post, I have concluded that learning for free online was the right choice for me. I've achieved many of my programming goals in the last three years, thanks to materials available from &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python"&gt;Codeacademy&lt;/a&gt;, &lt;a class="reference external" href="https://www.coursera.org/learn/python"&gt;Coursera&lt;/a&gt;, &lt;a class="reference external" href="https://www.youtube.com/watch?v=u3d-n41Tobw"&gt;YouTube&lt;/a&gt;, &lt;a class="reference external" href="https://stackoverflow.com/questions/1720421/how-to-concatenate-two-lists-in-python?rq=1"&gt;Stack Overflow&lt;/a&gt;, &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;countless helpful resources,&lt;/a&gt;&lt;a class="reference external" href="https://pymotw.com/3/glob/index.html"&gt;interesting blogs&lt;/a&gt;, and &lt;a class="reference external" href="https://docs.python.org/3/library/index.html"&gt;documentation&lt;/a&gt;. I've talked with others who need the in-person assistance that a bootcamp offers to learn. Do what works for you. Good luck with your decision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Several years later, I also get paid to use Python and Excel for a living! I studied for free online intermittently over 2 years to achieve it.&lt;/p&gt;
</content><category term="coding, programming"></category><category term="app development"></category><category term="computer jobs"></category><category term="python"></category><category term="software"></category><category term="web apps"></category><category term="web development"></category><category term="website"></category></entry><entry><title>Starting to Almost Kinda Think About Creating a Web App</title><link href="https://lofipython.com/starting-to-almost-kinda-think-about-creating-a-web-app.html" rel="alternate"></link><published>2016-03-03T03:56:00-06:00</published><updated>2016-03-03T03:56:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2016-03-03:/starting-to-almost-kinda-think-about-creating-a-web-app.html</id><summary type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to&amp;nbsp;learn about&amp;nbsp;web frameworks. A web framework consists of software designed to aid in web development. They make it easier to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my first goals when I started learning Python was to build a web application. Once you've gotten a basic grip on Python, you might be ready to&amp;nbsp;learn about&amp;nbsp;web frameworks. A web framework consists of software designed to aid in web development. They make it easier to create a website or web app - if you know how to use them. Unfortunately, there is a learning curve to using the frameworks but thankfully there is plenty o' documentation to go around to help you.&lt;/p&gt;
&lt;p&gt;Here are the two&amp;nbsp;&lt;a class="reference external" href="https://www.airpair.com/python/posts/django-flask-pyramid"&gt;Python Frameworks&lt;/a&gt; I've chosen to investigate (there are many out here on the webs):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django - widely used, great community support, comes with just about everything built in. Can be used for smaller apps or multi-page/app websites.&lt;/li&gt;
&lt;li&gt;Flask - a &amp;quot;microframework&amp;quot; used for smaller apps. Possibly more manageable for someone beginning a smaller project (me!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as a beginnerish-level coder, I've chosen to start with Flask; I also found &lt;a class="reference external" href="http://opentechschool.github.io/python-flask/"&gt;this sweet guide&lt;/a&gt; that I think will help. Maybe someday I will graduate to Django, it sounds like a great framework.&amp;nbsp;I've also decided that first I need to &lt;a class="reference external" href="https://www.coursera.org/specializations/web-design"&gt;brush up on my HTML&lt;/a&gt; - And according to a lot of what I've read it doesn't hurt to know CSS/Javascript. So this whole &amp;quot;build a web app&amp;quot; idea will continue, albeit with some hurdles to clear first.&lt;/p&gt;
&lt;p&gt;Edit: I ended up choosing web2py, which I hadn't even considered when I wrote this originally! Here's a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/03/22/choosing-a-web-development-path/"&gt;post about why I chose it&lt;/a&gt;.&lt;/p&gt;
</content><category term="coding, programming, web development"></category><category term="django"></category><category term="flask"></category><category term="python"></category><category term="web apps"></category></entry></feed>