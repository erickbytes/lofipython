<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - pytest</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/pytest.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2020-03-21T01:47:00-05:00</updated><entry><title>Automating pytest on Windows with a .bat file, Python, Task Scheduler and Box</title><link href="https://lofipython.com/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box.html" rel="alternate"></link><published>2020-03-21T01:47:00-05:00</published><updated>2020-03-21T01:47:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-03-21:/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Automatic pytest Testing and Failure Alert Monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is my solution to replace manually running pytest each day in command prompt. I want to automate running pytest every day, test if my automated python scripts ran smoothly and get notified if any tests fail.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing **`pytest &amp;lt;https://docs.pytest.org …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Automatic pytest Testing and Failure Alert Monitoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is my solution to replace manually running pytest each day in command prompt. I want to automate running pytest every day, test if my automated python scripts ran smoothly and get notified if any tests fail.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing **`pytest &amp;lt;https://docs.pytest.org/en/latest/getting-started.html&amp;gt;`__**, a python testing library:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pytest&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Few Words on pytest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is a unit test framework in python. pytest expects you to write each test as a self-contained function. One python file can contain many different test functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Writing a Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's use &lt;strong&gt;test_file_date.py&lt;/strong&gt; as our test, which uses the &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html"&gt;glob&lt;/a&gt; module and &lt;a class="reference external" href="https://docs.python.org/2/library/os.path.html#os.path.getmtime"&gt;os.getmtime&lt;/a&gt; to get the csv with the most recent modification dateon my desktop. Then it tests if that date is today, in my case, for an expected daily file drop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_csv_date_equals_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The dir_query format is for a Windows path with Unix style pattern matching.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
     &lt;span class="c1"&gt;# specify csv extension and folder&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/Desktop/*.csv&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# get most recent file&lt;/span&gt;
    &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;csv_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;csv_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;csv_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Here's the pytest text output when the test is passing:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
============================= test session starts =============================
platform win32 -- Python 3.8.1, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: C:\
collected 1 item

..\..\Users\martech\Desktop\test_file_date.py . [ 14%]
                                                                   [100%]

============================== 1 passed in 0.28s ==============================
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Creating a Task with Windows Task Scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you haven't used python with Windows Task Scheduler before, &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;my previous post&lt;/a&gt; on creating a task may help you. We'll create two of them for our testing system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding Your Task Scheduler Program: a Windows .bat file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add your username to the text below and adjust the paths to your system. Then save a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Batch_file"&gt;Windows .bat file&lt;/a&gt; with this text, which points to your pytest.exe file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cmd /c &amp;quot;C:\Users\your_username\Desktop\VM_Jobs\Scripts\pytest.exe --capture=sys&amp;quot; ^
C:\Users\your_username\Desktop\test_file_date.py &amp;gt; C:\Users\your_username\Desktop\VM_Jobs\Test_Results\Test_Results.txt
&lt;/pre&gt;
&lt;p&gt;This example is referencing an .exe within a hypothetical &amp;quot;VM_Jobs&amp;quot; &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;, located on my Desktop. If you have a virtualenv or venv, check the Scripts folder. (Bin on Linux.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breaking this out, there are five .bat files parts:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
cmd /c &amp;quot;C:Usersyour_usernameDesktopVM_JobsScriptspytest.exe --capture=sys&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Windows' &lt;a class="reference external" href="https://ss64.com/nt/cmd.html"&gt;cmd command&lt;/a&gt; takes a program, so we're passing pytest. &lt;a class="reference external" href="https://docs.pytest.org/en/latest/capture.html"&gt;The --capture=sys argument&lt;/a&gt; tells pytest to capture the test results. &lt;strong&gt;Note:&lt;/strong&gt; switching cmd /c to cmd /k forces the terminal to stay open when you are testing your bat file. You can double-click your .bat file to test run it.&lt;/p&gt;
&lt;blockquote&gt;
^&lt;/blockquote&gt;
&lt;p&gt;circumflex represents a line continuation in Windows batch files for better readability&lt;/p&gt;
&lt;blockquote&gt;
C:Usersyour_usernameDesktoptest_file_date.py&lt;/blockquote&gt;
&lt;p&gt;Next we're passing our python file as an argument to pytest, testing our file's modified date matches today's date.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This is a Windows redirect. It redirects the pytest output from sys to a text file, which is the last argument in our .bat file:&lt;/p&gt;
&lt;blockquote&gt;
C:Usersyour_usernameDesktopVM_JobsTest_ResultsTest_Results.txt&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Browse to select your .bat file for your Windows Task Scheduler task:&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="bat_task" class="alignnone size-full wp-image-2669" src="https://pythonmarketer.files.wordpress.com/2020/03/bat_task.jpg" style="width: 1032px; height: 590px;" /&gt;
&lt;p&gt;&lt;strong&gt;Reading the Tests and Triggering Alerts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Passing tests signal your scripts are running successfully. When things don't work, email alerts of the failure help us respond quickly.&lt;/p&gt;
&lt;p&gt;Let's set another task scheduler job to run &lt;strong&gt;read_test_results.py,&lt;/strong&gt; to run a few minutes after the first job each day. See this &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;example of running Python with Task Scheduler&lt;/a&gt; if you haven't triggered a python script from Task Scheduler before.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Automate pytest with Windows Task Scheduler&lt;/span&gt;
&lt;span class="sd"&gt;Use Task Scheduler run a batch file. The batch file runs pytest and captures our pytest function results to sys.&lt;/span&gt;
&lt;span class="sd"&gt;If a text file contains a failure or error, write the test contents into a folder.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Automated_Testing_Alerts.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;-%b-%y %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Checking for failed tests...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/test_results/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;test_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.txt&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;txt_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;txt_file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FAILURES&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/Users/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Desktop/send_failure_alert/&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;txt_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_Failed_Results_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.txt&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No failed tests found in file:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Setting up Email Alert Notifications on a Box Folder&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The above script checks the test results and creates a file with any failed tests in a different folder. I &lt;a class="reference external" href="https://support.box.com/hc/en-us/articles/360044194073-Manage-Notifications-for-Enterprise-Users"&gt;edited the folder's settings&lt;/a&gt; to email me when a new file is added, thanks to Box notifications. We use &lt;a class="reference external" href="http://www.box.com"&gt;Box&lt;/a&gt; for secure file sharing at my day current day job.&lt;/p&gt;
&lt;p&gt;Alternatively for those without Box, you could use 'ole trusty &lt;a class="reference external" href="https://docs.python.org/3/library/smtplib.html"&gt;smtplib&lt;/a&gt; to send the failure alerts with python. I chose the easier, ready to go option. Remember, &amp;quot;&lt;a class="reference external" href="https://zen-of-python.info/simple-is-better-than-complex.html"&gt;Simple is better than complex&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;Or the &lt;a class="reference external" href="https://github.com/mhammond/pywin32"&gt;pywin32 module&lt;/a&gt; has an interface to Outlook that is very handy. For an example of sending a Windows Outlook email, check the very end of &lt;a class="reference external" href="http://pythonmarketer.wordpress.com/2020/05/06/exploring-windows-command-line-tools-batch-file-automation-and-remote-desktop-connection/"&gt;this post I wrote on &amp;quot;Scripting Windows Like a Pro&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We now have an automated testing system with email monitoring alerts if our csv file date test fails, thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Windows Task Scheduler (two tasks running each day in succession)&lt;/li&gt;
&lt;li&gt;python/pytest&lt;/li&gt;
&lt;li&gt;a Windows .bat file&lt;/li&gt;
&lt;li&gt;Box (or smtplib or pywin32) email alerts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In Summation&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The first task runs a .bat file to run pytest and create a text file with daily automation test results.&lt;/li&gt;
&lt;li&gt;The second task runs a python file. Setting in motion:&lt;/li&gt;
&lt;li&gt;Checking the test result text files, looking for failed tests&lt;/li&gt;
&lt;li&gt;Creating a text file with any failing tests in a Box folder, if found&lt;/li&gt;
&lt;li&gt;Then Box emails me if any test fails.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Final Thoughts on the .bat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was the first time I successfully deployed a Windows batch file. It took me many tries and googling to properly format of the .bat file. They are worth understanding and seem to open up many possibilities on Windows. In this case it was a &amp;quot;glue&amp;quot; piece that allowed me to accomplish my goal, automated testing and alerts for my python scripts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Life is in the journey.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What we learn along the way shapes us. Learning to use these resources together has been a giant step towards writing more reliable python programs. It has improved my knowledge of Windows OS scripting, which can sometimes be a handy substitute or complement to python. Now, time to write more tests. Thanks for reading!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="_wp_link_placeholder"&gt;pytest plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.org/project/pytest-csv/"&gt;pytest-csv&lt;/a&gt;: write test results to a csv with this plugin&lt;/p&gt;
&lt;p&gt;I wrote another post compiling peoples' thoughts on testing &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/05/a-collection-of-software-testing-opinions-for-python-and-beyond/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="automation, programming, software testing, Windows"></category><category term="coding"></category><category term="pytest"></category><category term="python"></category><category term="software development"></category></entry><entry><title>A Collection of Software Testing Opinions for Python and Beyond</title><link href="https://lofipython.com/a-collection-of-software-testing-opinions-for-python-and-beyond.html" rel="alternate"></link><published>2019-12-05T03:06:00-06:00</published><updated>2019-12-05T03:06:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2019-12-05:/a-collection-of-software-testing-opinions-for-python-and-beyond.html</id><summary type="html">&lt;p&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am a beginner to testing my code. I wanted to write about testing to better understand it. While shaping this link fest masquerading as an essay, I collected great ideas from people who are way more experienced than me. You'll find a few of my thoughts, a Pytest example I use to monitor files, ideas for unit testing, property testing, test driven development and many other commonly used software tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An Introductory Rant on Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over several years as a programmer, I've slowly grasped the landscape of testing in software development. After moving beyond my first few tutorials and projects, it seemed very noisy to sort out. Examples provided are usually simple assertions that seem tough to relate to a real use case. It might be easy test the wrong things. Plus, some don't do it at all! The quality of the tests is more important than the quantity. But what makes a quality test? Where's the balance between testing every minute detail of a program and not at all?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yeah. And the worst thing that happens is that you get people that just stop&amp;nbsp;&lt;em&gt;thinking&lt;/em&gt;&amp;nbsp;about what they’re doing. “This is the principle, to always write unit tests, so I’m always going to write unit tests,” and then they’re just not thinking about how they’re spending their time, and they wind up wasting a lot of it.&lt;/p&gt;
&lt;p&gt;Joel Spolsky, &lt;a class="reference external" href="https://www.joelonsoftware.com/2009/01/"&gt;Stack Overflow Podcast #38&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementing software tests is a best practice for maintaining code, but seems ambiguous to someone who has not tested any code before. I guess the best way is to &lt;a class="reference external" href="https://github.com/iodide-project/pyodide/tree/master/test"&gt;read open source projects with test suites&lt;/a&gt;, but those can be tough to find. How do you know &lt;a class="reference external" href="https://docs.python-guide.org/writing/reading/"&gt;a good test suite&lt;/a&gt; when you see it? Maybe the maintainers went rogue and off the deep end with tests. Online, everybody says you should test your code, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Emperor%27s_New_Clothes"&gt;is the emperor wearing any clothes?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a beginner stumbling across articles on testing, these questions were tough to answer. As with most things in programming, figuring out the right question to ask is a challenge in itself. &lt;a class="reference external" href="https://www.codecademy.com/learn/learn-python-3"&gt;Codeacademy&lt;/a&gt; and &lt;a class="reference external" href="https://www.coursera.org/specializations/python"&gt;Coursera&lt;/a&gt; never mentioned anything about writing tests. On the other hand, &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django&lt;/a&gt; includes testing in its tutorial and documentation. Also, most languages come with built-in testing tools. Python has the &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why test at all? First, some solid benefits of software testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;With tests on your code in place, you can implement changes and have confidence the code still works if the tests pass. This gives developers more confidence to iterate and improve an application.&lt;/li&gt;
&lt;li&gt;Detect problems faster. Passing tests are a good indicator that your programs are actually doing what they're supposed to do. If they don't pass, you likely found a bug you might have missed otherwise.&lt;/li&gt;
&lt;li&gt;When you find a bug, you either need to amend your code, or your tests. write a test for that bug and then fix it. Either that, or you need to be amend your tests. You've just improved the quality of your test suite.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://daedtech.com/dont-learn-to-code-learn-to-automate/"&gt;Automation&lt;/a&gt;. If you are writing tests, those tests can be automated. If you are manually checking the results of your program, you're missing a chance to automate those checks away. I haven't applied it yet, but have heard the &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;Tox library&lt;/a&gt; may be useful to automate tests related to Python packaging. For more on automating tests, see this PyCon talk, &lt;a class="reference external" href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;Three Excellent Python Tools to Automate Repetitive Tasks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test Driven Development can decrease the time spent debugging code. This claim sometimes lacks empirical evidence, supporting evidence tends to be anecdotal.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;A good unit test, therefore, is one that helps enforce the contract to which the function is committed.&lt;/p&gt;
&lt;p&gt;If a good unit test breaks, the contract is violated and should be either explicitly amended (by changing the documentation and tests), or fixed (by fixing the code and leaving the tests as is).&lt;/p&gt;
&lt;p&gt;A good unit test is also&amp;nbsp;&lt;em&gt;strict&lt;/em&gt;. It does its best to ensure the output is valid. This helps it catch more bugs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Moshe Zadka, &lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pytest and Unit Testing in Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is where the Python hits the pavement. Unit tests are generally liked, although some prefer property tests or integration tests because they think the scope of unit tests is too narrow. The &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; library is Python's default testing framework. However nowadays, &lt;a class="reference external" href="https://docs.pytest.org/en/latest/contents.html"&gt;pytest&lt;/a&gt; seems to be the preferred unit testing framework for Python. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; is another popular framework I've read about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pytest Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://realpython.com/interview-brian-okken/"&gt;Interview with the author of Pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;Pytest Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://martinheinz.dev/blog/7"&gt;Pytest Features That You Need In Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://love-python.blogspot.com/2017/10/table-driven-unit-test-in-python.html"&gt;Table Driven Unit Testing With pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Pf1ADyUKOrE"&gt;Reproducible Data Analysis in Jupyter, Part 6/10: Unit Testing with PyTest&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
Tests start to lose signal when &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;Mock&lt;/a&gt; becomes routine instead of a reluctant workaround. - Brandon Rhodes, &lt;a class="reference external" href="http://S0No2zSJmks"&gt;When Python Practices Go Wrong&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing in Python \ General Unit Testing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pandas-dev/pandas/wiki/Testing"&gt;Testing Conventions for the Pandas Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kanoki.org/2019/11/18/how-to-create-dataframe-for-testing/"&gt;How to Create a Dataframe for Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing//"&gt;Improve Your Python: Understanding Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kbroman.org/blog/2015/12/07/write-unit-tests/"&gt;Write Unit Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2013/12/08/tdd-unit-tests-and-the-passage-of-time/"&gt;Writing Unit Tests for Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2014/02/19/5-unit-testing-mistakes/"&gt;5 Unit Testing Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/unit-tests-are-not-tests/"&gt;Unit Tests Are Not Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hakibenita.com/the-best-new-feature-in-unittest-you-didnt-know-you-need"&gt;The Best New Feature in unittest You Didn't Know You Need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://orbifold.xyz/pyhamcrest.html"&gt;Precise Unit Tests With pyhamcrest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html"&gt;The Flawed Theory Behind Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.2/intro/tutorial05/"&gt;Django Introduction to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/python-doctests/"&gt;Python Doc Tests&lt;/a&gt; Turn docstrings into tests, unique to Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;I think&amp;nbsp;&lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;hypothesis&lt;/a&gt;&amp;nbsp;is probably underrated—some libraries are hesitant to incorporate it into their testing frameworks, but I think the property-based testing has real potential to catch scenarios humans would have a hard time anticipating, or at least that would take a long time to properly plan for. I find that hypothesis almost always adds a few useful test cases I hadn’t thought of that will require special error handling, for example.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2020/01/13/pydev-of-the-week-tyler-reddy/"&gt;Tyler Reddy&lt;/a&gt;, SciPy Release Manager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Integration \ Property Tests&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.juliobiason.me/books/things-i-learnt/integration-tests/"&gt;Unit Tests Are Good, Integration Tests Are Gooder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/pbt-contracts/"&gt;PROPERTY TESTS + CONTRACTS = INTEGRATION TESTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contract-examples/"&gt;Finding Property Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-Based Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/contracts/"&gt;Contracts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditional, or example-based, testing specifies the behavior of your software by writing examples of it—each test sets up a single concrete scenario and asserts how the software should behave in that scenario. Property-based tests take these concrete scenarios and generalize them by focusing on which features of the scenario are essential and which are allowed to vary. This results in cleaner tests that better specify the software’s behavior—and that better uncover bugs missed by traditional&amp;nbsp;testing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;David Maciver, &lt;a class="reference external" href="https://increment.com/testing/in-praise-of-property-based-testing/"&gt;In Praise of Property-based Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assertions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assertions are generally accepted as welcome additions to your code.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.regehr.org/archives/1091"&gt;Use of Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.squarefree.com/2014/02/03/fuzzers-love-assertions/"&gt;Fuzzers Love Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/assert.html#assert"&gt;pytest Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, the safety and restraints that these code carabiners provide actually give you &lt;strong&gt;more freedom&lt;/strong&gt; to take risks in your coding. If you want to try out some risky feature, refactoring, or external library, you know something is wrong as soon as one of your assertions or tests fail and can undo back to an earlier working state.&lt;/p&gt;
&lt;p&gt;Phillip J. Guo, &lt;a class="reference external" href="http://pgbovine.net/code-carabiners.htm"&gt;Code Carabiners&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eventually, you'll discover the evangelists preaching Test Driven Development. There are certain discussions which polarize us in the software development world, such as the appropriate scenarios to deploy this system of development.&lt;/p&gt;
&lt;p&gt;Opinions vary widely on the merits and appropriate application of TDD. I'm admittedly skeptical but do see the merits of TDD. But which flavor? Where do unit tests and integration tests fit in? How many tests should I write? What exactly should I be testing? &lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;This essay&lt;/a&gt; claims anyone pair programming software with an expected life of 3 or more years should use Test Driven Development.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://henrikwarne.com/2019/09/29/when-tdd-is-not-a-good-fit/"&gt;When TDD is Not a Good Fit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neverworkintheory.org/2016/10/05/test-driven-development.html"&gt;Test Driven Development vs. Test Last Development&lt;/a&gt; [Study]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=DQBf6li1hww"&gt;Why TDD Is Crap&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hillelwayne.com/post/why-tdd-isnt-crap/"&gt;Why TDD Isn't Crap&lt;/a&gt; [Response Blog to Video]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.arp242.net/testing.html"&gt;Testing Isn't Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://georgestocker.com/2019/12/10/is-pair-programming-tdd-worth-it/?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=is-pair-programming-tdd-worth-it"&gt;Is Pair Programming + TDD worth it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Test Driven Development is a tool for continuously evaluating hypotheses.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?time_continue=170&amp;amp;v=UOOuW5tqT8M&amp;amp;feature=emb_logo"&gt;James Shore, Assert(JS) Con 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;General Testing Ideas and Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python-guide.org/writing/tests/"&gt;Testing Your Code&lt;/a&gt;, The Hitchhiker's Guide to Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.liw.fi/posts/2019/06/29/dijkstra_was_only_partially_correct_about_testing/"&gt;The Point of Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://rachelbythebay.com/w/2013/01/30/test/"&gt;Connecting Bug Fixing to Automated Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.jamesshore.com/In-the-News/Thinking-In-Tests.html"&gt;Thinking in Tests&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.drmaciver.com/2015/04/some-empirically-derived-testing-principles/"&gt;Some empirically derived testing principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://danluu.com/tests-v-reason/"&gt;Testing Vs. Informal Reasoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.nelhage.com/2016/12/how-i-test/"&gt;How I Write Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Xu5EhKVZdV8"&gt;Stop Mocking, Start Testing&lt;/a&gt; [YouTube]&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;a class="reference external" href="https://python-guide-es.readthedocs.io/es/latest/writing/reading.html"&gt;Each one of these projects is a paragon of Python coding.&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://increment.com/development/what-its-like-to-be-a-developer-at/"&gt;What it's Like to Be a Developer at...&lt;/a&gt;&amp;nbsp;[Testing Practices Described]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;Hammock Driven Development&lt;/a&gt; [YouTube] Not so much testing focused, but including because I really enjoyed this talk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other common tests types:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unit test: when it fails, it tells you what piece of your code needs to be fixed.&lt;/p&gt;
&lt;p&gt;Integration test: when it fails, it tells you that the pieces of your application are not working together as expected.&lt;/p&gt;
&lt;p&gt;Acceptance test: when it fails, it tells you that the application is not doing what the customer expects it to do.&lt;/p&gt;
&lt;p&gt;Regression test: when it fails, it tells you that the application no longer behaves the way it used to.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/7672511/unit-test-integration-test-regression-test-acceptance-test"&gt;Mathias, Stack Overflow Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Testing maturity level progression:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No tests&lt;/li&gt;
&lt;li&gt;Occasional, slow, unreliable tests&lt;/li&gt;
&lt;li&gt;Semi-comprehensive integration tests&lt;/li&gt;
&lt;li&gt;Fast, comprehensive unit tests comprise the bulk of testing&lt;ul&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Composable subsystem design&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Real-time test feedback (ideally integrated into the editor)&lt;/li&gt;
&lt;li&gt;Tests are extremely reliable or&amp;nbsp;&lt;a class="reference external" href="http://andyfriesen.com/2015/06/17/testable-io-in-haskell.html"&gt;guaranteed reliable by the type system&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;With tooling that tracks the reliability of tests and provides that feedback to authors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fuzzing, statistically automated microbenchmarking, rich testing frameworks for every language and every platform, and a company culture of writing the appropriate number of unit tests and high-value integration tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chadaustin.me/2019/11/two-years-at-dropbox/"&gt;ChadAustin.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I recently wrote my first unit tests with pytest. Below is a script named test_file_date.py. It tests if the day of month of the most recently changed file in a directory matches today's day. To install pytest, enter into command prompt or terminal:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install pytest&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test_file_date.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="c1"&gt;# The dir_query format is for a Windows path with Unix style pattern matching.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_csv_date_equals_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dir_query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Users&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;your_username&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Desktop&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;*.csv&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# specify csv extension and folder&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# get most recent file&lt;/span&gt;
    &lt;span class="n"&gt;file_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;file_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Run the test with pytest by entering:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;pytest test_file_date.py&lt;/tt&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;I write programs for personal productivity and to &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/11/25/automated-python-with-windows-task-scheduler/"&gt;automate processes&lt;/a&gt; at my company. The scope of problems my code solves has grown with my programming ability. I'm now reaching the point where I can apply tests to my advantage. However, sometimes I'll write a quick-hitter script for which I can't justify writing tests. Beyond those cases, testing can help if you pick the right style for your project. More so for recurring, automated processes.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It feels pretty cool when your tests run and you know with more certainty whether a part of your program is getting the job done or not. After setting up my first test with pytest, I have leveled up to novice tester, instead of blissfully not knowing what I don't know about testing. That's a step in the right direction.&lt;/p&gt;
</content><category term="coding, productivity, programming, python, software testing"></category><category term="pytest"></category><category term="software development"></category><category term="test driven development"></category></entry></feed>