<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lo-Fi Python - learning</title><link href="https://lofipython.com/" rel="alternate"></link><link href="https://lofipython.com/feeds/learning.tag.atom.xml" rel="self"></link><id>https://lofipython.com/</id><updated>2022-07-06T12:49:00-05:00</updated><entry><title>The Things They Don't Tell You About Ampersands and XML</title><link href="https://lofipython.com/the-things-they-dont-tell-you-about-ampersands-and-xml.html" rel="alternate"></link><published>2022-07-06T12:49:00-05:00</published><updated>2022-07-06T12:49:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-07-06:/the-things-they-dont-tell-you-about-ampersands-and-xml.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;In an XML document, you need to escape any ampersands in your text as&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;I began a new coding project. Sure, there's documentation for the API that solves my problem. I find out it uses XML. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;Extensible Markup Language&lt;/a&gt;, a classic API format. Cool. I craft a beautiful script that works at first. Or so it seems!&lt;/p&gt;
&lt;p&gt;Later on, I realize it doesn't work as well as I believed. It turns out, if I want a server to accept my XML document, &lt;a class="reference external" href="https://www.ibm.com/docs/en/was-liberty/base?topic=manually-xml-escape-characters"&gt;escaping certain characters&lt;/a&gt; might be required. The documentation didn't mention this. It was my first time using XML, how would I know?&lt;/p&gt;
&lt;p&gt;I noticed a script only worked for a handful of requests. It failed for most, returning a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"&gt;400 status code&lt;/a&gt;. Suspecting the issue was likely in my payload, I studied the data of the request bodies that failed compared to the others that succeeded. All of the payload bodies that failed contained text with an ampersand.&lt;/p&gt;
&lt;p&gt;Suspecting it might be an XML + ampersand related issue, I googled &lt;a class="reference external" href="https://stackoverflow.com/questions/1328538/how-do-i-escape-ampersands-in-xml-so-they-are-rendered-as-entities-in-html"&gt;this Stack Overflow post&lt;/a&gt; which explains the ampersand escaping situation. There are a handful of characters that must be escaped. Otherwise, you might not be able to connect to the server.&lt;/p&gt;
&lt;p&gt;These are the things they often don't tell you. Those little details you must sometimes realize for yourself, unless someone bothers to mention it or write it down. Now you know something that cost me an hour or two of tinkering to realize!&lt;/p&gt;
&lt;div class="wp-image-7060 figure"&gt;
&lt;img alt="`Image Source &amp;lt;https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml&amp;gt;`__" src="https://pythonmarketer.files.wordpress.com/2022/07/xml-example-2.png?w=453" style="width: 453px; height: 521px;" /&gt;
&lt;/div&gt;
&lt;p class="center"&gt;&lt;a class="reference external" href="https://github.com/sichkar-valentyn/XML_files_in_Python/blob/master/example.xml"&gt;Image Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Want to read more on HTTP? Check out my guide on &lt;a class="reference external" href="https://lofipython.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;making HTTP requests with Python&lt;/a&gt; to read more about HTTP requests.&lt;/p&gt;
</content><category term="APIs, coding, Google, programming"></category><category term="data"></category><category term="learning"></category><category term="problem solving"></category><category term="XML"></category></entry><entry><title>Hammock-Driven Development Notes</title><link href="https://lofipython.com/hammock-driven-development-talk-notes.html" rel="alternate"></link><published>2022-06-24T11:39:00-05:00</published><updated>2022-06-24T11:39:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2022-06-24:/hammock-driven-development-talk-notes.html</id><summary type="html">&lt;p&gt;Occasionally you will find a video or talk that connects or resonates with you in a great way. Rich Hickey's &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;&amp;quot;Hammock Driven Development&amp;quot;&lt;/a&gt;, a self-described &amp;quot;rant&amp;quot; is packed with wisdom. I keep coming back to re-watch and today, I have written down some key points from this amazing rant!&lt;/p&gt;
&lt;div class="section" id="key-ideas"&gt;
&lt;h2&gt;Key …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Occasionally you will find a video or talk that connects or resonates with you in a great way. Rich Hickey's &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;&amp;quot;Hammock Driven Development&amp;quot;&lt;/a&gt;, a self-described &amp;quot;rant&amp;quot; is packed with wisdom. I keep coming back to re-watch and today, I have written down some key points from this amazing rant!&lt;/p&gt;
&lt;div class="section" id="key-ideas"&gt;
&lt;h2&gt;Key Ideas&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Take more time to think through your problem.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When was the last time you...&lt;/p&gt;
&lt;p&gt;thought about something for a whole day?&lt;/p&gt;
&lt;p&gt;thought about something for a whole month or year?&lt;/p&gt;
&lt;p&gt;Hammock Driven Development, &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;https://www.youtube.com/watch?v=f84n5oFoZBc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;On Bugs&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bugs are cheaper to fix in development.&lt;/li&gt;
&lt;li&gt;Least expensive to avoid in design&lt;/li&gt;
&lt;li&gt;Most expensive in to fix in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis &amp;amp; Design, Simplified&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identify problem trying to solve.&lt;/li&gt;
&lt;li&gt;Assess whether it solves that problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Problem Solving&lt;/strong&gt;&lt;/p&gt;
&lt;div class="wp-image-7029 figure"&gt;
&lt;img alt="solving problems by Rich Hickey" src="https://pythonmarketer.files.wordpress.com/2022/06/solve-problems-1.png?w=730" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Problem Solving (cont.)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State the problem out loud.&lt;/li&gt;
&lt;li&gt;Understand the problem's facts, context and constraints.&lt;/li&gt;
&lt;li&gt;What don't you know?&lt;/li&gt;
&lt;li&gt;Find problems in your solution.&lt;/li&gt;
&lt;li&gt;Write it all down.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;More Input, Better Output&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read in and around your space.&lt;/li&gt;
&lt;li&gt;Look critically at other solutions.&lt;/li&gt;
&lt;li&gt;You can't connect things you don't know about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On Focus&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On the hammock, no one knows if you're sleeping and they don't bother you because of this.&lt;/li&gt;
&lt;li&gt;Computers are distracting.&lt;/li&gt;
&lt;li&gt;Let loved ones know you are going to be &amp;quot;gone&amp;quot;, focusing deeply for some time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Waking Mind vs Background Mind&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The waking mind is good at critical thinking.&lt;/li&gt;
&lt;li&gt;Use waking time to assign tasks to background mind.&lt;/li&gt;
&lt;li&gt;The background mind is good at making connections and good at strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sleep According to Scientific American:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The brain processes info learned while sleeping.&lt;/li&gt;
&lt;li&gt;Sleep makes memories stonger and weeds out irrelevant details.&lt;/li&gt;
&lt;li&gt;Our brain finds hidden relations among memories to solve waking problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Closing Ideas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write the proposed solution down. Hammock time is important &amp;quot;mind's eye time&amp;quot;. We switch from &amp;quot;input mode&amp;quot; to &amp;quot;recall mode&amp;quot; during hammock time. Wait overnight, or sometimes months, to think about your problem, sleep sober for best results! Eventually coding is required, and your feedback loop is important, but &amp;quot;don't lean on it too much&amp;quot;. You will be wrong, facts and requirements will change. Mistakes happen. That's fine, do not be afraid of being wrong. /rant&lt;/p&gt;
&lt;p&gt;The notes in this blog post are paraphrased from &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;this rant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding, programming, talks"></category><category term="learning"></category><category term="problem solving"></category><category term="software"></category></entry><entry><title>So You Want to Learn Python?</title><link href="https://lofipython.com/so-you-want-to-learn-python.html" rel="alternate"></link><published>2021-02-14T14:05:00-06:00</published><updated>2021-02-14T14:05:00-06:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2021-02-14:/so-you-want-to-learn-python.html</id><summary type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here are a few Python concepts for beginners to explore if you are starting out with the language. In this post, I'll highlight my favorite &amp;quot;must-learn&amp;quot; tools to master that come with your Python installation. Understanding them will make you a more capable Python programmer and problem solver.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#built-in-funcs"&gt;Built-in Functions&lt;/a&gt;. They are awesome! You can do so much with these. Learn to apply them. You won't regret it! See also: &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2021/02/17/an-intro-to-pythons-built-in-functions/"&gt;An Intro to Python's Built-in Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#string-methods"&gt;String methods&lt;/a&gt;. Want to capitalize, lowercase or replace characters in text? How about checking if a &lt;a class="reference external" href="https://docs.python.org/3/library/stdtypes.html#str.isdigit"&gt;str.isdigit()&lt;/a&gt;? Get to know Python's string methods. I use these frequently. Also, the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.isdigit.html"&gt;pandas string method implementations&lt;/a&gt; are great for applying them to tabular data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#documentation-strings"&gt;Docstrings&lt;/a&gt;. I truly enjoy adding docstrings at the beginning of my functions. They add clarity and ease of understanding.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=C4Kc8xzcA68&amp;amp;ab_channel=EugeneYarmash"&gt;The Mighty Dictionary&lt;/a&gt;. Lists and tuples are useful too, but &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries"&gt;dictionaries&lt;/a&gt; are so handy with the ability to store and access key-value pairs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List Comprehensions&lt;/a&gt;. These allow you to perform transformations on lists in one line of code! I love the feeling when I apply a list comprehension that is concise, yet readable.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;. These can be used to apply a function &amp;quot;on the fly&amp;quot;. I love their succinctness. It took me a few years to become comfortable with them. Sometimes it makes sense to use a lambda expression instead of a regular function to transform data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#date-objects"&gt;Date Objects&lt;/a&gt;. Wielding date objects and formatting them to your needs is a pivotal Python skill. Once you have it down, it unlocks a lot of automation and scripting abilities when combined with libraries like &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html"&gt;pathlib&lt;/a&gt;, &lt;a class="reference external" href="https://docs.python.org/3/library/os.html?highlight=os#module-os"&gt;os&lt;/a&gt; or &lt;a class="reference external" href="https://docs.python.org/3/library/glob.html?highlight=glob#module-glob"&gt;glob&lt;/a&gt; for reading file metadata and then executing an action based on the date of the file, for example. I use &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#datetime.date.today"&gt;date.today()&lt;/a&gt; a lot when I want to fetch today's date and &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#available-types"&gt;timedelta&lt;/a&gt; to compare two dates. The datetime module is your friend, dive in. Must know for custom date formatting: strftime()&amp;nbsp;and&amp;nbsp;strptime(). See also: &lt;a class="reference external" href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes"&gt;Time Format Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For tabular data, I often use &lt;tt class="docutils literal"&gt;pd.to_datetime()&lt;/tt&gt; to convert a series of strings to datetime objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install pandas with this command: python -m pip install pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USA Born&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1776-07-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WTC Bombings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2001-09-11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Biden Inauguration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2021-01-20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# convert a pandas series of strings to datetime objects&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Just the tip of the iceberg...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The amazing part of Python is that its community has developed an astonishing plethora of external libraries which can be &lt;a class="reference external" href="https://lofipython.com/how-to-python-pip-install-new-libraries/"&gt;installed by pip&lt;/a&gt;. Usually I'll learn how to use new libraries after googling to find a well-written README on Github or helpful documentation. The language comes with an impressive line-up of baked-in &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;tools and libraries&lt;/a&gt; way beyond what I've mentioned here. But I think this is a great start. Get to know these common Python language features and you'll be surprised how much you can do!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Comprehensive Python Learning Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;How long did it take you to learn Python?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dabeaz-course/practical-python"&gt;Practical Python Programming&lt;/a&gt; (free course)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://google.github.io/styleguide/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/satwikkansal/wtfpython"&gt;What the f*ck Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pysanity.netlify.app/#testing"&gt;PySanity&lt;/a&gt;&lt;/p&gt;
</content><category term="programming"></category><category term="learning"></category><category term="python"></category><category term="skills"></category><category term="technology"></category></entry><entry><title>Pondering Join Algorithms</title><link href="https://lofipython.com/join-algorithms.html" rel="alternate"></link><published>2020-08-09T18:24:00-05:00</published><updated>2020-08-09T18:24:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-08-09:/join-algorithms.html</id><summary type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Truly enjoying this &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;Intro to Database Systems course&lt;/a&gt; from Carnegie Mellon University. Some really great breakdowns of common join algorithms in this lecture. Here are my notes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=nUwT7PEQ49o&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=11"&gt;Lecture 11- Join Algorithms&lt;/a&gt;&lt;strong&gt;(CMU Databases Systems / Fall 2019)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo, Carnegie Mellon Database Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="Join Algorithms" class="alignnone size-full wp-image-4118" src="https://pythonmarketer.files.wordpress.com/2020/08/join-algorithms.png" style="width: 747px; height: 404px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table Positioning for a Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, your smaller table should be the &amp;quot;left&amp;quot; table when joining two tables.&amp;quot;... Professor demonstrates better performance by making the smaller table the &amp;quot;outer&amp;quot; table in a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Block Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://dev.mysql.com/doc/refman/5.7/en/nested-loop-joins.html#:~:text=A%20Block%20Nested%2DLoop%20(BNL,inner%20loops%20must%20be%20read.&amp;amp;text=The%20join_buffer_size%20system%20variable%20determines,used%20to%20process%20a%20query."&gt;mysql example&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The brute force approach&amp;quot;&lt;/li&gt;
&lt;li&gt;If you have enough memory to hold a large table, a good option for joining.&lt;/li&gt;
&lt;li&gt;Always pick the smaller table as the outer table.&lt;/li&gt;
&lt;li&gt;Buffer as much of your outer table in memory as possible to reduce redundant I/O.&lt;/li&gt;
&lt;li&gt;Loop over the inner table or use an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Index Nested Loop Join [&lt;/strong&gt;&lt;a class="reference external" href="https://www.cs.carleton.edu/faculty/dmusicant/cs347f03/proj3/"&gt;CS Course definition&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If indexes are available, or you could create an index to use for a join.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sort-Merge Join [&lt;/strong&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sort-merge_join"&gt;wikipedia&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Useful if one or both tables are sorted on a join key. Maximize sequential I/O.&lt;/p&gt;
&lt;img alt="Sort - Merge Join" class="alignnone size-full wp-image-4121" src="https://pythonmarketer.files.wordpress.com/2020/08/sort-merge-join-1.png" style="width: 1731px; height: 855px;" /&gt;
&lt;p&gt;&lt;em&gt;screenshot from lecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash Join&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Best performance. For large datasets.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Phase #1 Build (Hash Table)&lt;/li&gt;
&lt;li&gt;Phase #2 Probe&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom Filter&lt;/a&gt; set operations for probe phase optimization.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;insert a key&lt;/li&gt;
&lt;li&gt;lookup a key&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading on Bloom Filters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://onatm.dev/2020/08/10/let-s-implement-a-bloom-filter/"&gt;Let's implement a Bloom Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gopiandcode.uk/logs/log-bloomfilters-debunked.html"&gt;Bloom Filters Debunked&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Grace Hash Join&lt;/strong&gt; [&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_join#Grace_hash_join"&gt;wikipedia&lt;/a&gt;]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Do hash joins when things don't fit in memory.&amp;quot;&lt;/li&gt;
&lt;li&gt;Use a hash table for each table. Break the tables into buckets then do a nested loop join on each bucket. If the buckets do not fit in memory, use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_partitioning#:~:text=Recursive%20partitioning%20is%20a%20statistical,on%20several%20dichotomous%20independent%20variables."&gt;recursive partitioning&lt;/a&gt;. Then everything fits in memory for the join.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Split outer relation into partitions based on the hash key.&amp;quot;&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo on Hash Join algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashing is almost always better than sorting for operator execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;No join algorithm works well in all scenarios.&amp;quot;&lt;/p&gt;
&lt;p&gt;-Prof. Andy Pavlo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://webmention.rocks/update/1"&gt;webmention&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://webmention.rocks/update/1/part/2"&gt;webmention&lt;/a&gt;&lt;/p&gt;
</content><category term="coding, data, Databases, programming"></category><category term="algorithms"></category><category term="computer science"></category><category term="joins"></category><category term="learning"></category><category term="study"></category><category term="technology"></category></entry><entry><title>Characterizing Database Workloads &amp; Storage Models</title><link href="https://lofipython.com/choosing-database-storage-models-and-workloads-that-mesh.html" rel="alternate"></link><published>2020-06-27T13:22:00-05:00</published><updated>2020-06-27T13:22:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-06-27:/choosing-database-storage-models-and-workloads-that-mesh.html</id><summary type="html">&lt;p&gt;Thank you &lt;a class="reference external" href="https://db.cs.cmu.edu/"&gt;Carnegie Mellon Database Group&lt;/a&gt; for putting this online! These are my notes from watching on YouTube.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carnegie Mellon Databases Storage II, Lecture 4&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo [&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;Watch on YouTube&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-problem-and-solution"&gt;
&lt;h2&gt;The Problem and Solution&lt;/h2&gt;
&lt;p&gt;How should the DBMS represent the database in storage files on disk? Solve it by …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Thank you &lt;a class="reference external" href="https://db.cs.cmu.edu/"&gt;Carnegie Mellon Database Group&lt;/a&gt; for putting this online! These are my notes from watching on YouTube.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carnegie Mellon Databases Storage II, Lecture 4&lt;/p&gt;
&lt;p&gt;Prof. Andy Pavlo [&lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;Watch on YouTube&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-problem-and-solution"&gt;
&lt;h2&gt;The Problem and Solution&lt;/h2&gt;
&lt;p&gt;How should the DBMS represent the database in storage files on disk? Solve it by choosing the right &lt;em&gt;storage model&lt;/em&gt; for your target &lt;em&gt;workload&lt;/em&gt;. The right strategy varies if you are reading data, writing data and with how many joins you are performing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="workload-characterization"&gt;
&lt;h2&gt;Workload Characterization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;OLTP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_transaction_processing"&gt;Online Transaction Processing&lt;/a&gt;): &amp;quot;Simple queries with lots of writes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OLAP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Online_analytical_processing"&gt;Online Analytical Processing&lt;/a&gt;): &amp;quot;Read only queries. Lots of joins. Doing a lot of reads, but they're more complex.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTAP&lt;/strong&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing"&gt;Hybrid Transactional Analytical Processing&lt;/a&gt;): &amp;quot;is trying to do both of them. You still want to ingest new data, but analyze it as it comes in. It's used for companies making decisions on the fly as people are browsing websites, like internet advertising companies.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="screenshot-2020-06-27-at-11-56-10-am"&gt;
&lt;h2&gt;&lt;img alt="Screenshot 2020-06-27 at 11.56.10 AM" class="alignnone size-full wp-image-3897" src="https://pythonmarketer.files.wordpress.com/2020/06/screenshot-2020-06-27-at-11.56.10-am.png" style="width: 1920px; height: 1080px;" /&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="storage-models"&gt;
&lt;h2&gt;Storage Models&lt;/h2&gt;
&lt;p&gt;screenshots from the &lt;a class="reference external" href="https://www.youtube.com/watch?v=YWRYEXNy6IE&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi&amp;amp;index=4"&gt;lecture&lt;/a&gt;&lt;/p&gt;
&lt;img alt="n-ary model" class="alignnone size-full wp-image-3918" src="https://pythonmarketer.files.wordpress.com/2020/06/n-ary-model.png" style="width: 692px; height: 360px;" /&gt;
&lt;p&gt;N-ary used to be the dominant model until the '80s.&lt;/p&gt;
&lt;img alt="DSM model" class="alignnone size-full wp-image-3917" src="https://pythonmarketer.files.wordpress.com/2020/06/dsm-model-1.png" style="width: 938px; height: 396px;" /&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading:&lt;/strong&gt; &lt;a class="reference external" href="https://www.allthingsdistributed.com/2013/09/column-oriented-databases.html"&gt;All Things Distributed&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="column-store-vs-row-store-rdbms"&gt;
&lt;h2&gt;Column Store Vs. Row Store RDBMS&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/"&gt;Row-oriented DBMS&lt;/a&gt;&lt;strong&gt;(Row Store)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PostgreSQL, MySQL&lt;/li&gt;
&lt;li&gt;Row Store = use OLTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Column-oriented_DBMS"&gt;Column-oriented DBMS&lt;/a&gt;&lt;strong&gt;(Column Store)&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Red Shift, BigQuery&lt;/li&gt;
&lt;li&gt;Column Store = use OLAP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If types are consistent, you can compress data into single column store.&lt;/p&gt;
&lt;/div&gt;
</content><category term="data, Databases, education, performance"></category><category term="Carnegie Mellon"></category><category term="database storage"></category><category term="learning"></category><category term="lectures notes"></category></entry><entry><title>Free Computer Science Courses and Talks To Absorb</title><link href="https://lofipython.com/my-favorite-free-educational-courses-and-talks-to-absorb.html" rel="alternate"></link><published>2020-06-23T03:35:00-05:00</published><updated>2020-06-23T03:35:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-06-23:/my-favorite-free-educational-courses-and-talks-to-absorb.html</id><summary type="html">&lt;p&gt;Below you'll find a balanced curriculum of juicy courses and videos that are available for free on the internet. I'll definitely be diving into most of these in the 2nd half of 2020. Stay curious!&lt;/p&gt;
&lt;div class="section" id="university-cs-courses-for-free"&gt;
&lt;h2&gt;University CS Courses For Free&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLhQjrBD2T382hIW-IsOVuXP1uMzEvmcE5"&gt;CS50's Web Programming with Python and JavaScript&lt;/a&gt; | Harvard University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://archive.org/details/ucberkeley_webcast_gJJeUFyuvvg"&gt;CS …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Below you'll find a balanced curriculum of juicy courses and videos that are available for free on the internet. I'll definitely be diving into most of these in the 2nd half of 2020. Stay curious!&lt;/p&gt;
&lt;div class="section" id="university-cs-courses-for-free"&gt;
&lt;h2&gt;University CS Courses For Free&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLhQjrBD2T382hIW-IsOVuXP1uMzEvmcE5"&gt;CS50's Web Programming with Python and JavaScript&lt;/a&gt; | Harvard University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://archive.org/details/ucberkeley_webcast_gJJeUFyuvvg"&gt;CS 61-C Great Ideas in Computer Architecture (Machine Structures)&lt;/a&gt;, Spring 2015 | UC Berkeley&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cs109.github.io/2015/"&gt;CS 109: Data Science&lt;/a&gt;, 2015 | Harvard University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://uppsala.instructure.com/courses/28112"&gt;Mathematical Modeling of Football&lt;/a&gt;, Fall 2020 | Uppsala Universitet&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=hry_qqXLej8&amp;amp;list=PLN_mP1uWIrL6d_brjVN3qgDBxoYEAE-hG&amp;amp;index=2"&gt;CS 162 - Operating Systems and Systems Programming&lt;/a&gt;, Fall 2013 | UC Berkeley&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=oeYBdghaIjc&amp;amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi"&gt;15-445/645 Intro to Database Systems&lt;/a&gt;, Fall 2019&amp;nbsp;| Carnegie Mellon University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=SdW5RKUboKc&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw&amp;amp;index=25&amp;amp;t=0s"&gt;15-721 Advanced Database Systems&lt;/a&gt;, Spring 2020 | Carnegie Mellon University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://missing.csail.mit.edu/2020/"&gt;Missing Semester: Shell Tools &amp;amp; Scripting&lt;/a&gt;, Spring 2020 | MIT&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB"&gt;6.824 Distributed Systems&lt;/a&gt;, Spring 2020 | MIT&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLOtl7M3yp-DX32N0fVIyvn7ipWKNGmwpp"&gt;CSE 373 - Analysis of Algorithms&lt;/a&gt;, 2016 | Stony Brook University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=9Btjg3I5-Wg"&gt;CS 4150 Algorithms&lt;/a&gt;, Spring 2020 | University of Utah&lt;/p&gt;
&lt;p&gt;CS 241 System Programming, Spring 2020 [&lt;a class="reference external" href="http://cs241.cs.illinois.edu/coursebook/index.html"&gt;course wiki&lt;/a&gt;] |&amp;nbsp;University of Illinois&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/"&gt;CS 6120: Advanced Compilers: The Self-Guided Online Course&lt;/a&gt; | Cornell University&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="intriguing-coursera-classes"&gt;
&lt;h2&gt;Intriguing Coursera Classes&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/learn/devops-culture-and-mindset#syllabus"&gt;DevOps Culture and Mindset&lt;/a&gt; | UC-Davis&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/specializations/data-structures-algorithms"&gt;Computer Science: Algorithms, Theory, and Machines&lt;/a&gt; | Princeton University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/learn/excel-data-analysis-fundamentals?courseSlug=excel-data-analysis-fundamentals&amp;amp;showOnboardingModal=check"&gt;Excel Fundamentals for Data Analysis&lt;/a&gt; | Macquarie University&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.coursera.org/projects/data-science-streamlit-python"&gt;Build a Data Science Web App with Streamlit and Python&lt;/a&gt; | Guided Project [$10]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="programming-talks-tutorials"&gt;
&lt;h2&gt;Programming Talks &amp;amp; Tutorials&lt;/h2&gt;
&lt;p&gt;These programming talks piqued my interest, highly recommended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Beazley | Built in Super Heroes [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=lyDLAutA88s&amp;amp;index=4&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mr. Beazley shows how to use pure Python built-in functions to clean and analyze the City of Chicago's food inspection data. No pandas in this talk, behold the power of the Python standard library. Spoiler: Don't eat at O'hare airport. He also has a new course, available for free:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Beazley | Practical Python Programming&amp;nbsp;[&lt;/strong&gt;&lt;a class="reference external" href="https://dabeaz-course.github.io/practical-python/"&gt;Course&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
This is not a course for absolute beginners on how to program a computer. It is assumed that you already have programming experience in some other programming language or Python itself.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sebastian Witowski | Modern Python Developer's Toolkit [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=WkUBx3g2QfQ"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An overview covering editing tools and setup from &lt;a class="reference external" href="https://www.youtube.com/channel/UCMjMBMGt0WJQLeluw6qNJuA/videos"&gt;PyCon 2020&lt;/a&gt;. Honing your development environment is crucial to being an efficent coder. This example uses VS Code. I use Atom as my primary text editor. The most recommended linters are usually pylint, flake8 or pyflakes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jake VanderPlas | Reproducible Data Analysis in Jupyter [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=_ZEWDGpM-vM&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw&amp;amp;index=138"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This 10 video series is a must-watch for aspiring data scientists and analysts if you use Python. Includes a git workflow demonstration, working in Jupyter Notebooks and many other essentials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rich Hickey | Hammock Driven Development [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, the best thing we can do is step away from the keyboard. I really enjoy this speaker's communication style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eric J. Ma | Demystifying Deep Learning for Data Scientists [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=gGu3pPC_fBM&amp;amp;feature=youtu.be"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tutorial-style Pythonmachine learning walk-through from PyCon 2020.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julie Michelman | Pandas, Pipelines, and Custom Transformers [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=BFaadIqWlAg&amp;amp;index=6&amp;amp;list=PLGVZCDnMOq0rxoq9Nx0B4tqtr891vaCn7"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This video shows a deep dive into the world of sci-kit learn and machine learning. PyCon and PyData videos usually include some cutting edge tech. Machine learning moves so fast there are always new tools surfacing. But certain libraries like sci-kit learn, TensorFlow, keras and PyTorch have been constant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ville Tuuls | A Billion Rows per Second: Metaprogramming Python for Big Data [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?time_continue=1745&amp;amp;v=rXj5nayS7Yg"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make your data dense by tactically re-arranging into efficient structures and compiling it down to lower-level bytes. This details a successful Python / Postgres / Numba / Multicorn big data implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="video-course-grab-bag"&gt;
&lt;h2&gt;Video &amp;amp; Course Grab Bag&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Discover the role of Python in space exploration [&lt;/strong&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/learn/paths/introduction-python-space-exploration-nasa/"&gt;course&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft and NASA made a free course about Python in space! 🤓&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ted Nelson | Computers for Cynics [&lt;/strong&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=hZ3gmh-d9oI&amp;amp;list=LLzDUyPGFtbvCCztZLs8-rfw&amp;amp;index=137&amp;amp;t=0s"&gt;YouTube&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I find these videos to be an entertaining, thought-provoking take on software history. Recommended from Joe Armstrong, the creator of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Erlang_(programming_language)"&gt;Erlang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GNU Typist [&lt;/strong&gt;&lt;a class="reference external" href="https://www.gnu.org/savannah-checkouts/gnu/gtypist/gtypist.html"&gt;Tutorial&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may be able to teach yourself to type more efficiently with this tutorial. I definitely need to do this. It's worth mentioning, per &lt;a class="reference external" href="https://www.youtube.com/watch?v=f84n5oFoZBc"&gt;Rich Hickey:&lt;/a&gt; with a proper design phase, you'll spend less time typing in the first place!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extra Credit: Python Wikipedia Library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;import wikipedia [&lt;a class="reference external" href="https://github.com/goldsmith/Wikipedia"&gt;GitHub&lt;/a&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supplementary-resources"&gt;
&lt;h2&gt;Supplementary Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://teachyourselfcs.com/"&gt;teachyourselfcs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/chiphuyen/python-is-cool/blob/master/cool-python-tips.ipynb"&gt;Cool Python Tips Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md"&gt;Google's Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gto76/python-cheatsheet"&gt;Python Cheat Sheet (Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nocomplexity.com/machine-learning-resources/"&gt;Free and Open Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pages.dataiku.com/hubfs/PDF/Whitepaper/Importance_of_AutoML-for-Augmented-Analytics.pdf"&gt;AutoML and The Rise of the Citizen Data Scientist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1GOO4s1NcxCR8a44F0XnsErz5rYDxNbHAHznu4pJMRkw/edit#gid=0"&gt;Data Engineering Study Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jlevy/the-art-of-command-line"&gt;The Art of Command Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ossu/computer-science#advanced-cs"&gt;Open Source University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://drive.google.com/drive/u/0/folders/1ZS57_40tWuIB7tV4APVMmTZ-5PXDwX9w"&gt;Data Training Materials from the New York Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.freecodecamp.org/"&gt;freecodecamp.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="coding, data, Databases, education, programming, python, software"></category><category term="free education"></category><category term="harvard"></category><category term="knowledge"></category><category term="learning"></category><category term="MIT"></category><category term="university"></category></entry><entry><title>Reflections on 5 Years of Solving Problems with Python</title><link href="https://lofipython.com/reflections-on-5-years-of-solving-problems-with-python.html" rel="alternate"></link><published>2020-04-11T17:15:00-05:00</published><updated>2020-04-11T17:15:00-05:00</updated><author><name>pythonmarketer</name></author><id>tag:lofipython.com,2020-04-11:/reflections-on-5-years-of-solving-problems-with-python.html</id><summary type="html">&lt;p&gt;Prior to learning Python, I had no programming experience. I worked in marketing for a book publisher and did not perform well at my job. It was not a good fit. They eventually fired me. As my previous job unraveled, I discovered Python and the Coursera course, &lt;a class="reference external" href="https://www.coursera.org/learn/python?utm_medium=email&amp;amp;utm_source=other&amp;amp;utm_campaign=opencourse.course_complete.python.%7Eopencourse.course_complete.7A1yFTaREeWWBQrVFXqd1w."&gt;Programming for Everybody …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Prior to learning Python, I had no programming experience. I worked in marketing for a book publisher and did not perform well at my job. It was not a good fit. They eventually fired me. As my previous job unraveled, I discovered Python and the Coursera course, &lt;a class="reference external" href="https://www.coursera.org/learn/python?utm_medium=email&amp;amp;utm_source=other&amp;amp;utm_campaign=opencourse.course_complete.python.%7Eopencourse.course_complete.7A1yFTaREeWWBQrVFXqd1w."&gt;Programming for Everybody (Getting Started with Python)&lt;/a&gt;. Fortunately, that course jump-started me onto a path of learning and reading each day. My aim was to make my own website, a &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2016/05/25/askkevinparker-com-my-first-web-app-other-notes/"&gt;goal that I accomplished&lt;/a&gt;. I needed to know how the sausage was made.&lt;/p&gt;
&lt;p&gt;Looking back from 2020, I can safely say Python changed my life. Because of it, I now have a fulfilling marketingdata-oriented career. I'm also grateful for the financial stability that came with it. I love to learn about the language and continue to improve my abilities to solve problems with new tools, not only Python.&lt;/p&gt;
&lt;p&gt;Below are pieces of wisdom picked up from my experiences. They are the result of many hours of study, reading, mistakes, luck, toil and eventual glory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These are thought-provoking adages and guidelines, not absolute truths in all cases.&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Developing a habit of learning pays off over time, no matter what the subject is. It is an investment in yourself that compounds.&lt;/li&gt;
&lt;li&gt;Follow your own curiosity. It's less important to compare what you know to others. Compare what you know today to what you knew yesterday. Don't worry about &lt;a class="reference external" href="https://nedbatchelder.com/blog/202003/how_long_did_it_take_you_to_learn_python.html"&gt;how long it takes to learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Watch educational or technical conference talks on sites like &lt;a class="reference external" href="https://www.youtube.com/channel/UCMjMBMGt0WJQLeluw6qNJuA/videos"&gt;YouTube&lt;/a&gt; or InfoQ. &lt;a class="reference external" href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Rich Hickey,&lt;/a&gt; &lt;a class="reference external" href="https://rhodesmill.org/brandon/talks/#selenium-at-scale"&gt;Brandon Rhodes&lt;/a&gt; and &lt;a class="reference external" href="https://www.youtube.com/watch?v=lyDLAutA88s"&gt;David Beazley&lt;/a&gt; are some of my favorite speakers. Watch talks from all languages, not just Python. Often the concepts apply to any programming language.&lt;/li&gt;
&lt;li&gt;Use an RSS reader. Anytime you find a good blog, subscribe by RSS or email to get new posts. I use the &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en"&gt;Feeder Chrome extension&lt;/a&gt;\Android app.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; contains a lot of wisdom. I like the concept of &lt;tt class="docutils literal"&gt;Explicit is better than implicit.&lt;/tt&gt; This implies declaring your actions in written or oral fashion, providing additional context. Consider favoring easier to read solutions over clever one-liners. For example:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"&gt;List comprehensions&lt;/a&gt; are useful and &amp;quot;pythonic&amp;quot;, use them! But sometimes it's easier to use a for loop to hash out an idea. (Contrarily, avoiding the &lt;a class="reference external" href="https://www.youtube.com/watch?v=W-lZttZhsUY"&gt;Initialize Then Modify&lt;/a&gt; pattern benefits those comfortable with comprehensions.)&lt;/li&gt;
&lt;li&gt;Explicitly using &lt;a class="reference external" href="https://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;keyword arguments&lt;/a&gt; versus positional arguments is another way to make your code easier to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can you explain the solution simply? If not, try to clarify your understanding or maybe there's a simpler way. In Python, there are often several ways to accomplish the same goal. But keep in mind the Zen of Python: &lt;tt class="docutils literal"&gt;There should be &lt;span class="pre"&gt;one--&lt;/span&gt; and preferably only one &lt;span class="pre"&gt;--obvious&lt;/span&gt; way to do it. Although that way may not be obvious at first unless you're Dutch.&lt;/tt&gt; Look for the obvious way. An example of this is &lt;a class="reference external" href="https://www.blog.pythonlibrary.org/2020/04/07/python-101-working-with-strings/"&gt;string formatting.&lt;/a&gt; I've heard f-strings are the hot new way to do this now.&lt;/li&gt;
&lt;li&gt;Don't be afraid to change course if things don't feel right. Ask yourself while coding, &amp;quot;Does this feel efficient?&amp;quot; Recently I was trying to format a json string so I approached it like I had in the past, by &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/05/18/how-to-make-json-requests-with-python/"&gt;exporting the request from Postman and formatting the json string&lt;/a&gt; with python's &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html?highlight=format#format"&gt;format() built-in&lt;/a&gt;. But this time, the curly braces were confusing me, I was struggling and it wasn't working. I googled and around and saw python's &lt;a class="reference external" href="https://docs.python.org/3/library/json.html?highlight=json#module-json"&gt;json module&lt;/a&gt; and &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html"&gt;df.to_json()&lt;/a&gt; in pandas. They were a much easier and better-looking solution. But it still wasn't working. Finally, i used the Postman approach and f-strings to format a successful payload. The third try worked! F-strings are super nice and clean.&lt;/li&gt;
&lt;li&gt;If you're stuck, there's probably a free online course or blog post that explains whatever is confusing you. Use the Googles. When in doubt, Google the error message.&lt;/li&gt;
&lt;li&gt;Begin your project by writing a list of requirements. This often leads to good questions and cases that may need to be addressed. The book &lt;a class="reference external" href="https://www.amazon.com/gp/product/0735619670/"&gt;Code Complete 2&lt;/a&gt; covers establishing project requirements in great detail, along with the other stages in the life-cycle of a software project. I'm really enjoying this book and highly recommend it.&lt;/li&gt;
&lt;li&gt;Names are really important. Take time to think about a good name for your variables and functions. Also, name your scripts well. I name my scripts using &lt;a class="reference external" href="https://examples.yourdictionary.com/action-verb-examples.html"&gt;action verbs&lt;/a&gt;. For example, my script that organizes accumulated files on my desktop into folders is named &lt;tt class="docutils literal"&gt;clean_desktop_files.py&lt;/tt&gt;. When I see this script months later, its name reminds me the action the script is performing. I believe it's better to err on the side of longer, more descriptive names for variables and functions. It makes code easier to understand. But there is a trade-off with length to keep in check.&lt;/li&gt;
&lt;li&gt;Moving a block of code into a function can abstract away repetitive code and increase its readability.&lt;/li&gt;
&lt;li&gt;Each function should do one thing only. Follow the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single-responsibility principle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Train yourself to think in &lt;a class="reference external" href="https://docs.python.org/3/tutorial/datastructures.html"&gt;data structure&lt;/a&gt;&amp;nbsp;conversions. The Python dictionary is very useful and can be converted to and from lists, tuples, sets, etc. I often find it more efficient to convert to a different structure to efficiently organize it. Usually I am googling things like &amp;quot;convert class object to python dictionary&amp;quot; because dictionaries are easy to work with or convert to other structures. The &lt;tt class="docutils literal"&gt;vars()&lt;/tt&gt; built-in is great for converting objects to a dictionary. For example, once you have a dictionary, you might be able to solve your problem by &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.from_dict.html"&gt;converting it to a dataframe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use only the data you need. Reading in just the essential data helps avoid memory issues and hanging programs. In &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;pandas&lt;/a&gt;, the &lt;tt class="docutils literal"&gt;usecols&lt;/tt&gt; argument in &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"&gt;pd.read_csv()&lt;/a&gt; is great for this. This creates a dataframe with 2 columns:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emails.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usecols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="15"&gt;
&lt;li&gt;Assume that if something is broken, it's because of something you've done. Start from the assumption that your code contains the bug and work outward by eliminating possibilities. Avoid jumping to quick conclusions. Instead, carefully consider possible reasons for why something is happening. Many times, I find my 2nd or 3rd hypothesis is actually true.&lt;/li&gt;
&lt;li&gt;There will be times when you'll look at someone else's choices and wonder why they did things a certain way. Consider the possibility that they know more than you in this domain.&lt;/li&gt;
&lt;li&gt;Beware of sequencing errors. Are your tasks, scripts or functions executing in an efficient order to reach your end goal? Look to unblock bottlenecks and correct chronological mistakes in your processes.&lt;/li&gt;
&lt;li&gt;Before you send that email asking for help, go back and take another look. There's also no shame in asking for help. Be sure you proofread your email before sending.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Status code 200&lt;/a&gt; does not guarantee your API request was successful. You may want to write a test to confirm success that doesn't rely on response status codes.&lt;/li&gt;
&lt;li&gt;Unfortunately, &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2019/12/05/a-collection-of-software-testing-opinions-for-python-and-beyond/"&gt;testing&lt;/a&gt; gets shunned sometimes. Make it a priority. I enjoy writing &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/03/21/automating-pytest-on-windows-with-a-bat-file-python-task-scheduler-and-box/"&gt;pytest tests&lt;/a&gt; more than most other code. Why? Because tests confirm my scripts are working to some degree, detect bugs and provide a refactoring safety net.&lt;/li&gt;
&lt;li&gt;Refactoring your code is a crucial step in making it better. Coming back to my code after a few weeks, months or years brings clarity, experience and a new perspective. It feels good to improve the quality of my old work.&lt;/li&gt;
&lt;li&gt;Consolidate your tasks. Bundling things can save you a bundle of time! Identify redundant patterns and remove if possible. Observe yourself while working. Any repetitive manual process can probably be automated away. Recently, I figured out how to use a &lt;a class="reference external" href="https://www.windowscentral.com/how-create-and-run-batch-file-windows-10"&gt;Windows batch file&lt;/a&gt; to instantly activate my Python &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2018/04/10/creating-isolated-python-environments-with-virtualenv/"&gt;virtual environment&lt;/a&gt;. It took me a few years of tediously pasting the &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; commands into command prompt every day to realize. Now it's a snap.&lt;/li&gt;
&lt;li&gt;Stack Overflow is a useful resource. But the top answers may be outdated. Check the other less popular answers sometimes. Or...&lt;/li&gt;
&lt;li&gt;Read the documentation! An updated or more elegant solution might be there. I recently found &lt;tt class="docutils literal"&gt;os.makedirs(path, exist_ok=True)&lt;/tt&gt; in the &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.makedirs"&gt;os docs&lt;/a&gt;. I didn't know about the &lt;tt class="docutils literal"&gt;exist_ok&lt;/tt&gt; argument. I was creating folders with a more complicated alternative from &lt;a class="reference external" href="https://stackoverflow.com/questions/273192/how-can-i-safely-create-a-nested-directory"&gt;Stack Overflow&lt;/a&gt; for years. I use this way all the time now. In the same vein, if you need the local system username, the Python docs state &lt;a class="reference external" href="https://docs.python.org/3.8/library/getpass.html"&gt;getpass.getuser()&lt;/a&gt; is preferred over os.getlogin().&lt;/li&gt;
&lt;li&gt;Write documentation explaining how to use your projects. Even if you can only muster a quick &lt;a class="reference external" href="https://en.wikipedia.org/wiki/README"&gt;README&lt;/a&gt; text file, that's better than nothing. Within your code, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0257/"&gt;docstrings&lt;/a&gt; are a nice addition. I have yet to use &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;, but it is a popular choice for generating documentation.&lt;/li&gt;
&lt;li&gt;Teaching others feels good and solidifies your knowledge. Writing and pair programming are great ways to improve your understanding and pass your skills along to other people. While we're on the subject of writing...&lt;/li&gt;
&lt;li&gt;Write everything down! Your head is not good at storing information in memory. Computers are. This frees your mind to come up with new ideas rather than expending energy to remember what you've already done. It also helps you plan. I use a Notepad text file to keep a running to-do list. You could also use services like Trello or Microsoft Planner. While writing code, use comments and docstrings conservatively for quick notes, clarifications or reminders. The important thing is to write it down somewhere.&lt;/li&gt;
&lt;li&gt;When editing your writing, continually ask yourself, &amp;quot;Do I need this word or phrase?&amp;quot; for every word you write.&lt;/li&gt;
&lt;/ol&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&amp;quot;Brevity is the soul of wit.&amp;quot; - William Shakespeare (Hamlet)&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="29"&gt;
&lt;li&gt;Draw inspiration from culture, nature and professional disciplines outside of your own. &lt;a class="reference external" href="https://pythonmarketer.wordpress.com/2020/01/28/lessons-learned-from-lost-in-space-on-netflix/"&gt;Insights can be mined from anything&lt;/a&gt;. Don't dismiss a situation as mundane without first scanning for knowledge nuggets and gems.&lt;/li&gt;
&lt;li&gt;Better solutions often come to me after gaining time and experience with a problem. Building software is an iterative cycle of adjustment towards consistently fulfilling the needs of those it serves in 100% of cases. In a perfect world, you'd never have bugs. But edge cases tend to pop up in ways you didn't think of when you first wrote a solution. There will also be projects where requirements or business rules change. Consider that possibility when you are designing your solution.&lt;/li&gt;
&lt;li&gt;It's possible to find a job that you're excited about and genuinely enjoy the work.&lt;/li&gt;
&lt;li&gt;Respect your craft, whether it's coding or another profession. A skilled carpenter needs precision, practice and focus to make something beautiful. Approach your craft with the same mindset and pride in making your best art.&lt;/li&gt;
&lt;li&gt;We all have holes in our knowledge. Be receptive to other ways of thinking. The best way to learn is from other humans. Everyone has different backgrounds and experiences. I have never used object oriented programming, classes or certain command line tools like &lt;a class="reference external" href="https://www.howtogeek.com/336775/how-to-enable-and-use-windows-10s-built-in-ssh-commands/"&gt;ssh&lt;/a&gt;. I have a loose understanding of these things but have not yet applied them to my projects. Working with paths (os and pathlib) still gives me fits sometimes. These are knowledge gaps that I want to fill in. Additionally, we don't know what we don't know. Try to illuminate the fog of your unknown.&lt;/li&gt;
&lt;li&gt;Choosing to dedicate to learning Python is among the best decisions I've made.&lt;/li&gt;
&lt;li&gt;Attitude is more important than intelligence. Anyone can learn to program, play guitar or fly an airplane. You can become an adept problem solver. Acquire an attitude to support your determination and persistence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;quot;attachment_2981&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;959&amp;quot;]&lt;a class="reference external image-reference" href="https://www.youtube.com/watch?v=I56oFTm9UlE"&gt;&lt;img alt="brandonrhodes" class="alignnone size-full wp-image-2981" src="https://pythonmarketer.files.wordpress.com/2020/04/brandonrhodes.png" style="width: 959px; height: 541px;" /&gt;&lt;/a&gt; Brandon Rhodes: Stopping to Sharpen Your Tools - PyWaw Summit 2015[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'll leave you with the 4 P's and 4 C's from my&lt;/strong&gt; &lt;a class="reference external" href="https://www.youtube.com/watch?v=SfQYA0JQWkA"&gt;Programming for Everybody Coursera course graduation ceremony&lt;/a&gt;&lt;strong&gt;. Cultivating these principles will guide you to growing your education and finding a positive course in life:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;4 P’s:&lt;/strong&gt; Passion, Purpose, Persistence, Playfulness&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 C’s:&lt;/strong&gt; Choice, Commitment, Connection, Completion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you for reading and I hope this post helps you on your own educational journey.&lt;/p&gt;
</content><category term="coding, education, Marketing, programming, python, wisdom"></category><category term="advice"></category><category term="learning"></category><category term="problem solving"></category><category term="writing"></category></entry></feed>