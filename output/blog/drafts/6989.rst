Crawling the Subfolders and Files of a Folder 3 Levels Deep with List Comprehensions
####################################################################################
:date: 2022-06-11 15:47
:author: pythonmarketer
:category: coding, performance, programming, Scripts
:tags: file system, list comprehensions, python
:slug: 6989
:status: draft

Traversing a tree of folders can be done many ways in Python. Here is one approach that worked for me using pathlib, list comprehensions and `os.scandir() <https://docs.python.org/3/library/os.html#os.scandir>`__. I was able to use pathlib and the os module to get a list of all files and subfolders up to two levels below a top level folder.

The inspiration to use os.scandir() came from `this Stack Overflow post <https://stackoverflow.com/questions/973473/getting-a-list-of-all-subdirectories-in-the-current-directory>`__. It is well documented as the most performant way to get a list of items in a folder. List comprehensions are also often acknowledged as a faster way to loop through iterators. Note how we can use pathlib's is_file() and is_dir() finctions within the list comprehensions to find either the subfolders or subfiles.

I'm satisfied with this code because I've tried to do this before but failed to get other strategies to work. It gets the job done and uses some clever, Pythonic pieces: pathlib, os.scandir() and two list comprehensions. There may be a better way, but I'm happy with this one for now!

.. code:: wp-block-syntaxhighlighter-code

   import os
   from pathlib import Path


   def crawl_folder(path):
       """Get a list of sub-folders and sub-files from top level folder.
       Accepts: pathlib path object
       Returns: subfolders and file names as 2 lists
       """
       subfolders = [item.path for item in os.scandir(path) if item.is_dir()]
       file_names = list()
       for subfolder in subfolders:
           files = [item.path for item in os.scandir(subfolder)]
           file_names += files
           sub_sub_folders = [item.path for item in os.scandir(subfolder) if item.is_dir()]
           for subfolder in sub_sub_folders:
               files = [item.path for item in os.scandir(subfolder)]
               file_names += files
       subfolders += sub_sub_folders
       return subfolders, file_names


   # specify full path if folder not in the same folder as script
   folder = Path.cwd() / "Folder_Name"
   path = Path(folder)
   subfolders, file_names = crawl_folder(path)
   with open("Crawled_Files.txt", "w") as fhand:
       for f in sorted(file_names):
           line = f + "\n"
           fhand.write(line)

   The ```scandir()`` <https://docs.python.org/3/library/os.html#os.scandir>`__ function returns directory entries along with file attribute information, giving better performance for many common use cases.

   https://docs.python.org/3/library/os.html#os.listdir

See also: `PEP 471 – os.scandir() function – a better and faster directory iterator <https://peps.python.org/pep-0471/>`__
